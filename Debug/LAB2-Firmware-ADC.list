
LAB2-Firmware-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000973c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009914  08009914  0000a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009954  08009954  0000b018  2**0
                  CONTENTS
  4 .ARM          00000008  08009954  08009954  0000a954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800995c  0800995c  0000b018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800995c  0800995c  0000a95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009960  08009960  0000a960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009964  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20000018  0800997c  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800997c  0000b478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184c7  00000000  00000000  0000b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca6  00000000  00000000  0002350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  000261b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b4  00000000  00000000  00027710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  000287c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e66  00000000  00000000  0005159a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001142f4  00000000  00000000  0006a400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e0c  00000000  00000000  0017e738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00184544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080098fc 	.word	0x080098fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080098fc 	.word	0x080098fc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f001 fda8 	bl	80028de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 f955 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f000 fd55 	bl	8001840 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d96:	f000 fd29 	bl	80017ec <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d9a:	f000 fa25 	bl	80011e8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d9e:	f000 f999 	bl	80010d4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000da2:	f000 fac5 	bl	8001330 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000da6:	f000 fbb5 	bl	8001514 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000daa:	f000 fb0f 	bl	80013cc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dae:	f000 fb63 	bl	8001478 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000db2:	f000 fc77 	bl	80016a4 <MX_TIM15_Init>
  MX_TIM2_Init();
 8000db6:	f000 fa61 	bl	800127c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); //DMA Out Event 1000 Hz
 8000dba:	4883      	ldr	r0, [pc, #524]	@ (8000fc8 <main+0x244>)
 8000dbc:	f005 f90e 	bl	8005fdc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4); //QEI Read
 8000dc0:	4882      	ldr	r0, [pc, #520]	@ (8000fcc <main+0x248>)
 8000dc2:	f005 f90b 	bl	8005fdc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5); //Microsencond Timer
 8000dc6:	4882      	ldr	r0, [pc, #520]	@ (8000fd0 <main+0x24c>)
 8000dc8:	f005 f908 	bl	8005fdc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8); //PWM Generation
 8000dcc:	4881      	ldr	r0, [pc, #516]	@ (8000fd4 <main+0x250>)
 8000dce:	f005 f905 	bl	8005fdc <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //L298N
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	487f      	ldr	r0, [pc, #508]	@ (8000fd4 <main+0x250>)
 8000dd6:	f005 f9c9 	bl	800616c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); //DRV8833 AI1
 8000dda:	2104      	movs	r1, #4
 8000ddc:	487d      	ldr	r0, [pc, #500]	@ (8000fd4 <main+0x250>)
 8000dde:	f005 f9c5 	bl	800616c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //DRV8833 AI2
 8000de2:	2108      	movs	r1, #8
 8000de4:	487b      	ldr	r0, [pc, #492]	@ (8000fd4 <main+0x250>)
 8000de6:	f005 f9c1 	bl	800616c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dea:	2100      	movs	r1, #0
 8000dec:	487a      	ldr	r0, [pc, #488]	@ (8000fd8 <main+0x254>)
 8000dee:	f005 f9bd 	bl	800616c <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000df2:	213c      	movs	r1, #60	@ 0x3c
 8000df4:	4875      	ldr	r0, [pc, #468]	@ (8000fcc <main+0x248>)
 8000df6:	f005 fb71 	bl	80064dc <HAL_TIM_Encoder_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dfa:	217f      	movs	r1, #127	@ 0x7f
 8000dfc:	4877      	ldr	r0, [pc, #476]	@ (8000fdc <main+0x258>)
 8000dfe:	f003 f8ed 	bl	8003fdc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 50);
 8000e02:	2232      	movs	r2, #50	@ 0x32
 8000e04:	4976      	ldr	r1, [pc, #472]	@ (8000fe0 <main+0x25c>)
 8000e06:	4875      	ldr	r0, [pc, #468]	@ (8000fdc <main+0x258>)
 8000e08:	f002 f9da 	bl	80031c0 <HAL_ADC_Start_DMA>

  // PID Parameter for L298N Motor
//  PID.Kp = 0.06;
//  PID.Ki = 0.00005;
//  PID.Kd = 0.03;
	PID.Kp = 0.2;
 8000e0c:	4b75      	ldr	r3, [pc, #468]	@ (8000fe4 <main+0x260>)
 8000e0e:	4a76      	ldr	r2, [pc, #472]	@ (8000fe8 <main+0x264>)
 8000e10:	619a      	str	r2, [r3, #24]
	PID.Ki = 0.0005;
 8000e12:	4b74      	ldr	r3, [pc, #464]	@ (8000fe4 <main+0x260>)
 8000e14:	4a75      	ldr	r2, [pc, #468]	@ (8000fec <main+0x268>)
 8000e16:	61da      	str	r2, [r3, #28]
	PID.Kd = 0.3;
 8000e18:	4b72      	ldr	r3, [pc, #456]	@ (8000fe4 <main+0x260>)
 8000e1a:	4a75      	ldr	r2, [pc, #468]	@ (8000ff0 <main+0x26c>)
 8000e1c:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4870      	ldr	r0, [pc, #448]	@ (8000fe4 <main+0x260>)
 8000e22:	f008 fd09 	bl	8009838 <arm_pid_init_f32>
//  PID2.Kd = 0.3;
//  PID2.Kp = 0.1;
//  PID2.Ki = 0.00000;;
//  PID2.Kd = 0.05;

  PID2.Kp = 0.2;
 8000e26:	4b73      	ldr	r3, [pc, #460]	@ (8000ff4 <main+0x270>)
 8000e28:	4a6f      	ldr	r2, [pc, #444]	@ (8000fe8 <main+0x264>)
 8000e2a:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.0000001;
 8000e2c:	4b71      	ldr	r3, [pc, #452]	@ (8000ff4 <main+0x270>)
 8000e2e:	4a72      	ldr	r2, [pc, #456]	@ (8000ff8 <main+0x274>)
 8000e30:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.3;
 8000e32:	4b70      	ldr	r3, [pc, #448]	@ (8000ff4 <main+0x270>)
 8000e34:	4a6e      	ldr	r2, [pc, #440]	@ (8000ff0 <main+0x26c>)
 8000e36:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8000e38:	2100      	movs	r1, #0
 8000e3a:	486e      	ldr	r0, [pc, #440]	@ (8000ff4 <main+0x270>)
 8000e3c:	f008 fcfc 	bl	8009838 <arm_pid_init_f32>

  UARTInterruptConfig();
 8000e40:	f001 fa0e 	bl	8002260 <UARTInterruptConfig>
  _micros = 0;
 8000e44:	496d      	ldr	r1, [pc, #436]	@ (8000ffc <main+0x278>)
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	e9c1 2300 	strd	r2, r3, [r1]

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
//	  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, fabs(A));
	  if (state == 0) //L298N Driver Control
 8000e52:	4b6b      	ldr	r3, [pc, #428]	@ (8001000 <main+0x27c>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d115      	bne.n	8000e86 <main+0x102>
	  {
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 8000e5a:	f001 fda5 	bl	80029a8 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	4b68      	ldr	r3, [pc, #416]	@ (8001004 <main+0x280>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d9f4      	bls.n	8000e52 <main+0xce>
		  {
			  timestamp = HAL_GetTick() + 1; //1000 Hz
 8000e68:	f001 fd9e 	bl	80029a8 <HAL_GetTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	3301      	adds	r3, #1
 8000e70:	4a64      	ldr	r2, [pc, #400]	@ (8001004 <main+0x280>)
 8000e72:	6013      	str	r3, [r2, #0]
//			  PotenEncoderPosVel_Update();
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2120      	movs	r1, #32
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7c:	f003 ffdc 	bl	8004e38 <HAL_GPIO_WritePin>
			  MotorControl(); //L298N
 8000e80:	f000 fdfa 	bl	8001a78 <MotorControl>
 8000e84:	e7e5      	b.n	8000e52 <main+0xce>
//			  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(A));

		  }
	  }

	  else if (state == 1) //DRV8833 Driver Control
 8000e86:	4b5e      	ldr	r3, [pc, #376]	@ (8001000 <main+0x27c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d115      	bne.n	8000eba <main+0x136>
	  {
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 8000e8e:	f001 fd8b 	bl	80029a8 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	4b5c      	ldr	r3, [pc, #368]	@ (8001008 <main+0x284>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d9da      	bls.n	8000e52 <main+0xce>
		  {
			  timestamp = HAL_GetTick() + 1;//1000 Hz
 8000e9c:	f001 fd84 	bl	80029a8 <HAL_GetTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4a58      	ldr	r2, [pc, #352]	@ (8001008 <main+0x284>)
 8000ea6:	6013      	str	r3, [r2, #0]

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2120      	movs	r1, #32
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eb0:	f003 ffc2 	bl	8004e38 <HAL_GPIO_WritePin>
			  MotorControl2(); //DRV8833
 8000eb4:	f000 ff34 	bl	8001d20 <MotorControl2>
 8000eb8:	e7cb      	b.n	8000e52 <main+0xce>
		  }
	  }

	  else if (state == 2) //PWM Waijung Control L298N
 8000eba:	4b51      	ldr	r3, [pc, #324]	@ (8001000 <main+0x27c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d1c7      	bne.n	8000e52 <main+0xce>
	  {
		  static uint32_t timestamp2 = 0; //Waijung Time Control
		  static uint32_t timestampLED = 0; //LED Time Control
		  static uint32_t timestampMOR = 0; //Motor Time Control

		  currentTime = micros(); //Time Counter for Waijung
 8000ec2:	f001 f9b3 	bl	800222c <micros>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4950      	ldr	r1, [pc, #320]	@ (800100c <main+0x288>)
 8000ecc:	e9c1 2300 	strd	r2, r3, [r1]
		  currentTimeLED = micros(); //Time Counter for LED
 8000ed0:	f001 f9ac 	bl	800222c <micros>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	494d      	ldr	r1, [pc, #308]	@ (8001010 <main+0x28c>)
 8000eda:	e9c1 2300 	strd	r2, r3, [r1]

		  //Map Rx Data to PWM
		  PWMDrive = (int16_t)(Rx[2]<< 8)+Rx[1];
 8000ede:	4b4d      	ldr	r3, [pc, #308]	@ (8001014 <main+0x290>)
 8000ee0:	789b      	ldrb	r3, [r3, #2]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b4a      	ldr	r3, [pc, #296]	@ (8001014 <main+0x290>)
 8000eea:	785b      	ldrb	r3, [r3, #1]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a4a      	ldr	r2, [pc, #296]	@ (8001018 <main+0x294>)
 8000ef0:	6013      	str	r3, [r2, #0]

		  if(currentTime > timestamp2)
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <main+0x298>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	461c      	mov	r4, r3
 8000efa:	4615      	mov	r5, r2
 8000efc:	4b43      	ldr	r3, [pc, #268]	@ (800100c <main+0x288>)
 8000efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f02:	4294      	cmp	r4, r2
 8000f04:	eb75 0303 	sbcs.w	r3, r5, r3
 8000f08:	d233      	bcs.n	8000f72 <main+0x1ee>
		  {
			  timestamp2 = currentTime + 5000; //us 200 Hz
 8000f0a:	4b40      	ldr	r3, [pc, #256]	@ (800100c <main+0x288>)
 8000f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f10:	4613      	mov	r3, r2
 8000f12:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8000f16:	3308      	adds	r3, #8
 8000f18:	4a40      	ldr	r2, [pc, #256]	@ (800101c <main+0x298>)
 8000f1a:	6013      	str	r3, [r2, #0]

			  if(timestamp2 > 4294967296) timestamp2 = 0; //Counter Reset Overflow

			  dataSend = fabs(ADC_Average[0]);
 8000f1c:	4b40      	ldr	r3, [pc, #256]	@ (8001020 <main+0x29c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff facb 	bl	80004bc <__aeabi_i2d>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4692      	mov	sl, r2
 8000f2c:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8000f30:	4650      	mov	r0, sl
 8000f32:	4659      	mov	r1, fp
 8000f34:	f7ff fd3e 	bl	80009b4 <__aeabi_d2uiz>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b39      	ldr	r3, [pc, #228]	@ (8001024 <main+0x2a0>)
 8000f3e:	801a      	strh	r2, [r3, #0]

			  dataBytes[0] = header; // Header byte
 8000f40:	4b39      	ldr	r3, [pc, #228]	@ (8001028 <main+0x2a4>)
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	4b39      	ldr	r3, [pc, #228]	@ (800102c <main+0x2a8>)
 8000f46:	701a      	strb	r2, [r3, #0]
			  dataBytes[1] = (uint8_t)(dataSend & 0xFF); // Lower byte
 8000f48:	4b36      	ldr	r3, [pc, #216]	@ (8001024 <main+0x2a0>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b37      	ldr	r3, [pc, #220]	@ (800102c <main+0x2a8>)
 8000f50:	705a      	strb	r2, [r3, #1]
			  dataBytes[2] = (uint8_t)((dataSend >> 8) & 0xFF); // Upper byte
 8000f52:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <main+0x2a0>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b33      	ldr	r3, [pc, #204]	@ (800102c <main+0x2a8>)
 8000f5e:	709a      	strb	r2, [r3, #2]
			  dataBytes[3] = 0x0A;
 8000f60:	4b32      	ldr	r3, [pc, #200]	@ (800102c <main+0x2a8>)
 8000f62:	220a      	movs	r2, #10
 8000f64:	70da      	strb	r2, [r3, #3]

			  HAL_UART_Transmit(&hlpuart1, dataBytes, sizeof(dataBytes), 10);
 8000f66:	230a      	movs	r3, #10
 8000f68:	2204      	movs	r2, #4
 8000f6a:	4930      	ldr	r1, [pc, #192]	@ (800102c <main+0x2a8>)
 8000f6c:	4830      	ldr	r0, [pc, #192]	@ (8001030 <main+0x2ac>)
 8000f6e:	f006 fb87 	bl	8007680 <HAL_UART_Transmit>
		  }

		  if(timestampMOR < HAL_GetTick()) //Motor Control from Waijung PWM
 8000f72:	f001 fd19 	bl	80029a8 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	4b2e      	ldr	r3, [pc, #184]	@ (8001034 <main+0x2b0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d907      	bls.n	8000f90 <main+0x20c>
		  {
			  timestampMOR = HAL_GetTick() + 1; //1000Hz
 8000f80:	f001 fd12 	bl	80029a8 <HAL_GetTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a2a      	ldr	r2, [pc, #168]	@ (8001034 <main+0x2b0>)
 8000f8a:	6013      	str	r3, [r2, #0]
			  MotorControl3();
 8000f8c:	f001 f840 	bl	8002010 <MotorControl3>
		  }
		  if(currentTimeLED > timestampLED) //LED Constance Frequency 0.5 s
 8000f90:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <main+0x2b4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4698      	mov	r8, r3
 8000f98:	4691      	mov	r9, r2
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <main+0x28c>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	4590      	cmp	r8, r2
 8000fa2:	eb79 0303 	sbcs.w	r3, r9, r3
 8000fa6:	f4bf af54 	bcs.w	8000e52 <main+0xce>
		  {
			  timestampLED = currentTime + 250000; //us
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <main+0x288>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	f503 3374 	add.w	r3, r3, #249856	@ 0x3d000
 8000fb6:	3390      	adds	r3, #144	@ 0x90
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8001038 <main+0x2b4>)
 8000fba:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fbc:	2120      	movs	r1, #32
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc2:	f003 ff51 	bl	8004e68 <HAL_GPIO_TogglePin>
	  if (state == 0) //L298N Driver Control
 8000fc6:	e744      	b.n	8000e52 <main+0xce>
 8000fc8:	200001e0 	.word	0x200001e0
 8000fcc:	2000022c 	.word	0x2000022c
 8000fd0:	20000278 	.word	0x20000278
 8000fd4:	200002c4 	.word	0x200002c4
 8000fd8:	20000194 	.word	0x20000194
 8000fdc:	20000034 	.word	0x20000034
 8000fe0:	20000370 	.word	0x20000370
 8000fe4:	200003f4 	.word	0x200003f4
 8000fe8:	3e4ccccd 	.word	0x3e4ccccd
 8000fec:	3a03126f 	.word	0x3a03126f
 8000ff0:	3e99999a 	.word	0x3e99999a
 8000ff4:	20000418 	.word	0x20000418
 8000ff8:	33d6bf95 	.word	0x33d6bf95
 8000ffc:	20000458 	.word	0x20000458
 8001000:	2000035c 	.word	0x2000035c
 8001004:	20000460 	.word	0x20000460
 8001008:	20000464 	.word	0x20000464
 800100c:	20000360 	.word	0x20000360
 8001010:	20000368 	.word	0x20000368
 8001014:	20000448 	.word	0x20000448
 8001018:	20000450 	.word	0x20000450
 800101c:	20000468 	.word	0x20000468
 8001020:	200003d4 	.word	0x200003d4
 8001024:	2000000a 	.word	0x2000000a
 8001028:	20000008 	.word	0x20000008
 800102c:	20000454 	.word	0x20000454
 8001030:	20000100 	.word	0x20000100
 8001034:	2000046c 	.word	0x2000046c
 8001038:	20000470 	.word	0x20000470

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	@ 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0318 	add.w	r3, r7, #24
 8001046:	2238      	movs	r2, #56	@ 0x38
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f008 fc2a 	bl	80098a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800105e:	2000      	movs	r0, #0
 8001060:	f003 ff34 	bl	8004ecc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106e:	2340      	movs	r3, #64	@ 0x40
 8001070:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001076:	2302      	movs	r3, #2
 8001078:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800107a:	2304      	movs	r3, #4
 800107c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800107e:	2355      	movs	r3, #85	@ 0x55
 8001080:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	4618      	mov	r0, r3
 8001094:	f003 ffce 	bl	8005034 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800109e:	f001 f92d 	bl	80022fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2104      	movs	r1, #4
 80010ba:	4618      	mov	r0, r3
 80010bc:	f004 facc 	bl	8005658 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010c6:	f001 f919 	bl	80022fc <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3750      	adds	r7, #80	@ 0x50
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	@ 0x30
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2220      	movs	r2, #32
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f008 fbd9 	bl	80098a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f2:	4b3a      	ldr	r3, [pc, #232]	@ (80011dc <MX_ADC1_Init+0x108>)
 80010f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010fa:	4b38      	ldr	r3, [pc, #224]	@ (80011dc <MX_ADC1_Init+0x108>)
 80010fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001100:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001102:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001108:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <MX_ADC1_Init+0x108>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800110e:	4b33      	ldr	r3, [pc, #204]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001114:	4b31      	ldr	r3, [pc, #196]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001116:	2201      	movs	r2, #1
 8001118:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b30      	ldr	r3, [pc, #192]	@ (80011dc <MX_ADC1_Init+0x108>)
 800111c:	2204      	movs	r2, #4
 800111e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001120:	4b2e      	ldr	r3, [pc, #184]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001122:	2200      	movs	r2, #0
 8001124:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001126:	4b2d      	ldr	r3, [pc, #180]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001128:	2200      	movs	r2, #0
 800112a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800112c:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <MX_ADC1_Init+0x108>)
 800112e:	2202      	movs	r2, #2
 8001130:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b2a      	ldr	r3, [pc, #168]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800113a:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <MX_ADC1_Init+0x108>)
 800113c:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001140:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001142:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001144:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001148:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800114a:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <MX_ADC1_Init+0x108>)
 800114c:	2201      	movs	r2, #1
 800114e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001154:	2200      	movs	r2, #0
 8001156:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001158:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <MX_ADC1_Init+0x108>)
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001160:	481e      	ldr	r0, [pc, #120]	@ (80011dc <MX_ADC1_Init+0x108>)
 8001162:	f001 fe71 	bl	8002e48 <HAL_ADC_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800116c:	f001 f8c6 	bl	80022fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	4818      	ldr	r0, [pc, #96]	@ (80011dc <MX_ADC1_Init+0x108>)
 800117c:	f002 ff90 	bl	80040a0 <HAL_ADCEx_MultiModeConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001186:	f001 f8b9 	bl	80022fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_ADC1_Init+0x10c>)
 800118c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800118e:	2306      	movs	r3, #6
 8001190:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001192:	2307      	movs	r3, #7
 8001194:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001196:	237f      	movs	r3, #127	@ 0x7f
 8001198:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800119a:	2304      	movs	r3, #4
 800119c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	480d      	ldr	r0, [pc, #52]	@ (80011dc <MX_ADC1_Init+0x108>)
 80011a8:	f002 f8fc 	bl	80033a4 <HAL_ADC_ConfigChannel>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80011b2:	f001 f8a3 	bl	80022fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_ADC1_Init+0x110>)
 80011b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011ba:	230c      	movs	r3, #12
 80011bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_ADC1_Init+0x108>)
 80011c4:	f002 f8ee 	bl	80033a4 <HAL_ADC_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80011ce:	f001 f895 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3730      	adds	r7, #48	@ 0x30
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000034 	.word	0x20000034
 80011e0:	04300002 	.word	0x04300002
 80011e4:	08600004 	.word	0x08600004

080011e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011ec:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 80011ee:	4a22      	ldr	r2, [pc, #136]	@ (8001278 <MX_LPUART1_UART_Init+0x90>)
 80011f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011f2:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001206:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800122a:	4812      	ldr	r0, [pc, #72]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 800122c:	f006 f9d8 	bl	80075e0 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001236:	f001 f861 	bl	80022fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 800123e:	f008 fa30 	bl	80096a2 <HAL_UARTEx_SetTxFifoThreshold>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001248:	f001 f858 	bl	80022fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	4809      	ldr	r0, [pc, #36]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001250:	f008 fa65 	bl	800971e <HAL_UARTEx_SetRxFifoThreshold>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800125a:	f001 f84f 	bl	80022fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001260:	f008 f9e6 	bl	8009630 <HAL_UARTEx_DisableFifoMode>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800126a:	f001 f847 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000100 	.word	0x20000100
 8001278:	40008000 	.word	0x40008000

0800127c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84999;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012b6:	4a1d      	ldr	r2, [pc, #116]	@ (800132c <MX_TIM2_Init+0xb0>)
 80012b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c6:	4818      	ldr	r0, [pc, #96]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012c8:	f004 fef8 	bl	80060bc <HAL_TIM_PWM_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012d2:	f001 f813 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4810      	ldr	r0, [pc, #64]	@ (8001328 <MX_TIM2_Init+0xac>)
 80012e6:	f006 f851 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012f0:	f001 f804 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	2360      	movs	r3, #96	@ 0x60
 80012f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	4619      	mov	r1, r3
 800130a:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM2_Init+0xac>)
 800130c:	f005 f974 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001316:	f000 fff1 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800131a:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM2_Init+0xac>)
 800131c:	f001 f9b8 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001320:	bf00      	nop
 8001322:	3728      	adds	r7, #40	@ 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000194 	.word	0x20000194
 800132c:	00014c07 	.word	0x00014c07

08001330 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <MX_TIM3_Init+0x94>)
 8001350:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <MX_TIM3_Init+0x98>)
 8001352:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <MX_TIM3_Init+0x94>)
 8001356:	22a9      	movs	r2, #169	@ 0xa9
 8001358:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_TIM3_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <MX_TIM3_Init+0x94>)
 8001362:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001366:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <MX_TIM3_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <MX_TIM3_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001374:	4813      	ldr	r0, [pc, #76]	@ (80013c4 <MX_TIM3_Init+0x94>)
 8001376:	f004 fdd9 	bl	8005f2c <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001380:	f000 ffbc 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <MX_TIM3_Init+0x94>)
 8001392:	f005 fa45 	bl	8006820 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800139c:	f000 ffae 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013a0:	2320      	movs	r3, #32
 80013a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_TIM3_Init+0x94>)
 80013ae:	f005 ffed 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013b8:	f000 ffa0 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200001e0 	.word	0x200001e0
 80013c8:	40000400 	.word	0x40000400

080013cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	@ 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2224      	movs	r2, #36	@ 0x24
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f008 fa62 	bl	80098a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e0:	463b      	mov	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <MX_TIM4_Init+0xa4>)
 80013ec:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <MX_TIM4_Init+0xa8>)
 80013ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <MX_TIM4_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <MX_TIM4_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3071;
 80013fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_TIM4_Init+0xa4>)
 80013fe:	f640 32ff 	movw	r2, #3071	@ 0xbff
 8001402:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_TIM4_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <MX_TIM4_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001410:	2303      	movs	r3, #3
 8001412:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001428:	2301      	movs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	@ (8001470 <MX_TIM4_Init+0xa4>)
 800143c:	f004 ffa8 	bl	8006390 <HAL_TIM_Encoder_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001446:	f000 ff59 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	@ (8001470 <MX_TIM4_Init+0xa4>)
 8001458:	f005 ff98 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001462:	f000 ff4b 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3730      	adds	r7, #48	@ 0x30
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000022c 	.word	0x2000022c
 8001474:	40000800 	.word	0x40000800

08001478 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001496:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <MX_TIM5_Init+0x94>)
 8001498:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <MX_TIM5_Init+0x98>)
 800149a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <MX_TIM5_Init+0x94>)
 800149e:	22a9      	movs	r2, #169	@ 0xa9
 80014a0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_TIM5_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <MX_TIM5_Init+0x94>)
 80014aa:	f04f 32ff 	mov.w	r2, #4294967295
 80014ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <MX_TIM5_Init+0x94>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <MX_TIM5_Init+0x94>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014bc:	4813      	ldr	r0, [pc, #76]	@ (800150c <MX_TIM5_Init+0x94>)
 80014be:	f004 fd35 	bl	8005f2c <HAL_TIM_Base_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80014c8:	f000 ff18 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014d2:	f107 0310 	add.w	r3, r7, #16
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <MX_TIM5_Init+0x94>)
 80014da:	f005 f9a1 	bl	8006820 <HAL_TIM_ConfigClockSource>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014e4:	f000 ff0a 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_TIM5_Init+0x94>)
 80014f6:	f005 ff49 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001500:	f000 fefc 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000278 	.word	0x20000278
 8001510:	40000c00 	.word	0x40000c00

08001514 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b09c      	sub	sp, #112	@ 0x70
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001534:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2234      	movs	r2, #52	@ 0x34
 800154c:	2100      	movs	r1, #0
 800154e:	4618      	mov	r0, r3
 8001550:	f008 f9a8 	bl	80098a4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001554:	4b51      	ldr	r3, [pc, #324]	@ (800169c <MX_TIM8_Init+0x188>)
 8001556:	4a52      	ldr	r2, [pc, #328]	@ (80016a0 <MX_TIM8_Init+0x18c>)
 8001558:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 800155a:	4b50      	ldr	r3, [pc, #320]	@ (800169c <MX_TIM8_Init+0x188>)
 800155c:	2210      	movs	r2, #16
 800155e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001560:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <MX_TIM8_Init+0x188>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8001566:	4b4d      	ldr	r3, [pc, #308]	@ (800169c <MX_TIM8_Init+0x188>)
 8001568:	f241 3287 	movw	r2, #4999	@ 0x1387
 800156c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156e:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <MX_TIM8_Init+0x188>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001574:	4b49      	ldr	r3, [pc, #292]	@ (800169c <MX_TIM8_Init+0x188>)
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b48      	ldr	r3, [pc, #288]	@ (800169c <MX_TIM8_Init+0x188>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001580:	4846      	ldr	r0, [pc, #280]	@ (800169c <MX_TIM8_Init+0x188>)
 8001582:	f004 fcd3 	bl	8005f2c <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800158c:	f000 feb6 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001590:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001594:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001596:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800159a:	4619      	mov	r1, r3
 800159c:	483f      	ldr	r0, [pc, #252]	@ (800169c <MX_TIM8_Init+0x188>)
 800159e:	f005 f93f 	bl	8006820 <HAL_TIM_ConfigClockSource>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80015a8:	f000 fea8 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80015ac:	483b      	ldr	r0, [pc, #236]	@ (800169c <MX_TIM8_Init+0x188>)
 80015ae:	f004 fd85 	bl	80060bc <HAL_TIM_PWM_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80015b8:	f000 fea0 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015cc:	4619      	mov	r1, r3
 80015ce:	4833      	ldr	r0, [pc, #204]	@ (800169c <MX_TIM8_Init+0x188>)
 80015d0:	f005 fedc 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015da:	f000 fe8f 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015de:	2360      	movs	r3, #96	@ 0x60
 80015e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	2300      	movs	r3, #0
 80015e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015ea:	2300      	movs	r3, #0
 80015ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015fe:	2200      	movs	r2, #0
 8001600:	4619      	mov	r1, r3
 8001602:	4826      	ldr	r0, [pc, #152]	@ (800169c <MX_TIM8_Init+0x188>)
 8001604:	f004 fff8 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800160e:	f000 fe75 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001612:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001616:	2204      	movs	r2, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4820      	ldr	r0, [pc, #128]	@ (800169c <MX_TIM8_Init+0x188>)
 800161c:	f004 ffec 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001626:	f000 fe69 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800162a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800162e:	2208      	movs	r2, #8
 8001630:	4619      	mov	r1, r3
 8001632:	481a      	ldr	r0, [pc, #104]	@ (800169c <MX_TIM8_Init+0x188>)
 8001634:	f004 ffe0 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800163e:	f000 fe5d 	bl	80022fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800166c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4807      	ldr	r0, [pc, #28]	@ (800169c <MX_TIM8_Init+0x188>)
 8001680:	f005 ff1a 	bl	80074b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 800168a:	f000 fe37 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800168e:	4803      	ldr	r0, [pc, #12]	@ (800169c <MX_TIM8_Init+0x188>)
 8001690:	f000 fffe 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001694:	bf00      	nop
 8001696:	3770      	adds	r7, #112	@ 0x70
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002c4 	.word	0x200002c4
 80016a0:	40013400 	.word	0x40013400

080016a4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b09c      	sub	sp, #112	@ 0x70
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
 80016d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2234      	movs	r2, #52	@ 0x34
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f008 f8e0 	bl	80098a4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80016e4:	4b3f      	ldr	r3, [pc, #252]	@ (80017e4 <MX_TIM15_Init+0x140>)
 80016e6:	4a40      	ldr	r2, [pc, #256]	@ (80017e8 <MX_TIM15_Init+0x144>)
 80016e8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1;
 80016ea:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <MX_TIM15_Init+0x140>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	4b3c      	ldr	r3, [pc, #240]	@ (80017e4 <MX_TIM15_Init+0x140>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80016f6:	4b3b      	ldr	r3, [pc, #236]	@ (80017e4 <MX_TIM15_Init+0x140>)
 80016f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fe:	4b39      	ldr	r3, [pc, #228]	@ (80017e4 <MX_TIM15_Init+0x140>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001704:	4b37      	ldr	r3, [pc, #220]	@ (80017e4 <MX_TIM15_Init+0x140>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b36      	ldr	r3, [pc, #216]	@ (80017e4 <MX_TIM15_Init+0x140>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001710:	4834      	ldr	r0, [pc, #208]	@ (80017e4 <MX_TIM15_Init+0x140>)
 8001712:	f004 fc0b 	bl	8005f2c <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800171c:	f000 fdee 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001724:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800172a:	4619      	mov	r1, r3
 800172c:	482d      	ldr	r0, [pc, #180]	@ (80017e4 <MX_TIM15_Init+0x140>)
 800172e:	f005 f877 	bl	8006820 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001738:	f000 fde0 	bl	80022fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800173c:	4829      	ldr	r0, [pc, #164]	@ (80017e4 <MX_TIM15_Init+0x140>)
 800173e:	f004 fcbd 	bl	80060bc <HAL_TIM_PWM_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001748:	f000 fdd8 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001754:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001758:	4619      	mov	r1, r3
 800175a:	4822      	ldr	r0, [pc, #136]	@ (80017e4 <MX_TIM15_Init+0x140>)
 800175c:	f005 fe16 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001766:	f000 fdc9 	bl	80022fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176a:	2360      	movs	r3, #96	@ 0x60
 800176c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001772:	2300      	movs	r3, #0
 8001774:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001776:	2300      	movs	r3, #0
 8001778:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001786:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800178a:	2200      	movs	r2, #0
 800178c:	4619      	mov	r1, r3
 800178e:	4815      	ldr	r0, [pc, #84]	@ (80017e4 <MX_TIM15_Init+0x140>)
 8001790:	f004 ff32 	bl	80065f8 <HAL_TIM_PWM_ConfigChannel>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800179a:	f000 fdaf 	bl	80022fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <MX_TIM15_Init+0x140>)
 80017c6:	f005 fe77 	bl	80074b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 80017d0:	f000 fd94 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80017d4:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <MX_TIM15_Init+0x140>)
 80017d6:	f000 ff5b 	bl	8002690 <HAL_TIM_MspPostInit>

}
 80017da:	bf00      	nop
 80017dc:	3770      	adds	r7, #112	@ 0x70
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000310 	.word	0x20000310
 80017e8:	40014000 	.word	0x40014000

080017ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017f2:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_DMA_Init+0x50>)
 80017f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f6:	4a11      	ldr	r2, [pc, #68]	@ (800183c <MX_DMA_Init+0x50>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80017fe:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_DMA_Init+0x50>)
 8001800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_DMA_Init+0x50>)
 800180c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800180e:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <MX_DMA_Init+0x50>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6493      	str	r3, [r2, #72]	@ 0x48
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_DMA_Init+0x50>)
 8001818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	200b      	movs	r0, #11
 8001828:	f002 fe1d 	bl	8004466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800182c:	200b      	movs	r0, #11
 800182e:	f002 fe34 	bl	800449a <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <MX_GPIO_Init+0xd8>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a2f      	ldr	r2, [pc, #188]	@ (8001918 <MX_GPIO_Init+0xd8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <MX_GPIO_Init+0xd8>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186e:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <MX_GPIO_Init+0xd8>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a29      	ldr	r2, [pc, #164]	@ (8001918 <MX_GPIO_Init+0xd8>)
 8001874:	f043 0320 	orr.w	r3, r3, #32
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <MX_GPIO_Init+0xd8>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0320 	and.w	r3, r3, #32
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <MX_GPIO_Init+0xd8>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <MX_GPIO_Init+0xd8>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <MX_GPIO_Init+0xd8>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <MX_GPIO_Init+0xd8>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <MX_GPIO_Init+0xd8>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <MX_GPIO_Init+0xd8>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c0:	f003 faba 	bl	8004e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4810      	ldr	r0, [pc, #64]	@ (800191c <MX_GPIO_Init+0xdc>)
 80018dc:	f003 f92a 	bl	8004b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80018e0:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80018e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fc:	f003 f91a 	bl	8004b34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2028      	movs	r0, #40	@ 0x28
 8001906:	f002 fdae 	bl	8004466 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800190a:	2028      	movs	r0, #40	@ 0x28
 800190c:	f002 fdc5 	bl	800449a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001910:	bf00      	nop
 8001912:	3728      	adds	r7, #40	@ 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	48000800 	.word	0x48000800

08001920 <ADC_Averaged>:

/* USER CODE BEGIN 4 */
void ADC_Averaged()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	for (int i = 0; i < 25; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	e017      	b.n	800195c <ADC_Averaged+0x3c>
	{
		ADC_SumAPot[0] += ADCBuffer[2*i];
 800192c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <ADC_Averaged+0x138>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	4949      	ldr	r1, [pc, #292]	@ (8001a5c <ADC_Averaged+0x13c>)
 8001936:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800193a:	4413      	add	r3, r2
 800193c:	4a46      	ldr	r2, [pc, #280]	@ (8001a58 <ADC_Averaged+0x138>)
 800193e:	6013      	str	r3, [r2, #0]
		ADC_SumAPot[1] += ADCBuffer[1+(2*i)];
 8001940:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <ADC_Averaged+0x138>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	0052      	lsls	r2, r2, #1
 8001948:	3201      	adds	r2, #1
 800194a:	4944      	ldr	r1, [pc, #272]	@ (8001a5c <ADC_Averaged+0x13c>)
 800194c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001950:	4413      	add	r3, r2
 8001952:	4a41      	ldr	r2, [pc, #260]	@ (8001a58 <ADC_Averaged+0x138>)
 8001954:	6053      	str	r3, [r2, #4]
	for (int i = 0; i < 25; i++)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3301      	adds	r3, #1
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b18      	cmp	r3, #24
 8001960:	dde4      	ble.n	800192c <ADC_Averaged+0xc>
	}

	for (int i = 0; i < 2; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	e015      	b.n	8001994 <ADC_Averaged+0x74>
	{
		ADC_Average[i] = ADC_SumAPot[i] / 25;
 8001968:	4a3b      	ldr	r2, [pc, #236]	@ (8001a58 <ADC_Averaged+0x138>)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	4a3b      	ldr	r2, [pc, #236]	@ (8001a60 <ADC_Averaged+0x140>)
 8001972:	fb82 1203 	smull	r1, r2, r2, r3
 8001976:	10d2      	asrs	r2, r2, #3
 8001978:	17db      	asrs	r3, r3, #31
 800197a:	1ad2      	subs	r2, r2, r3
 800197c:	4939      	ldr	r1, [pc, #228]	@ (8001a64 <ADC_Averaged+0x144>)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		ADC_SumAPot[i] = 0;
 8001984:	4a34      	ldr	r2, [pc, #208]	@ (8001a58 <ADC_Averaged+0x138>)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2100      	movs	r1, #0
 800198a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 2; i++)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	dde6      	ble.n	8001968 <ADC_Averaged+0x48>
	}

	Degrees_Position = (ADC_Average[0] * 360.00) / 4095.00;
 800199a:	4b32      	ldr	r3, [pc, #200]	@ (8001a64 <ADC_Averaged+0x144>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fd8c 	bl	80004bc <__aeabi_i2d>
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <ADC_Averaged+0x148>)
 80019aa:	f7fe fdf1 	bl	8000590 <__aeabi_dmul>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	a326      	add	r3, pc, #152	@ (adr r3, 8001a50 <ADC_Averaged+0x130>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe ff12 	bl	80007e4 <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f814 	bl	80009f4 <__aeabi_d2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a27      	ldr	r2, [pc, #156]	@ (8001a6c <ADC_Averaged+0x14c>)
 80019d0:	6013      	str	r3, [r2, #0]
	setposition = (ADC_Average[1] * 360.00) / 4095.00;
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <ADC_Averaged+0x144>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd70 	bl	80004bc <__aeabi_i2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <ADC_Averaged+0x148>)
 80019e2:	f7fe fdd5 	bl	8000590 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	a318      	add	r3, pc, #96	@ (adr r3, 8001a50 <ADC_Averaged+0x130>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fef6 	bl	80007e4 <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7fe fff8 	bl	80009f4 <__aeabi_d2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a1a      	ldr	r2, [pc, #104]	@ (8001a70 <ADC_Averaged+0x150>)
 8001a08:	6013      	str	r3, [r2, #0]
	setposition2 = (ADC_Average[1] * 360.00) / 4095.00;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	@ (8001a64 <ADC_Averaged+0x144>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd54 	bl	80004bc <__aeabi_i2d>
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <ADC_Averaged+0x148>)
 8001a1a:	f7fe fdb9 	bl	8000590 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	a30a      	add	r3, pc, #40	@ (adr r3, 8001a50 <ADC_Averaged+0x130>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe feda 	bl	80007e4 <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7fe ffdc 	bl	80009f4 <__aeabi_d2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <ADC_Averaged+0x154>)
 8001a40:	6013      	str	r3, [r2, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40affe00 	.word	0x40affe00
 8001a58:	200003dc 	.word	0x200003dc
 8001a5c:	20000370 	.word	0x20000370
 8001a60:	51eb851f 	.word	0x51eb851f
 8001a64:	200003d4 	.word	0x200003d4
 8001a68:	40768000 	.word	0x40768000
 8001a6c:	200003e4 	.word	0x200003e4
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <MotorControl>:
//	setposition = (ADC_Average2 * 360.00) / 4095.00;
//	setposition2 = (ADC_Average2 * 360.00) / 4095.00;
//}

void MotorControl()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001a7e:	4b94      	ldr	r3, [pc, #592]	@ (8001cd0 <MotorControl+0x258>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2200      	movs	r2, #0
 8001a84:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001a86:	4b92      	ldr	r3, [pc, #584]	@ (8001cd0 <MotorControl+0x258>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

	ADC_Averaged();
 8001a8e:	f7ff ff47 	bl	8001920 <ADC_Averaged>

	Vfeedback = arm_pid_f32(&PID, setposition - Degrees_Position);
 8001a92:	4b90      	ldr	r3, [pc, #576]	@ (8001cd4 <MotorControl+0x25c>)
 8001a94:	ed93 7a00 	vldr	s14, [r3]
 8001a98:	4b8f      	ldr	r3, [pc, #572]	@ (8001cd8 <MotorControl+0x260>)
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa2:	4b8e      	ldr	r3, [pc, #568]	@ (8001cdc <MotorControl+0x264>)
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	ed93 7a00 	vldr	s14, [r3]
 8001ab0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	edd3 6a01 	vldr	s13, [r3, #4]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aea:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a76      	ldr	r2, [pc, #472]	@ (8001ce0 <MotorControl+0x268>)
 8001b06:	6013      	str	r3, [r2, #0]

	if (Vfeedback >= 0)
 8001b08:	4b75      	ldr	r3, [pc, #468]	@ (8001ce0 <MotorControl+0x268>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	db69      	blt.n	8001bec <MotorControl+0x174>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b22:	f003 f989 	bl	8004e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001b26:	2201      	movs	r2, #1
 8001b28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b30:	f003 f982 	bl	8004e38 <HAL_GPIO_WritePin>
		DutyCycle = ((Vfeedback * 83999.00) / 20.00) + 100;
 8001b34:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce0 <MotorControl+0x268>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fcd1 	bl	80004e0 <__aeabi_f2d>
 8001b3e:	a362      	add	r3, pc, #392	@ (adr r3, 8001cc8 <MotorControl+0x250>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fd24 	bl	8000590 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b63      	ldr	r3, [pc, #396]	@ (8001ce4 <MotorControl+0x26c>)
 8001b56:	f7fe fe45 	bl	80007e4 <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	4b60      	ldr	r3, [pc, #384]	@ (8001ce8 <MotorControl+0x270>)
 8001b68:	f7fe fb5c 	bl	8000224 <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe ff3e 	bl	80009f4 <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cec <MotorControl+0x274>)
 8001b7c:	6013      	str	r3, [r2, #0]
		if (DutyCycle > 84999) DutyCycle = 84999;
 8001b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cec <MotorControl+0x274>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001cf0 <MotorControl+0x278>
 8001b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	dd03      	ble.n	8001b9a <MotorControl+0x122>
 8001b92:	4b56      	ldr	r3, [pc, #344]	@ (8001cec <MotorControl+0x274>)
 8001b94:	4a57      	ldr	r2, [pc, #348]	@ (8001cf4 <MotorControl+0x27c>)
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e01b      	b.n	8001bd2 <MotorControl+0x15a>
		else if (DutyCycle < 17000) DutyCycle = 0;
 8001b9a:	4b54      	ldr	r3, [pc, #336]	@ (8001cec <MotorControl+0x274>)
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001cf8 <MotorControl+0x280>
 8001ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bac:	d504      	bpl.n	8001bb8 <MotorControl+0x140>
 8001bae:	4b4f      	ldr	r3, [pc, #316]	@ (8001cec <MotorControl+0x274>)
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	e00c      	b.n	8001bd2 <MotorControl+0x15a>
		else if (DutyCycle < 18000) DutyCycle = 18000;
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8001cec <MotorControl+0x274>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001cfc <MotorControl+0x284>
 8001bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	d502      	bpl.n	8001bd2 <MotorControl+0x15a>
 8001bcc:	4b47      	ldr	r3, [pc, #284]	@ (8001cec <MotorControl+0x274>)
 8001bce:	4a4c      	ldr	r2, [pc, #304]	@ (8001d00 <MotorControl+0x288>)
 8001bd0:	601a      	str	r2, [r3, #0]
//		else if (DutyCycle < 1800) DutyCycle = 0;
////		else if (DutyCycle < 1700) DutyCycle = 1800;
//		else if (DutyCycle < 2300) DutyCycle = 2600;

//		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fabs(DutyCycle));
 8001bd2:	4b46      	ldr	r3, [pc, #280]	@ (8001cec <MotorControl+0x274>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bdc:	4b49      	ldr	r3, [pc, #292]	@ (8001d04 <MotorControl+0x28c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be4:	ee17 2a90 	vmov	r2, s15
 8001be8:	635a      	str	r2, [r3, #52]	@ 0x34
//		else if (DutyCycle > -2300) DutyCycle = -2600;

//		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fabs(DutyCycle));
	}
}
 8001bea:	e068      	b.n	8001cbe <MotorControl+0x246>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf6:	f003 f91f 	bl	8004e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c04:	f003 f918 	bl	8004e38 <HAL_GPIO_WritePin>
		DutyCycle = ((Vfeedback * 83999.00) / 20.00) - 100;
 8001c08:	4b35      	ldr	r3, [pc, #212]	@ (8001ce0 <MotorControl+0x268>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc67 	bl	80004e0 <__aeabi_f2d>
 8001c12:	a32d      	add	r3, pc, #180	@ (adr r3, 8001cc8 <MotorControl+0x250>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fcba 	bl	8000590 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce4 <MotorControl+0x26c>)
 8001c2a:	f7fe fddb 	bl	80007e4 <__aeabi_ddiv>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce8 <MotorControl+0x270>)
 8001c3c:	f7fe faf0 	bl	8000220 <__aeabi_dsub>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe fed4 	bl	80009f4 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a27      	ldr	r2, [pc, #156]	@ (8001cec <MotorControl+0x274>)
 8001c50:	6013      	str	r3, [r2, #0]
		if (DutyCycle < -84999) DutyCycle = -84999;
 8001c52:	4b26      	ldr	r3, [pc, #152]	@ (8001cec <MotorControl+0x274>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001d08 <MotorControl+0x290>
 8001c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	d503      	bpl.n	8001c6e <MotorControl+0x1f6>
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <MotorControl+0x274>)
 8001c68:	4a28      	ldr	r2, [pc, #160]	@ (8001d0c <MotorControl+0x294>)
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	e01b      	b.n	8001ca6 <MotorControl+0x22e>
		else if (DutyCycle > -17000) DutyCycle = 0;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MotorControl+0x274>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001d10 <MotorControl+0x298>
 8001c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	dd04      	ble.n	8001c8c <MotorControl+0x214>
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <MotorControl+0x274>)
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00c      	b.n	8001ca6 <MotorControl+0x22e>
		else if (DutyCycle > -18000) DutyCycle = -18000;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <MotorControl+0x274>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001d14 <MotorControl+0x29c>
 8001c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9e:	dd02      	ble.n	8001ca6 <MotorControl+0x22e>
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <MotorControl+0x274>)
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d18 <MotorControl+0x2a0>)
 8001ca4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fabs(DutyCycle));
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MotorControl+0x274>)
 8001ca8:	edd3 7a00 	vldr	s15, [r3]
 8001cac:	eef0 7ae7 	vabs.f32	s15, s15
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <MotorControl+0x28c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cb8:	ee17 2a90 	vmov	r2, s15
 8001cbc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	40f481f0 	.word	0x40f481f0
 8001cd0:	200002c4 	.word	0x200002c4
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	200003e4 	.word	0x200003e4
 8001cdc:	200003f4 	.word	0x200003f4
 8001ce0:	2000043c 	.word	0x2000043c
 8001ce4:	40340000 	.word	0x40340000
 8001ce8:	40590000 	.word	0x40590000
 8001cec:	200003e8 	.word	0x200003e8
 8001cf0:	47a60380 	.word	0x47a60380
 8001cf4:	47a60380 	.word	0x47a60380
 8001cf8:	4684d000 	.word	0x4684d000
 8001cfc:	468ca000 	.word	0x468ca000
 8001d00:	468ca000 	.word	0x468ca000
 8001d04:	20000194 	.word	0x20000194
 8001d08:	c7a60380 	.word	0xc7a60380
 8001d0c:	c7a60380 	.word	0xc7a60380
 8001d10:	c684d000 	.word	0xc684d000
 8001d14:	c68ca000 	.word	0xc68ca000
 8001d18:	c68ca000 	.word	0xc68ca000
 8001d1c:	00000000 	.word	0x00000000

08001d20 <MotorControl2>:

void MotorControl2()
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8001d26:	4ba4      	ldr	r3, [pc, #656]	@ (8001fb8 <MotorControl2+0x298>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001d2e:	4ba3      	ldr	r3, [pc, #652]	@ (8001fbc <MotorControl2+0x29c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	635a      	str	r2, [r3, #52]	@ 0x34

	ADC_Averaged();
 8001d36:	f7ff fdf3 	bl	8001920 <ADC_Averaged>

	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8001d3a:	4ba1      	ldr	r3, [pc, #644]	@ (8001fc0 <MotorControl2+0x2a0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	4aa0      	ldr	r2, [pc, #640]	@ (8001fc4 <MotorControl2+0x2a4>)
 8001d42:	6013      	str	r3, [r2, #0]
	Degrees_Position2 = (QEIReadRaw * 360.00) / 3072.00;
 8001d44:	4b9f      	ldr	r3, [pc, #636]	@ (8001fc4 <MotorControl2+0x2a4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fba7 	bl	800049c <__aeabi_ui2d>
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b9d      	ldr	r3, [pc, #628]	@ (8001fc8 <MotorControl2+0x2a8>)
 8001d54:	f7fe fc1c 	bl	8000590 <__aeabi_dmul>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b99      	ldr	r3, [pc, #612]	@ (8001fcc <MotorControl2+0x2ac>)
 8001d66:	f7fe fd3d 	bl	80007e4 <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7fe fe3f 	bl	80009f4 <__aeabi_d2f>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a95      	ldr	r2, [pc, #596]	@ (8001fd0 <MotorControl2+0x2b0>)
 8001d7a:	6013      	str	r3, [r2, #0]

	Vfeedback2 = arm_pid_f32(&PID2, setposition2 - Degrees_Position2);
 8001d7c:	4b95      	ldr	r3, [pc, #596]	@ (8001fd4 <MotorControl2+0x2b4>)
 8001d7e:	ed93 7a00 	vldr	s14, [r3]
 8001d82:	4b93      	ldr	r3, [pc, #588]	@ (8001fd0 <MotorControl2+0x2b0>)
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8c:	4b92      	ldr	r3, [pc, #584]	@ (8001fd8 <MotorControl2+0x2b8>)
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	ed93 7a00 	vldr	s14, [r3]
 8001d9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	edd3 6a01 	vldr	s13, [r3, #4]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001db2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd4:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	615a      	str	r2, [r3, #20]
    return (out);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a7b      	ldr	r2, [pc, #492]	@ (8001fdc <MotorControl2+0x2bc>)
 8001df0:	6013      	str	r3, [r2, #0]

	if (Vfeedback2 > 1500) Vfeedback2 = 1500;
 8001df2:	4b7a      	ldr	r3, [pc, #488]	@ (8001fdc <MotorControl2+0x2bc>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001fe0 <MotorControl2+0x2c0>
 8001dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	dd03      	ble.n	8001e0e <MotorControl2+0xee>
 8001e06:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <MotorControl2+0x2bc>)
 8001e08:	4a76      	ldr	r2, [pc, #472]	@ (8001fe4 <MotorControl2+0x2c4>)
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	e00c      	b.n	8001e28 <MotorControl2+0x108>
	else if (Vfeedback2 < -1500) Vfeedback2 = -1500;
 8001e0e:	4b73      	ldr	r3, [pc, #460]	@ (8001fdc <MotorControl2+0x2bc>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001fe8 <MotorControl2+0x2c8>
 8001e18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e20:	d502      	bpl.n	8001e28 <MotorControl2+0x108>
 8001e22:	4b6e      	ldr	r3, [pc, #440]	@ (8001fdc <MotorControl2+0x2bc>)
 8001e24:	4a71      	ldr	r2, [pc, #452]	@ (8001fec <MotorControl2+0x2cc>)
 8001e26:	601a      	str	r2, [r3, #0]


	if (Vfeedback2 >= 0)
 8001e28:	4b6c      	ldr	r3, [pc, #432]	@ (8001fdc <MotorControl2+0x2bc>)
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	db5e      	blt.n	8001ef6 <MotorControl2+0x1d6>
	{
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001e38:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb8 <MotorControl2+0x298>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e4a:	f002 fff5 	bl	8004e38 <HAL_GPIO_WritePin>
		DutyCycle2 = ((Vfeedback2 * 4799.00) / 20.00) + 200;
 8001e4e:	4b63      	ldr	r3, [pc, #396]	@ (8001fdc <MotorControl2+0x2bc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb44 	bl	80004e0 <__aeabi_f2d>
 8001e58:	a355      	add	r3, pc, #340	@ (adr r3, 8001fb0 <MotorControl2+0x290>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fb97 	bl	8000590 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b60      	ldr	r3, [pc, #384]	@ (8001ff0 <MotorControl2+0x2d0>)
 8001e70:	f7fe fcb8 	bl	80007e4 <__aeabi_ddiv>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff4 <MotorControl2+0x2d4>)
 8001e82:	f7fe f9cf 	bl	8000224 <__adddf3>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fdb1 	bl	80009f4 <__aeabi_d2f>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a58      	ldr	r2, [pc, #352]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001e96:	6013      	str	r3, [r2, #0]
		if (DutyCycle2 > 4999) DutyCycle2 = 4999;
 8001e98:	4b57      	ldr	r3, [pc, #348]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001ffc <MotorControl2+0x2dc>
 8001ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eaa:	dd02      	ble.n	8001eb2 <MotorControl2+0x192>
 8001eac:	4b52      	ldr	r3, [pc, #328]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001eae:	4a54      	ldr	r2, [pc, #336]	@ (8002000 <MotorControl2+0x2e0>)
 8001eb0:	601a      	str	r2, [r3, #0]

		if (fabs(setposition2 - Degrees_Position2) <= 1.5) DutyCycle2 = 0;
 8001eb2:	4b48      	ldr	r3, [pc, #288]	@ (8001fd4 <MotorControl2+0x2b4>)
 8001eb4:	ed93 7a00 	vldr	s14, [r3]
 8001eb8:	4b45      	ldr	r3, [pc, #276]	@ (8001fd0 <MotorControl2+0x2b0>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ec6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	d803      	bhi.n	8001edc <MotorControl2+0x1bc>
 8001ed4:	4b48      	ldr	r3, [pc, #288]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, fabs(DutyCycle2));
 8001edc:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ee6:	4b34      	ldr	r3, [pc, #208]	@ (8001fb8 <MotorControl2+0x298>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eee:	ee17 2a90 	vmov	r2, s15
 8001ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (fabs(setposition2 - Degrees_Position2) <= 1.5) DutyCycle2 = 0;

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, fabs(DutyCycle2));
	}
}
 8001ef4:	e056      	b.n	8001fa4 <MotorControl2+0x284>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001ef6:	4b30      	ldr	r3, [pc, #192]	@ (8001fb8 <MotorControl2+0x298>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	63da      	str	r2, [r3, #60]	@ 0x3c
		DutyCycle2 = ((Vfeedback2 * 4799.00) / 20.00) - 200;
 8001efe:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <MotorControl2+0x2bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe faec 	bl	80004e0 <__aeabi_f2d>
 8001f08:	a329      	add	r3, pc, #164	@ (adr r3, 8001fb0 <MotorControl2+0x290>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb3f 	bl	8000590 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ff0 <MotorControl2+0x2d0>)
 8001f20:	f7fe fc60 	bl	80007e4 <__aeabi_ddiv>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <MotorControl2+0x2d4>)
 8001f32:	f7fe f975 	bl	8000220 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fd59 	bl	80009f4 <__aeabi_d2f>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001f46:	6013      	str	r3, [r2, #0]
		if (DutyCycle2 < -4999) DutyCycle2 = -4999;
 8001f48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002004 <MotorControl2+0x2e4>
 8001f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5a:	d502      	bpl.n	8001f62 <MotorControl2+0x242>
 8001f5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002008 <MotorControl2+0x2e8>)
 8001f60:	601a      	str	r2, [r3, #0]
		if (fabs(setposition2 - Degrees_Position2) <= 1.5) DutyCycle2 = 0;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <MotorControl2+0x2b4>)
 8001f64:	ed93 7a00 	vldr	s14, [r3]
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <MotorControl2+0x2b0>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f72:	eef0 7ae7 	vabs.f32	s15, s15
 8001f76:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	d803      	bhi.n	8001f8c <MotorControl2+0x26c>
 8001f84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, fabs(DutyCycle2));
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <MotorControl2+0x2d8>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	eef0 7ae7 	vabs.f32	s15, s15
 8001f96:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <MotorControl2+0x298>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9e:	ee17 2a90 	vmov	r2, s15
 8001fa2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	f3af 8000 	nop.w
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	40b2bf00 	.word	0x40b2bf00
 8001fb8:	200002c4 	.word	0x200002c4
 8001fbc:	20000194 	.word	0x20000194
 8001fc0:	2000022c 	.word	0x2000022c
 8001fc4:	20000444 	.word	0x20000444
 8001fc8:	40768000 	.word	0x40768000
 8001fcc:	40a80000 	.word	0x40a80000
 8001fd0:	200003ec 	.word	0x200003ec
 8001fd4:	20000004 	.word	0x20000004
 8001fd8:	20000418 	.word	0x20000418
 8001fdc:	20000440 	.word	0x20000440
 8001fe0:	44bb8000 	.word	0x44bb8000
 8001fe4:	44bb8000 	.word	0x44bb8000
 8001fe8:	c4bb8000 	.word	0xc4bb8000
 8001fec:	c4bb8000 	.word	0xc4bb8000
 8001ff0:	40340000 	.word	0x40340000
 8001ff4:	40690000 	.word	0x40690000
 8001ff8:	200003f0 	.word	0x200003f0
 8001ffc:	459c3800 	.word	0x459c3800
 8002000:	459c3800 	.word	0x459c3800
 8002004:	c59c3800 	.word	0xc59c3800
 8002008:	c59c3800 	.word	0xc59c3800
 800200c:	00000000 	.word	0x00000000

08002010 <MotorControl3>:

void MotorControl3()
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8002014:	4b76      	ldr	r3, [pc, #472]	@ (80021f0 <MotorControl3+0x1e0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 800201c:	4b74      	ldr	r3, [pc, #464]	@ (80021f0 <MotorControl3+0x1e0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	63da      	str	r2, [r3, #60]	@ 0x3c

	ADC_Averaged();
 8002024:	f7ff fc7c 	bl	8001920 <ADC_Averaged>

	if (PWMDrive >= 0)
 8002028:	4b72      	ldr	r3, [pc, #456]	@ (80021f4 <MotorControl3+0x1e4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db69      	blt.n	8002104 <MotorControl3+0xf4>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800203a:	f002 fefd 	bl	8004e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002048:	f002 fef6 	bl	8004e38 <HAL_GPIO_WritePin>
//		DutyCycle = ((PWMDrive * 84999.00) / 2500.00) + 100;
//		if (DutyCycle > 84999) DutyCycle = 84999;
//		else if (DutyCycle < 17000) DutyCycle = 0;
//		else if (DutyCycle < 18000) DutyCycle = 18000;
		DutyCycle = ((PWMDrive * 83999.00) / 227.00) + 100;
 800204c:	4b69      	ldr	r3, [pc, #420]	@ (80021f4 <MotorControl3+0x1e4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa33 	bl	80004bc <__aeabi_i2d>
 8002056:	a362      	add	r3, pc, #392	@ (adr r3, 80021e0 <MotorControl3+0x1d0>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe fa98 	bl	8000590 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	a35f      	add	r3, pc, #380	@ (adr r3, 80021e8 <MotorControl3+0x1d8>)
 800206a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206e:	f7fe fbb9 	bl	80007e4 <__aeabi_ddiv>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b5e      	ldr	r3, [pc, #376]	@ (80021f8 <MotorControl3+0x1e8>)
 8002080:	f7fe f8d0 	bl	8000224 <__adddf3>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f7fe fcb2 	bl	80009f4 <__aeabi_d2f>
 8002090:	4603      	mov	r3, r0
 8002092:	4a5a      	ldr	r2, [pc, #360]	@ (80021fc <MotorControl3+0x1ec>)
 8002094:	6013      	str	r3, [r2, #0]
		if (DutyCycle > 84999) DutyCycle = 84999;
 8002096:	4b59      	ldr	r3, [pc, #356]	@ (80021fc <MotorControl3+0x1ec>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8002200 <MotorControl3+0x1f0>
 80020a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a8:	dd03      	ble.n	80020b2 <MotorControl3+0xa2>
 80020aa:	4b54      	ldr	r3, [pc, #336]	@ (80021fc <MotorControl3+0x1ec>)
 80020ac:	4a55      	ldr	r2, [pc, #340]	@ (8002204 <MotorControl3+0x1f4>)
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e01b      	b.n	80020ea <MotorControl3+0xda>
		else if (DutyCycle < 17000) DutyCycle = 0;
 80020b2:	4b52      	ldr	r3, [pc, #328]	@ (80021fc <MotorControl3+0x1ec>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002208 <MotorControl3+0x1f8>
 80020bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	d504      	bpl.n	80020d0 <MotorControl3+0xc0>
 80020c6:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <MotorControl3+0x1ec>)
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e00c      	b.n	80020ea <MotorControl3+0xda>
		else if (DutyCycle < 18000) DutyCycle = 18000;
 80020d0:	4b4a      	ldr	r3, [pc, #296]	@ (80021fc <MotorControl3+0x1ec>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800220c <MotorControl3+0x1fc>
 80020da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e2:	d502      	bpl.n	80020ea <MotorControl3+0xda>
 80020e4:	4b45      	ldr	r3, [pc, #276]	@ (80021fc <MotorControl3+0x1ec>)
 80020e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002210 <MotorControl3+0x200>)
 80020e8:	601a      	str	r2, [r3, #0]
		//
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fabs(DutyCycle));
 80020ea:	4b44      	ldr	r3, [pc, #272]	@ (80021fc <MotorControl3+0x1ec>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	eef0 7ae7 	vabs.f32	s15, s15
 80020f4:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <MotorControl3+0x204>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fc:	ee17 2a90 	vmov	r2, s15
 8002100:	635a      	str	r2, [r3, #52]	@ 0x34
//		else if (DutyCycle > -1800) DutyCycle = 0;
//		else if (DutyCycle > -2300) DutyCycle = -2300;
//		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fabs(DutyCycle));
	}
}
 8002102:	e068      	b.n	80021d6 <MotorControl3+0x1c6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8002104:	2201      	movs	r2, #1
 8002106:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800210a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800210e:	f002 fe93 	bl	8004e38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211c:	f002 fe8c 	bl	8004e38 <HAL_GPIO_WritePin>
		DutyCycle = ((PWMDrive * 83999.00) / 227.00) - 100;
 8002120:	4b34      	ldr	r3, [pc, #208]	@ (80021f4 <MotorControl3+0x1e4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f9c9 	bl	80004bc <__aeabi_i2d>
 800212a:	a32d      	add	r3, pc, #180	@ (adr r3, 80021e0 <MotorControl3+0x1d0>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fa2e 	bl	8000590 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	a32a      	add	r3, pc, #168	@ (adr r3, 80021e8 <MotorControl3+0x1d8>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f7fe fb4f 	bl	80007e4 <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	4b29      	ldr	r3, [pc, #164]	@ (80021f8 <MotorControl3+0x1e8>)
 8002154:	f7fe f864 	bl	8000220 <__aeabi_dsub>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f7fe fc48 	bl	80009f4 <__aeabi_d2f>
 8002164:	4603      	mov	r3, r0
 8002166:	4a25      	ldr	r2, [pc, #148]	@ (80021fc <MotorControl3+0x1ec>)
 8002168:	6013      	str	r3, [r2, #0]
		if (DutyCycle < -84999) DutyCycle = -84999;
 800216a:	4b24      	ldr	r3, [pc, #144]	@ (80021fc <MotorControl3+0x1ec>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002218 <MotorControl3+0x208>
 8002174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217c:	d503      	bpl.n	8002186 <MotorControl3+0x176>
 800217e:	4b1f      	ldr	r3, [pc, #124]	@ (80021fc <MotorControl3+0x1ec>)
 8002180:	4a26      	ldr	r2, [pc, #152]	@ (800221c <MotorControl3+0x20c>)
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e01b      	b.n	80021be <MotorControl3+0x1ae>
		else if (DutyCycle > -17000) DutyCycle = 0;
 8002186:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <MotorControl3+0x1ec>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002220 <MotorControl3+0x210>
 8002190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	dd04      	ble.n	80021a4 <MotorControl3+0x194>
 800219a:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <MotorControl3+0x1ec>)
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e00c      	b.n	80021be <MotorControl3+0x1ae>
		else if (DutyCycle > -18000) DutyCycle = -18000;
 80021a4:	4b15      	ldr	r3, [pc, #84]	@ (80021fc <MotorControl3+0x1ec>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002224 <MotorControl3+0x214>
 80021ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b6:	dd02      	ble.n	80021be <MotorControl3+0x1ae>
 80021b8:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <MotorControl3+0x1ec>)
 80021ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002228 <MotorControl3+0x218>)
 80021bc:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, fabs(DutyCycle));
 80021be:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <MotorControl3+0x1ec>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	eef0 7ae7 	vabs.f32	s15, s15
 80021c8:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <MotorControl3+0x204>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021d0:	ee17 2a90 	vmov	r2, s15
 80021d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w
 80021e0:	00000000 	.word	0x00000000
 80021e4:	40f481f0 	.word	0x40f481f0
 80021e8:	00000000 	.word	0x00000000
 80021ec:	406c6000 	.word	0x406c6000
 80021f0:	200002c4 	.word	0x200002c4
 80021f4:	20000450 	.word	0x20000450
 80021f8:	40590000 	.word	0x40590000
 80021fc:	200003e8 	.word	0x200003e8
 8002200:	47a60380 	.word	0x47a60380
 8002204:	47a60380 	.word	0x47a60380
 8002208:	4684d000 	.word	0x4684d000
 800220c:	468ca000 	.word	0x468ca000
 8002210:	468ca000 	.word	0x468ca000
 8002214:	20000194 	.word	0x20000194
 8002218:	c7a60380 	.word	0xc7a60380
 800221c:	c7a60380 	.word	0xc7a60380
 8002220:	c684d000 	.word	0xc684d000
 8002224:	c68ca000 	.word	0xc68ca000
 8002228:	c68ca000 	.word	0xc68ca000

0800222c <micros>:
		_micros += UINT32_MAX;
	}
}

uint64_t micros()
{
 800222c:	b4b0      	push	{r4, r5, r7}
 800222e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <micros+0x2c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2200      	movs	r2, #0
 8002238:	4618      	mov	r0, r3
 800223a:	4611      	mov	r1, r2
 800223c:	4b07      	ldr	r3, [pc, #28]	@ (800225c <micros+0x30>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	1884      	adds	r4, r0, r2
 8002244:	eb41 0503 	adc.w	r5, r1, r3
 8002248:	4622      	mov	r2, r4
 800224a:	462b      	mov	r3, r5
}
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	bcb0      	pop	{r4, r5, r7}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000278 	.word	0x20000278
 800225c:	20000458 	.word	0x20000458

08002260 <UARTInterruptConfig>:
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
	QEIdata.TimeStamp[OLD]= QEIdata.TimeStamp[NEW];
}

void UARTInterruptConfig()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Rx,4);
 8002264:	2204      	movs	r2, #4
 8002266:	4903      	ldr	r1, [pc, #12]	@ (8002274 <UARTInterruptConfig+0x14>)
 8002268:	4803      	ldr	r0, [pc, #12]	@ (8002278 <UARTInterruptConfig+0x18>)
 800226a:	f005 fa97 	bl	800779c <HAL_UART_Receive_IT>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000448 	.word	0x20000448
 8002278:	20000100 	.word	0x20000100

0800227c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <HAL_UART_RxCpltCallback+0x28>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d107      	bne.n	800229c <HAL_UART_RxCpltCallback+0x20>
	{
		Rx[4] = '\0';
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_UART_RxCpltCallback+0x2c>)
 800228e:	2200      	movs	r2, #0
 8002290:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, Rx, 4);
 8002292:	2204      	movs	r2, #4
 8002294:	4904      	ldr	r1, [pc, #16]	@ (80022a8 <HAL_UART_RxCpltCallback+0x2c>)
 8002296:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <HAL_UART_RxCpltCallback+0x28>)
 8002298:	f005 fa80 	bl	800779c <HAL_UART_Receive_IT>
	}
}
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000100 	.word	0x20000100
 80022a8:	20000448 	.word	0x20000448

080022ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022bc:	d116      	bne.n	80022ec <HAL_GPIO_EXTI_Callback+0x40>
	{
		switch (state)
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d00e      	beq.n	80022e4 <HAL_GPIO_EXTI_Callback+0x38>
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	dc10      	bgt.n	80022ec <HAL_GPIO_EXTI_Callback+0x40>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_GPIO_EXTI_Callback+0x28>
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d004      	beq.n	80022dc <HAL_GPIO_EXTI_Callback+0x30>
		case 2:
			state = 0;
			break;
		}
	}
}
 80022d2:	e00b      	b.n	80022ec <HAL_GPIO_EXTI_Callback+0x40>
			state = 1;
 80022d4:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
			break;
 80022da:	e007      	b.n	80022ec <HAL_GPIO_EXTI_Callback+0x40>
			state = 2;
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80022de:	2202      	movs	r2, #2
 80022e0:	701a      	strb	r2, [r3, #0]
			break;
 80022e2:	e003      	b.n	80022ec <HAL_GPIO_EXTI_Callback+0x40>
			state = 0;
 80022e4:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
			break;
 80022ea:	bf00      	nop
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	2000035c 	.word	0x2000035c

080022fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <Error_Handler+0x8>

08002308 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_MspInit+0x44>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002312:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_MspInit+0x44>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6613      	str	r3, [r2, #96]	@ 0x60
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <HAL_MspInit+0x44>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_MspInit+0x44>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_MspInit+0x44>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_MspInit+0x44>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800233e:	f002 fe69 	bl	8005014 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b09e      	sub	sp, #120	@ 0x78
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	2254      	movs	r2, #84	@ 0x54
 800236e:	2100      	movs	r1, #0
 8002370:	4618      	mov	r0, r3
 8002372:	f007 fa97 	bl	80098a4 <memset>
  if(hadc->Instance==ADC1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800237e:	d15f      	bne.n	8002440 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002380:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002384:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002386:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800238a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f003 fb7d 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800239c:	f7ff ffae 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80023a0:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <HAL_ADC_MspInit+0xf8>)
 80023a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a4:	4a28      	ldr	r2, [pc, #160]	@ (8002448 <HAL_ADC_MspInit+0xf8>)
 80023a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80023aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ac:	4b26      	ldr	r3, [pc, #152]	@ (8002448 <HAL_ADC_MspInit+0xf8>)
 80023ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4b23      	ldr	r3, [pc, #140]	@ (8002448 <HAL_ADC_MspInit+0xf8>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023bc:	4a22      	ldr	r2, [pc, #136]	@ (8002448 <HAL_ADC_MspInit+0xf8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c4:	4b20      	ldr	r3, [pc, #128]	@ (8002448 <HAL_ADC_MspInit+0xf8>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023d0:	2303      	movs	r3, #3
 80023d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023d4:	2303      	movs	r3, #3
 80023d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023e0:	4619      	mov	r1, r3
 80023e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e6:	f002 fba5 	bl	8004b34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023ea:	4b18      	ldr	r3, [pc, #96]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 80023ec:	4a18      	ldr	r2, [pc, #96]	@ (8002450 <HAL_ADC_MspInit+0x100>)
 80023ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 80023f2:	2205      	movs	r2, #5
 80023f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002402:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 8002404:	2280      	movs	r2, #128	@ 0x80
 8002406:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002408:	4b10      	ldr	r3, [pc, #64]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 800240a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800240e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002410:	4b0e      	ldr	r3, [pc, #56]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 8002412:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002416:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 800241a:	2220      	movs	r2, #32
 800241c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800241e:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 8002420:	2200      	movs	r2, #0
 8002422:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002424:	4809      	ldr	r0, [pc, #36]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 8002426:	f002 f853 	bl	80044d0 <HAL_DMA_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002430:	f7ff ff64 	bl	80022fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 8002438:	655a      	str	r2, [r3, #84]	@ 0x54
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <HAL_ADC_MspInit+0xfc>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002440:	bf00      	nop
 8002442:	3778      	adds	r7, #120	@ 0x78
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	200000a0 	.word	0x200000a0
 8002450:	40020008 	.word	0x40020008

08002454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b09e      	sub	sp, #120	@ 0x78
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	2254      	movs	r2, #84	@ 0x54
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f007 fa15 	bl	80098a4 <memset>
  if(huart->Instance==LPUART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a23      	ldr	r2, [pc, #140]	@ (800250c <HAL_UART_MspInit+0xb8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d13e      	bne.n	8002502 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002484:	2320      	movs	r3, #32
 8002486:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002488:	2300      	movs	r3, #0
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fafd 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800249c:	f7ff ff2e 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002510 <HAL_UART_MspInit+0xbc>)
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002510 <HAL_UART_MspInit+0xbc>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80024ac:	4b18      	ldr	r3, [pc, #96]	@ (8002510 <HAL_UART_MspInit+0xbc>)
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b8:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <HAL_UART_MspInit+0xbc>)
 80024ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024bc:	4a14      	ldr	r2, [pc, #80]	@ (8002510 <HAL_UART_MspInit+0xbc>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c4:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_UART_MspInit+0xbc>)
 80024c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80024d0:	230c      	movs	r3, #12
 80024d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80024e0:	230c      	movs	r3, #12
 80024e2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ee:	f002 fb21 	bl	8004b34 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	205b      	movs	r0, #91	@ 0x5b
 80024f8:	f001 ffb5 	bl	8004466 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80024fc:	205b      	movs	r0, #91	@ 0x5b
 80024fe:	f001 ffcc 	bl	800449a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002502:	bf00      	nop
 8002504:	3778      	adds	r7, #120	@ 0x78
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40008000 	.word	0x40008000
 8002510:	40021000 	.word	0x40021000

08002514 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002524:	d10b      	bne.n	800253e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <HAL_TIM_PWM_MspInit+0x38>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	4a08      	ldr	r2, [pc, #32]	@ (800254c <HAL_TIM_PWM_MspInit+0x38>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_TIM_PWM_MspInit+0x38>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a25      	ldr	r2, [pc, #148]	@ (80025f4 <HAL_TIM_Base_MspInit+0xa4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10c      	bne.n	800257c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002562:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002566:	4a24      	ldr	r2, [pc, #144]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6593      	str	r3, [r2, #88]	@ 0x58
 800256e:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800257a:	e034      	b.n	80025e6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1e      	ldr	r2, [pc, #120]	@ (80025fc <HAL_TIM_Base_MspInit+0xac>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10c      	bne.n	80025a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002586:	4b1c      	ldr	r3, [pc, #112]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258a:	4a1b      	ldr	r2, [pc, #108]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 800258c:	f043 0308 	orr.w	r3, r3, #8
 8002590:	6593      	str	r3, [r2, #88]	@ 0x58
 8002592:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
}
 800259e:	e022      	b.n	80025e6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a16      	ldr	r2, [pc, #88]	@ (8002600 <HAL_TIM_Base_MspInit+0xb0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10c      	bne.n	80025c4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025aa:	4b13      	ldr	r3, [pc, #76]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 80025ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ae:	4a12      	ldr	r2, [pc, #72]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 80025b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 80025b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
}
 80025c2:	e010      	b.n	80025e6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM15)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002604 <HAL_TIM_Base_MspInit+0xb4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d10b      	bne.n	80025e6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d2:	4a09      	ldr	r2, [pc, #36]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80025da:	4b07      	ldr	r3, [pc, #28]	@ (80025f8 <HAL_TIM_Base_MspInit+0xa8>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40000c00 	.word	0x40000c00
 8002600:	40013400 	.word	0x40013400
 8002604:	40014000 	.word	0x40014000

08002608 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d127      	bne.n	800267a <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800262a:	4b17      	ldr	r3, [pc, #92]	@ (8002688 <HAL_TIM_Encoder_MspInit+0x80>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	4a16      	ldr	r2, [pc, #88]	@ (8002688 <HAL_TIM_Encoder_MspInit+0x80>)
 8002630:	f043 0304 	orr.w	r3, r3, #4
 8002634:	6593      	str	r3, [r2, #88]	@ 0x58
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <HAL_TIM_Encoder_MspInit+0x80>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <HAL_TIM_Encoder_MspInit+0x80>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <HAL_TIM_Encoder_MspInit+0x80>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264e:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <HAL_TIM_Encoder_MspInit+0x80>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800265a:	23c0      	movs	r3, #192	@ 0xc0
 800265c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800266a:	2302      	movs	r3, #2
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f107 0314 	add.w	r3, r7, #20
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	@ (800268c <HAL_TIM_Encoder_MspInit+0x84>)
 8002676:	f002 fa5d 	bl	8004b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3728      	adds	r7, #40	@ 0x28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40000800 	.word	0x40000800
 8002688:	40021000 	.word	0x40021000
 800268c:	48000400 	.word	0x48000400

08002690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b0:	d11e      	bne.n	80026f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	4b42      	ldr	r3, [pc, #264]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	4a41      	ldr	r2, [pc, #260]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026be:	4b3f      	ldr	r3, [pc, #252]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d8:	2300      	movs	r3, #0
 80026da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026dc:	2301      	movs	r3, #1
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	f107 031c 	add.w	r3, r7, #28
 80026e4:	4619      	mov	r1, r3
 80026e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ea:	f002 fa23 	bl	8004b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80026ee:	e060      	b.n	80027b2 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM8)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a32      	ldr	r2, [pc, #200]	@ (80027c0 <HAL_TIM_MspPostInit+0x130>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d139      	bne.n	800276e <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	4b30      	ldr	r3, [pc, #192]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fe:	4a2f      	ldr	r2, [pc, #188]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 8002700:	f043 0304 	orr.w	r3, r3, #4
 8002704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002706:	4b2d      	ldr	r3, [pc, #180]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002712:	4b2a      	ldr	r3, [pc, #168]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002716:	4a29      	ldr	r2, [pc, #164]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800271e:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800272a:	23c0      	movs	r3, #192	@ 0xc0
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002736:	2300      	movs	r3, #0
 8002738:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800273a:	2304      	movs	r3, #4
 800273c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273e:	f107 031c 	add.w	r3, r7, #28
 8002742:	4619      	mov	r1, r3
 8002744:	481f      	ldr	r0, [pc, #124]	@ (80027c4 <HAL_TIM_MspPostInit+0x134>)
 8002746:	f002 f9f5 	bl	8004b34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800274a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800275c:	230a      	movs	r3, #10
 800275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 031c 	add.w	r3, r7, #28
 8002764:	4619      	mov	r1, r3
 8002766:	4818      	ldr	r0, [pc, #96]	@ (80027c8 <HAL_TIM_MspPostInit+0x138>)
 8002768:	f002 f9e4 	bl	8004b34 <HAL_GPIO_Init>
}
 800276c:	e021      	b.n	80027b2 <HAL_TIM_MspPostInit+0x122>
  else if(htim->Instance==TIM15)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a16      	ldr	r2, [pc, #88]	@ (80027cc <HAL_TIM_MspPostInit+0x13c>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d11c      	bne.n	80027b2 <HAL_TIM_MspPostInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002778:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277c:	4a0f      	ldr	r2, [pc, #60]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002784:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <HAL_TIM_MspPostInit+0x12c>)
 8002786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002790:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	4619      	mov	r1, r3
 80027ac:	4806      	ldr	r0, [pc, #24]	@ (80027c8 <HAL_TIM_MspPostInit+0x138>)
 80027ae:	f002 f9c1 	bl	8004b34 <HAL_GPIO_Init>
}
 80027b2:	bf00      	nop
 80027b4:	3730      	adds	r7, #48	@ 0x30
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40013400 	.word	0x40013400
 80027c4:	48000800 	.word	0x48000800
 80027c8:	48000400 	.word	0x48000400
 80027cc:	40014000 	.word	0x40014000

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <NMI_Handler+0x4>

080027d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <HardFault_Handler+0x4>

080027e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <MemManage_Handler+0x4>

080027e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002826:	f000 f8ad 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <DMA1_Channel1_IRQHandler+0x10>)
 8002836:	f002 f82e 	bl	8004896 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200000a0 	.word	0x200000a0

08002844 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002848:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800284c:	f002 fb26 	bl	8004e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <LPUART1_IRQHandler+0x10>)
 800285a:	f004 ffeb 	bl	8007834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000100 	.word	0x20000100

08002868 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <SystemInit+0x20>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <SystemInit+0x20>)
 8002874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800288c:	480d      	ldr	r0, [pc, #52]	@ (80028c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800288e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002890:	f7ff ffea 	bl	8002868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	@ (80028cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <LoopForever+0xe>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	@ (80028d8 <LoopForever+0x16>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ba:	f006 fffb 	bl	80098b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028be:	f7fe fa61 	bl	8000d84 <main>

080028c2 <LoopForever>:

LoopForever:
    b LoopForever
 80028c2:	e7fe      	b.n	80028c2 <LoopForever>
  ldr   r0, =_estack
 80028c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80028d0:	08009964 	.word	0x08009964
  ldr r2, =_sbss
 80028d4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80028d8:	20000478 	.word	0x20000478

080028dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_2_IRQHandler>

080028de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f001 fdb1 	bl	8004450 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ee:	2000      	movs	r0, #0
 80028f0:	f000 f80e 	bl	8002910 <HAL_InitTick>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	71fb      	strb	r3, [r7, #7]
 80028fe:	e001      	b.n	8002904 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002900:	f7ff fd02 	bl	8002308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002904:	79fb      	ldrb	r3, [r7, #7]

}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <HAL_InitTick+0x68>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d022      	beq.n	800296a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002924:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_InitTick+0x6c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <HAL_InitTick+0x68>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002930:	fbb1 f3f3 	udiv	r3, r1, r3
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	4618      	mov	r0, r3
 800293a:	f001 fdbc 	bl	80044b6 <HAL_SYSTICK_Config>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10f      	bne.n	8002964 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	d809      	bhi.n	800295e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294a:	2200      	movs	r2, #0
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	f04f 30ff 	mov.w	r0, #4294967295
 8002952:	f001 fd88 	bl	8004466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002956:	4a0a      	ldr	r2, [pc, #40]	@ (8002980 <HAL_InitTick+0x70>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	e007      	b.n	800296e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	e004      	b.n	800296e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e001      	b.n	800296e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000014 	.word	0x20000014
 800297c:	2000000c 	.word	0x2000000c
 8002980:	20000010 	.word	0x20000010

08002984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_IncTick+0x1c>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_IncTick+0x20>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4413      	add	r3, r2
 8002992:	4a03      	ldr	r2, [pc, #12]	@ (80029a0 <HAL_IncTick+0x1c>)
 8002994:	6013      	str	r3, [r2, #0]
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	20000474 	.word	0x20000474
 80029a4:	20000014 	.word	0x20000014

080029a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return uwTick;
 80029ac:	4b03      	ldr	r3, [pc, #12]	@ (80029bc <HAL_GetTick+0x14>)
 80029ae:	681b      	ldr	r3, [r3, #0]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000474 	.word	0x20000474

080029c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3360      	adds	r3, #96	@ 0x60
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <LL_ADC_SetOffset+0x44>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a60:	bf00      	nop
 8002a62:	371c      	adds	r7, #28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	03fff000 	.word	0x03fff000

08002a70 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3360      	adds	r3, #96	@ 0x60
 8002a7e:	461a      	mov	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	3360      	adds	r3, #96	@ 0x60
 8002aac:	461a      	mov	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b087      	sub	sp, #28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3360      	adds	r3, #96	@ 0x60
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3360      	adds	r3, #96	@ 0x60
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	615a      	str	r2, [r3, #20]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3330      	adds	r3, #48	@ 0x30
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	4413      	add	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	211f      	movs	r1, #31
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 011f 	and.w	r1, r3, #31
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b087      	sub	sp, #28
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3314      	adds	r3, #20
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	0e5b      	lsrs	r3, r3, #25
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	4413      	add	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0d1b      	lsrs	r3, r3, #20
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	2107      	movs	r1, #7
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	401a      	ands	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	0d1b      	lsrs	r3, r3, #20
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	431a      	orrs	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c2c:	bf00      	nop
 8002c2e:	371c      	adds	r7, #28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0318 	and.w	r3, r3, #24
 8002c5a:	4908      	ldr	r1, [pc, #32]	@ (8002c7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c5c:	40d9      	lsrs	r1, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	400b      	ands	r3, r1
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	0007ffff 	.word	0x0007ffff

08002c80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 031f 	and.w	r3, r3, #31
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6093      	str	r3, [r2, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cd4:	d101      	bne.n	8002cda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002cf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cfc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d24:	d101      	bne.n	8002d2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d74:	f043 0202 	orr.w	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <LL_ADC_IsEnabled+0x18>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <LL_ADC_IsEnabled+0x1a>
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_IsDisableOngoing+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_IsDisableOngoing+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002de4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d101      	bne.n	8002e14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d101      	bne.n	8002e3a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1a9      	b.n	80031b6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff fa6d 	bl	8002350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff19 	bl	8002cc0 <LL_ADC_IsDeepPowerDownEnabled>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff feff 	bl	8002c9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff34 	bl	8002d10 <LL_ADC_IsInternalRegulatorEnabled>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d115      	bne.n	8002eda <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff18 	bl	8002ce8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb8:	4b9c      	ldr	r3, [pc, #624]	@ (800312c <HAL_ADC_Init+0x2e4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	4a9c      	ldr	r2, [pc, #624]	@ (8003130 <HAL_ADC_Init+0x2e8>)
 8002ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec4:	099b      	lsrs	r3, r3, #6
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff16 	bl	8002d10 <LL_ADC_IsInternalRegulatorEnabled>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eee:	f043 0210 	orr.w	r2, r3, #16
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002efa:	f043 0201 	orr.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff76 	bl	8002dfc <LL_ADC_REG_IsConversionOngoing>
 8002f10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 8142 	bne.w	80031a4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 813e 	bne.w	80031a4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002f30:	f043 0202 	orr.w	r2, r3, #2
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff23 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d141      	bne.n	8002fcc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f50:	d004      	beq.n	8002f5c <HAL_ADC_Init+0x114>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a77      	ldr	r2, [pc, #476]	@ (8003134 <HAL_ADC_Init+0x2ec>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d10f      	bne.n	8002f7c <HAL_ADC_Init+0x134>
 8002f5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f60:	f7ff ff12 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f64:	4604      	mov	r4, r0
 8002f66:	4873      	ldr	r0, [pc, #460]	@ (8003134 <HAL_ADC_Init+0x2ec>)
 8002f68:	f7ff ff0e 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	4323      	orrs	r3, r4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e012      	b.n	8002fa2 <HAL_ADC_Init+0x15a>
 8002f7c:	486e      	ldr	r0, [pc, #440]	@ (8003138 <HAL_ADC_Init+0x2f0>)
 8002f7e:	f7ff ff03 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f82:	4604      	mov	r4, r0
 8002f84:	486d      	ldr	r0, [pc, #436]	@ (800313c <HAL_ADC_Init+0x2f4>)
 8002f86:	f7ff feff 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	431c      	orrs	r4, r3
 8002f8e:	486c      	ldr	r0, [pc, #432]	@ (8003140 <HAL_ADC_Init+0x2f8>)
 8002f90:	f7ff fefa 	bl	8002d88 <LL_ADC_IsEnabled>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4323      	orrs	r3, r4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d012      	beq.n	8002fcc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fae:	d004      	beq.n	8002fba <HAL_ADC_Init+0x172>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a5f      	ldr	r2, [pc, #380]	@ (8003134 <HAL_ADC_Init+0x2ec>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Init+0x176>
 8002fba:	4a62      	ldr	r2, [pc, #392]	@ (8003144 <HAL_ADC_Init+0x2fc>)
 8002fbc:	e000      	b.n	8002fc0 <HAL_ADC_Init+0x178>
 8002fbe:	4a62      	ldr	r2, [pc, #392]	@ (8003148 <HAL_ADC_Init+0x300>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f7ff fcfa 	bl	80029c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7f5b      	ldrb	r3, [r3, #29]
 8002fd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002fdc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002fe2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d106      	bne.n	8003008 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffe:	3b01      	subs	r3, #1
 8003000:	045b      	lsls	r3, r3, #17
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4313      	orrs	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003014:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	4b48      	ldr	r3, [pc, #288]	@ (800314c <HAL_ADC_Init+0x304>)
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	69b9      	ldr	r1, [r7, #24]
 8003034:	430b      	orrs	r3, r1
 8003036:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fee5 	bl	8002e22 <LL_ADC_INJ_IsConversionOngoing>
 8003058:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d17f      	bne.n	8003160 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d17c      	bne.n	8003160 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800306a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003072:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003082:	f023 0302 	bic.w	r3, r3, #2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	430b      	orrs	r3, r1
 800308e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d017      	beq.n	80030c8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6911      	ldr	r1, [r2, #16]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80030c6:	e013      	b.n	80030f0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80030d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80030e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030ec:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d12a      	bne.n	8003150 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800311c:	430a      	orrs	r2, r1
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0201 	orr.w	r2, r2, #1
 8003128:	611a      	str	r2, [r3, #16]
 800312a:	e019      	b.n	8003160 <HAL_ADC_Init+0x318>
 800312c:	2000000c 	.word	0x2000000c
 8003130:	053e2d63 	.word	0x053e2d63
 8003134:	50000100 	.word	0x50000100
 8003138:	50000400 	.word	0x50000400
 800313c:	50000500 	.word	0x50000500
 8003140:	50000600 	.word	0x50000600
 8003144:	50000300 	.word	0x50000300
 8003148:	50000700 	.word	0x50000700
 800314c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d10c      	bne.n	8003182 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f023 010f 	bic.w	r1, r3, #15
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	1e5a      	subs	r2, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003180:	e007      	b.n	8003192 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 020f 	bic.w	r2, r2, #15
 8003190:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003196:	f023 0303 	bic.w	r3, r3, #3
 800319a:	f043 0201 	orr.w	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031a2:	e007      	b.n	80031b4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a8:	f043 0210 	orr.w	r2, r3, #16
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3724      	adds	r7, #36	@ 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	bf00      	nop

080031c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d4:	d004      	beq.n	80031e0 <HAL_ADC_Start_DMA+0x20>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a5a      	ldr	r2, [pc, #360]	@ (8003344 <HAL_ADC_Start_DMA+0x184>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <HAL_ADC_Start_DMA+0x24>
 80031e0:	4b59      	ldr	r3, [pc, #356]	@ (8003348 <HAL_ADC_Start_DMA+0x188>)
 80031e2:	e000      	b.n	80031e6 <HAL_ADC_Start_DMA+0x26>
 80031e4:	4b59      	ldr	r3, [pc, #356]	@ (800334c <HAL_ADC_Start_DMA+0x18c>)
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fd4a 	bl	8002c80 <LL_ADC_GetMultimode>
 80031ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fe02 	bl	8002dfc <LL_ADC_REG_IsConversionOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 809b 	bne.w	8003336 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADC_Start_DMA+0x4e>
 800320a:	2302      	movs	r3, #2
 800320c:	e096      	b.n	800333c <HAL_ADC_Start_DMA+0x17c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a4d      	ldr	r2, [pc, #308]	@ (8003350 <HAL_ADC_Start_DMA+0x190>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d008      	beq.n	8003232 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d002      	beq.n	8003232 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b09      	cmp	r3, #9
 8003230:	d17a      	bne.n	8003328 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fcf6 	bl	8003c24 <ADC_Enable>
 8003238:	4603      	mov	r3, r0
 800323a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d16d      	bne.n	800331e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3a      	ldr	r2, [pc, #232]	@ (8003344 <HAL_ADC_Start_DMA+0x184>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d009      	beq.n	8003274 <HAL_ADC_Start_DMA+0xb4>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a3b      	ldr	r2, [pc, #236]	@ (8003354 <HAL_ADC_Start_DMA+0x194>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d002      	beq.n	8003270 <HAL_ADC_Start_DMA+0xb0>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	e003      	b.n	8003278 <HAL_ADC_Start_DMA+0xb8>
 8003270:	4b39      	ldr	r3, [pc, #228]	@ (8003358 <HAL_ADC_Start_DMA+0x198>)
 8003272:	e001      	b.n	8003278 <HAL_ADC_Start_DMA+0xb8>
 8003274:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	4293      	cmp	r3, r2
 800327e:	d002      	beq.n	8003286 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a2:	f023 0206 	bic.w	r2, r3, #6
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	661a      	str	r2, [r3, #96]	@ 0x60
 80032aa:	e002      	b.n	80032b2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b6:	4a29      	ldr	r2, [pc, #164]	@ (800335c <HAL_ADC_Start_DMA+0x19c>)
 80032b8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	4a28      	ldr	r2, [pc, #160]	@ (8003360 <HAL_ADC_Start_DMA+0x1a0>)
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	4a27      	ldr	r2, [pc, #156]	@ (8003364 <HAL_ADC_Start_DMA+0x1a4>)
 80032c8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	221c      	movs	r2, #28
 80032d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0210 	orr.w	r2, r2, #16
 80032e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3340      	adds	r3, #64	@ 0x40
 8003304:	4619      	mov	r1, r3
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f001 f989 	bl	8004620 <HAL_DMA_Start_IT>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fd5c 	bl	8002dd4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800331c:	e00d      	b.n	800333a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003326:	e008      	b.n	800333a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003334:	e001      	b.n	800333a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003336:	2302      	movs	r3, #2
 8003338:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	50000100 	.word	0x50000100
 8003348:	50000300 	.word	0x50000300
 800334c:	50000700 	.word	0x50000700
 8003350:	50000600 	.word	0x50000600
 8003354:	50000500 	.word	0x50000500
 8003358:	50000400 	.word	0x50000400
 800335c:	08003e0f 	.word	0x08003e0f
 8003360:	08003ee7 	.word	0x08003ee7
 8003364:	08003f03 	.word	0x08003f03

08003368 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b0b6      	sub	sp, #216	@ 0xd8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x24>
 80033c2:	2302      	movs	r3, #2
 80033c4:	f000 bc13 	b.w	8003bee <HAL_ADC_ConfigChannel+0x84a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fd11 	bl	8002dfc <LL_ADC_REG_IsConversionOngoing>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 83f3 	bne.w	8003bc8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f7ff fbcb 	bl	8002b8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fcff 	bl	8002dfc <LL_ADC_REG_IsConversionOngoing>
 80033fe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fd0b 	bl	8002e22 <LL_ADC_INJ_IsConversionOngoing>
 800340c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003410:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 81d9 	bne.w	80037cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800341a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800341e:	2b00      	cmp	r3, #0
 8003420:	f040 81d4 	bne.w	80037cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800342c:	d10f      	bne.n	800344e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	4619      	mov	r1, r3
 800343a:	f7ff fbd2 	bl	8002be2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fb79 	bl	8002b3e <LL_ADC_SetSamplingTimeCommonConfig>
 800344c:	e00e      	b.n	800346c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6819      	ldr	r1, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	461a      	mov	r2, r3
 800345c:	f7ff fbc1 	bl	8002be2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fb69 	bl	8002b3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	08db      	lsrs	r3, r3, #3
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b04      	cmp	r3, #4
 800348c:	d022      	beq.n	80034d4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6919      	ldr	r1, [r3, #16]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800349e:	f7ff fac3 	bl	8002a28 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6919      	ldr	r1, [r3, #16]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f7ff fb0f 	bl	8002ad2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x126>
 80034c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034c8:	e000      	b.n	80034cc <HAL_ADC_ConfigChannel+0x128>
 80034ca:	2300      	movs	r3, #0
 80034cc:	461a      	mov	r2, r3
 80034ce:	f7ff fb1b 	bl	8002b08 <LL_ADC_SetOffsetSaturation>
 80034d2:	e17b      	b.n	80037cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fac8 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x15c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fabd 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	f003 021f 	and.w	r2, r3, #31
 80034fe:	e01e      	b.n	800353e <HAL_ADC_ConfigChannel+0x19a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fab2 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800350c:	4603      	mov	r3, r0
 800350e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800351e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003522:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e004      	b.n	800353c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x1b2>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	0e9b      	lsrs	r3, r3, #26
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	e018      	b.n	8003588 <HAL_ADC_ConfigChannel+0x1e4>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003562:	fa93 f3a3 	rbit	r3, r3
 8003566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800356a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800356e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800357a:	2320      	movs	r3, #32
 800357c:	e004      	b.n	8003588 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800357e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003582:	fab3 f383 	clz	r3, r3
 8003586:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003588:	429a      	cmp	r2, r3
 800358a:	d106      	bne.n	800359a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fa81 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fa65 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x222>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fa5a 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	0e9b      	lsrs	r3, r3, #26
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	e01e      	b.n	8003604 <HAL_ADC_ConfigChannel+0x260>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fa4f 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80035e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80035ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e004      	b.n	8003602 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80035f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360c:	2b00      	cmp	r3, #0
 800360e:	d105      	bne.n	800361c <HAL_ADC_ConfigChannel+0x278>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0e9b      	lsrs	r3, r3, #26
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	e018      	b.n	800364e <HAL_ADC_ConfigChannel+0x2aa>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003630:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003634:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003638:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e004      	b.n	800364e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800364e:	429a      	cmp	r2, r3
 8003650:	d106      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2200      	movs	r2, #0
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fa1e 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2102      	movs	r1, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff fa02 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800366c:	4603      	mov	r3, r0
 800366e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <HAL_ADC_ConfigChannel+0x2e8>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f9f7 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	f003 021f 	and.w	r2, r3, #31
 800368a:	e01e      	b.n	80036ca <HAL_ADC_ConfigChannel+0x326>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2102      	movs	r1, #2
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff f9ec 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003698:	4603      	mov	r3, r0
 800369a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80036aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80036b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80036ba:	2320      	movs	r3, #32
 80036bc:	e004      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80036be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x33e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	0e9b      	lsrs	r3, r3, #26
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	e016      	b.n	8003710 <HAL_ADC_ConfigChannel+0x36c>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80036f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80036f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80036fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e004      	b.n	8003710 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003706:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003710:	429a      	cmp	r2, r3
 8003712:	d106      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2200      	movs	r2, #0
 800371a:	2102      	movs	r1, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff f9bd 	bl	8002a9c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2103      	movs	r1, #3
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff f9a1 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800372e:	4603      	mov	r3, r0
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_ADC_ConfigChannel+0x3aa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2103      	movs	r1, #3
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f996 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 8003744:	4603      	mov	r3, r0
 8003746:	0e9b      	lsrs	r3, r3, #26
 8003748:	f003 021f 	and.w	r2, r3, #31
 800374c:	e017      	b.n	800377e <HAL_ADC_ConfigChannel+0x3da>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2103      	movs	r1, #3
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff f98b 	bl	8002a70 <LL_ADC_GetOffsetChannel>
 800375a:	4603      	mov	r3, r0
 800375c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003766:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003768:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800376a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003770:	2320      	movs	r3, #32
 8003772:	e003      	b.n	800377c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x3f2>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	e011      	b.n	80037ba <HAL_ADC_ConfigChannel+0x416>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800379e:	fa93 f3a3 	rbit	r3, r3
 80037a2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80037a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80037a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80037ae:	2320      	movs	r3, #32
 80037b0:	e003      	b.n	80037ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80037b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d106      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2103      	movs	r1, #3
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7ff f968 	bl	8002a9c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fad9 	bl	8002d88 <LL_ADC_IsEnabled>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f040 813d 	bne.w	8003a58 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6819      	ldr	r1, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f7ff fa24 	bl	8002c38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4aa2      	ldr	r2, [pc, #648]	@ (8003a80 <HAL_ADC_ConfigChannel+0x6dc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f040 812e 	bne.w	8003a58 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x480>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	3301      	adds	r3, #1
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2b09      	cmp	r3, #9
 800381a:	bf94      	ite	ls
 800381c:	2301      	movls	r3, #1
 800381e:	2300      	movhi	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e019      	b.n	8003858 <HAL_ADC_ConfigChannel+0x4b4>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003832:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003834:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800383c:	2320      	movs	r3, #32
 800383e:	e003      	b.n	8003848 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003840:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	3301      	adds	r3, #1
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	2b09      	cmp	r3, #9
 8003850:	bf94      	ite	ls
 8003852:	2301      	movls	r3, #1
 8003854:	2300      	movhi	r3, #0
 8003856:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003858:	2b00      	cmp	r3, #0
 800385a:	d079      	beq.n	8003950 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003864:	2b00      	cmp	r3, #0
 8003866:	d107      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x4d4>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0e9b      	lsrs	r3, r3, #26
 800386e:	3301      	adds	r3, #1
 8003870:	069b      	lsls	r3, r3, #26
 8003872:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003876:	e015      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x500>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003880:	fa93 f3a3 	rbit	r3, r3
 8003884:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003888:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800388a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003890:	2320      	movs	r3, #32
 8003892:	e003      	b.n	800389c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003896:	fab3 f383 	clz	r3, r3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	3301      	adds	r3, #1
 800389e:	069b      	lsls	r3, r3, #26
 80038a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x520>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	3301      	adds	r3, #1
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	e017      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x550>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80038d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80038d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80038dc:	2320      	movs	r3, #32
 80038de:	e003      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80038e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f303 	lsl.w	r3, r1, r3
 80038f4:	ea42 0103 	orr.w	r1, r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <HAL_ADC_ConfigChannel+0x576>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	0e9b      	lsrs	r3, r3, #26
 800390a:	3301      	adds	r3, #1
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	4613      	mov	r3, r2
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	4413      	add	r3, r2
 8003916:	051b      	lsls	r3, r3, #20
 8003918:	e018      	b.n	800394c <HAL_ADC_ConfigChannel+0x5a8>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800392c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003932:	2320      	movs	r3, #32
 8003934:	e003      	b.n	800393e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003938:	fab3 f383 	clz	r3, r3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4613      	mov	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	4413      	add	r3, r2
 800394a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800394c:	430b      	orrs	r3, r1
 800394e:	e07e      	b.n	8003a4e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <HAL_ADC_ConfigChannel+0x5c8>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0e9b      	lsrs	r3, r3, #26
 8003962:	3301      	adds	r3, #1
 8003964:	069b      	lsls	r3, r3, #26
 8003966:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800396a:	e015      	b.n	8003998 <HAL_ADC_ConfigChannel+0x5f4>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003974:	fa93 f3a3 	rbit	r3, r3
 8003978:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800397a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800397e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003984:	2320      	movs	r3, #32
 8003986:	e003      	b.n	8003990 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	3301      	adds	r3, #1
 8003992:	069b      	lsls	r3, r3, #26
 8003994:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x614>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0e9b      	lsrs	r3, r3, #26
 80039aa:	3301      	adds	r3, #1
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	e017      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x644>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	61fb      	str	r3, [r7, #28]
  return result;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80039d0:	2320      	movs	r3, #32
 80039d2:	e003      	b.n	80039dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	fab3 f383 	clz	r3, r3
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	ea42 0103 	orr.w	r1, r2, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x670>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	0e9b      	lsrs	r3, r3, #26
 80039fe:	3301      	adds	r3, #1
 8003a00:	f003 021f 	and.w	r2, r3, #31
 8003a04:	4613      	mov	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4413      	add	r3, r2
 8003a0a:	3b1e      	subs	r3, #30
 8003a0c:	051b      	lsls	r3, r3, #20
 8003a0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	e01b      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x6a8>
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	613b      	str	r3, [r7, #16]
  return result;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	e003      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f003 021f 	and.w	r2, r3, #31
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	3b1e      	subs	r3, #30
 8003a46:	051b      	lsls	r3, r3, #20
 8003a48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a4c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a52:	4619      	mov	r1, r3
 8003a54:	f7ff f8c5 	bl	8002be2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_ADC_ConfigChannel+0x6e0>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80be 	beq.w	8003be2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a6e:	d004      	beq.n	8003a7a <HAL_ADC_ConfigChannel+0x6d6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a04      	ldr	r2, [pc, #16]	@ (8003a88 <HAL_ADC_ConfigChannel+0x6e4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10a      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x6ec>
 8003a7a:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <HAL_ADC_ConfigChannel+0x6e8>)
 8003a7c:	e009      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x6ee>
 8003a7e:	bf00      	nop
 8003a80:	407f0000 	.word	0x407f0000
 8003a84:	80080000 	.word	0x80080000
 8003a88:	50000100 	.word	0x50000100
 8003a8c:	50000300 	.word	0x50000300
 8003a90:	4b59      	ldr	r3, [pc, #356]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x854>)
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe ffba 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 8003a98:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a56      	ldr	r2, [pc, #344]	@ (8003bfc <HAL_ADC_ConfigChannel+0x858>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d004      	beq.n	8003ab0 <HAL_ADC_ConfigChannel+0x70c>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a55      	ldr	r2, [pc, #340]	@ (8003c00 <HAL_ADC_ConfigChannel+0x85c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d13a      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ab4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d134      	bne.n	8003b26 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ac4:	d005      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x72e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a4e      	ldr	r2, [pc, #312]	@ (8003c04 <HAL_ADC_ConfigChannel+0x860>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	f040 8085 	bne.w	8003bdc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ada:	d004      	beq.n	8003ae6 <HAL_ADC_ConfigChannel+0x742>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a49      	ldr	r2, [pc, #292]	@ (8003c08 <HAL_ADC_ConfigChannel+0x864>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_ADC_ConfigChannel+0x746>
 8003ae6:	4a49      	ldr	r2, [pc, #292]	@ (8003c0c <HAL_ADC_ConfigChannel+0x868>)
 8003ae8:	e000      	b.n	8003aec <HAL_ADC_ConfigChannel+0x748>
 8003aea:	4a43      	ldr	r2, [pc, #268]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x854>)
 8003aec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003af0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7fe ff75 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003afc:	4b44      	ldr	r3, [pc, #272]	@ (8003c10 <HAL_ADC_ConfigChannel+0x86c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	4a44      	ldr	r2, [pc, #272]	@ (8003c14 <HAL_ADC_ConfigChannel+0x870>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b16:	e002      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f9      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b24:	e05a      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c18 <HAL_ADC_ConfigChannel+0x874>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d125      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11f      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a31      	ldr	r2, [pc, #196]	@ (8003c08 <HAL_ADC_ConfigChannel+0x864>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d104      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x7ac>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a34      	ldr	r2, [pc, #208]	@ (8003c1c <HAL_ADC_ConfigChannel+0x878>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d047      	beq.n	8003be0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b58:	d004      	beq.n	8003b64 <HAL_ADC_ConfigChannel+0x7c0>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c08 <HAL_ADC_ConfigChannel+0x864>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x7c4>
 8003b64:	4a29      	ldr	r2, [pc, #164]	@ (8003c0c <HAL_ADC_ConfigChannel+0x868>)
 8003b66:	e000      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x7c6>
 8003b68:	4a23      	ldr	r2, [pc, #140]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x854>)
 8003b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f7fe ff36 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b7a:	e031      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a27      	ldr	r2, [pc, #156]	@ (8003c20 <HAL_ADC_ConfigChannel+0x87c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d12d      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d127      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a1c      	ldr	r2, [pc, #112]	@ (8003c08 <HAL_ADC_ConfigChannel+0x864>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d022      	beq.n	8003be2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ba4:	d004      	beq.n	8003bb0 <HAL_ADC_ConfigChannel+0x80c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <HAL_ADC_ConfigChannel+0x864>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x810>
 8003bb0:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <HAL_ADC_ConfigChannel+0x868>)
 8003bb2:	e000      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x812>
 8003bb4:	4a10      	ldr	r2, [pc, #64]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x854>)
 8003bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003bba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f7fe ff10 	bl	80029e6 <LL_ADC_SetCommonPathInternalCh>
 8003bc6:	e00c      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003bda:	e002      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bdc:	bf00      	nop
 8003bde:	e000      	b.n	8003be2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003be0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003bea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	37d8      	adds	r7, #216	@ 0xd8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	50000700 	.word	0x50000700
 8003bfc:	c3210000 	.word	0xc3210000
 8003c00:	90c00010 	.word	0x90c00010
 8003c04:	50000600 	.word	0x50000600
 8003c08:	50000100 	.word	0x50000100
 8003c0c:	50000300 	.word	0x50000300
 8003c10:	2000000c 	.word	0x2000000c
 8003c14:	053e2d63 	.word	0x053e2d63
 8003c18:	c7520000 	.word	0xc7520000
 8003c1c:	50000500 	.word	0x50000500
 8003c20:	cb840000 	.word	0xcb840000

08003c24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f8a7 	bl	8002d88 <LL_ADC_IsEnabled>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d176      	bne.n	8003d2e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	4b3c      	ldr	r3, [pc, #240]	@ (8003d38 <ADC_Enable+0x114>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c52:	f043 0210 	orr.w	r2, r3, #16
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e062      	b.n	8003d30 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff f862 	bl	8002d38 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c7c:	d004      	beq.n	8003c88 <ADC_Enable+0x64>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2e      	ldr	r2, [pc, #184]	@ (8003d3c <ADC_Enable+0x118>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <ADC_Enable+0x68>
 8003c88:	4b2d      	ldr	r3, [pc, #180]	@ (8003d40 <ADC_Enable+0x11c>)
 8003c8a:	e000      	b.n	8003c8e <ADC_Enable+0x6a>
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d44 <ADC_Enable+0x120>)
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe febc 	bl	8002a0c <LL_ADC_GetCommonPathInternalCh>
 8003c94:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003c96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d013      	beq.n	8003cc6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d48 <ADC_Enable+0x124>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	4a29      	ldr	r2, [pc, #164]	@ (8003d4c <ADC_Enable+0x128>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	4613      	mov	r3, r2
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cb8:	e002      	b.n	8003cc0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f9      	bne.n	8003cba <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003cc6:	f7fe fe6f 	bl	80029a8 <HAL_GetTick>
 8003cca:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ccc:	e028      	b.n	8003d20 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff f858 	bl	8002d88 <LL_ADC_IsEnabled>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff f828 	bl	8002d38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ce8:	f7fe fe5e 	bl	80029a8 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d914      	bls.n	8003d20 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d00d      	beq.n	8003d20 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d08:	f043 0210 	orr.w	r2, r3, #16
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d14:	f043 0201 	orr.w	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d1cf      	bne.n	8003cce <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	8000003f 	.word	0x8000003f
 8003d3c:	50000100 	.word	0x50000100
 8003d40:	50000300 	.word	0x50000300
 8003d44:	50000700 	.word	0x50000700
 8003d48:	2000000c 	.word	0x2000000c
 8003d4c:	053e2d63 	.word	0x053e2d63

08003d50 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff f826 	bl	8002dae <LL_ADC_IsDisableOngoing>
 8003d62:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f80d 	bl	8002d88 <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d047      	beq.n	8003e04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d144      	bne.n	8003e04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 030d 	and.w	r3, r3, #13
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d10c      	bne.n	8003da2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe ffe7 	bl	8002d60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2203      	movs	r2, #3
 8003d98:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d9a:	f7fe fe05 	bl	80029a8 <HAL_GetTick>
 8003d9e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003da0:	e029      	b.n	8003df6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da6:	f043 0210 	orr.w	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e023      	b.n	8003e06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dbe:	f7fe fdf3 	bl	80029a8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d914      	bls.n	8003df6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e007      	b.n	8003e06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1dc      	bne.n	8003dbe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e20:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d14b      	bne.n	8003ec0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d021      	beq.n	8003e86 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe fe8c 	bl	8002b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d032      	beq.n	8003eb8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d12b      	bne.n	8003eb8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d11f      	bne.n	8003eb8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	f043 0201 	orr.w	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e84:	e018      	b.n	8003eb8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d111      	bne.n	8003eb8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d105      	bne.n	8003eb8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff fa55 	bl	8003368 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ebe:	e00e      	b.n	8003ede <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fa5f 	bl	8003390 <HAL_ADC_ErrorCallback>
}
 8003ed2:	e004      	b.n	8003ede <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff fa41 	bl	800337c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f20:	f043 0204 	orr.w	r2, r3, #4
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f7ff fa31 	bl	8003390 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <LL_ADC_IsEnabled>:
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <LL_ADC_IsEnabled+0x18>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <LL_ADC_IsEnabled+0x1a>
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_ADC_StartCalibration>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003f6e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	609a      	str	r2, [r3, #8]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <LL_ADC_IsCalibrationOnGoing>:
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fa2:	d101      	bne.n	8003fa8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d101      	bne.n	8003fce <LL_ADC_REG_IsConversionOngoing+0x18>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e04d      	b.n	8004094 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fea5 	bl	8003d50 <ADC_Disable>
 8004006:	4603      	mov	r3, r0
 8004008:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d136      	bne.n	800407e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004014:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004018:	f023 0302 	bic.w	r3, r3, #2
 800401c:	f043 0202 	orr.w	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff ff96 	bl	8003f5c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004030:	e014      	b.n	800405c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	3301      	adds	r3, #1
 8004036:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4a18      	ldr	r2, [pc, #96]	@ (800409c <HAL_ADCEx_Calibration_Start+0xc0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d90d      	bls.n	800405c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004044:	f023 0312 	bic.w	r3, r3, #18
 8004048:	f043 0210 	orr.w	r2, r3, #16
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e01b      	b.n	8004094 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff94 	bl	8003f8e <LL_ADC_IsCalibrationOnGoing>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e2      	bne.n	8004032 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004070:	f023 0303 	bic.w	r3, r3, #3
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800407c:	e005      	b.n	800408a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004082:	f043 0210 	orr.w	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004092:	7bfb      	ldrb	r3, [r7, #15]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	0004de01 	.word	0x0004de01

080040a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b0a1      	sub	sp, #132	@ 0x84
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e0e7      	b.n	800428e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80040c6:	2300      	movs	r3, #0
 80040c8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80040ca:	2300      	movs	r3, #0
 80040cc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d6:	d102      	bne.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	e009      	b.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6e      	ldr	r2, [pc, #440]	@ (800429c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d102      	bne.n	80040ee <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80040e8:	4b6d      	ldr	r3, [pc, #436]	@ (80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	e001      	b.n	80040f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0be      	b.n	800428e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff ff4f 	bl	8003fb6 <LL_ADC_REG_IsConversionOngoing>
 8004118:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff ff49 	bl	8003fb6 <LL_ADC_REG_IsConversionOngoing>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 80a0 	bne.w	800426c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800412c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800412e:	2b00      	cmp	r3, #0
 8004130:	f040 809c 	bne.w	800426c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800413c:	d004      	beq.n	8004148 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a55      	ldr	r2, [pc, #340]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d101      	bne.n	800414c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004148:	4b56      	ldr	r3, [pc, #344]	@ (80042a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800414a:	e000      	b.n	800414e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800414c:	4b56      	ldr	r3, [pc, #344]	@ (80042a8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800414e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d04b      	beq.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800416a:	035b      	lsls	r3, r3, #13
 800416c:	430b      	orrs	r3, r1
 800416e:	431a      	orrs	r2, r3
 8004170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004172:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800417c:	d004      	beq.n	8004188 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a45      	ldr	r2, [pc, #276]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d10f      	bne.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004188:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800418c:	f7ff fed3 	bl	8003f36 <LL_ADC_IsEnabled>
 8004190:	4604      	mov	r4, r0
 8004192:	4841      	ldr	r0, [pc, #260]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004194:	f7ff fecf 	bl	8003f36 <LL_ADC_IsEnabled>
 8004198:	4603      	mov	r3, r0
 800419a:	4323      	orrs	r3, r4
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e012      	b.n	80041ce <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80041a8:	483c      	ldr	r0, [pc, #240]	@ (800429c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80041aa:	f7ff fec4 	bl	8003f36 <LL_ADC_IsEnabled>
 80041ae:	4604      	mov	r4, r0
 80041b0:	483b      	ldr	r0, [pc, #236]	@ (80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80041b2:	f7ff fec0 	bl	8003f36 <LL_ADC_IsEnabled>
 80041b6:	4603      	mov	r3, r0
 80041b8:	431c      	orrs	r4, r3
 80041ba:	483c      	ldr	r0, [pc, #240]	@ (80042ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80041bc:	f7ff febb 	bl	8003f36 <LL_ADC_IsEnabled>
 80041c0:	4603      	mov	r3, r0
 80041c2:	4323      	orrs	r3, r4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d056      	beq.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80041d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80041da:	f023 030f 	bic.w	r3, r3, #15
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	6811      	ldr	r1, [r2, #0]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	6892      	ldr	r2, [r2, #8]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	431a      	orrs	r2, r3
 80041ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041ee:	e047      	b.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004204:	d004      	beq.n	8004210 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a23      	ldr	r2, [pc, #140]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10f      	bne.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004210:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004214:	f7ff fe8f 	bl	8003f36 <LL_ADC_IsEnabled>
 8004218:	4604      	mov	r4, r0
 800421a:	481f      	ldr	r0, [pc, #124]	@ (8004298 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800421c:	f7ff fe8b 	bl	8003f36 <LL_ADC_IsEnabled>
 8004220:	4603      	mov	r3, r0
 8004222:	4323      	orrs	r3, r4
 8004224:	2b00      	cmp	r3, #0
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	e012      	b.n	8004256 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004230:	481a      	ldr	r0, [pc, #104]	@ (800429c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004232:	f7ff fe80 	bl	8003f36 <LL_ADC_IsEnabled>
 8004236:	4604      	mov	r4, r0
 8004238:	4819      	ldr	r0, [pc, #100]	@ (80042a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800423a:	f7ff fe7c 	bl	8003f36 <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	431c      	orrs	r4, r3
 8004242:	481a      	ldr	r0, [pc, #104]	@ (80042ac <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004244:	f7ff fe77 	bl	8003f36 <LL_ADC_IsEnabled>
 8004248:	4603      	mov	r3, r0
 800424a:	4323      	orrs	r3, r4
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d012      	beq.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800425a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004262:	f023 030f 	bic.w	r3, r3, #15
 8004266:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004268:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800426a:	e009      	b.n	8004280 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800427e:	e000      	b.n	8004282 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004280:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800428a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800428e:	4618      	mov	r0, r3
 8004290:	3784      	adds	r7, #132	@ 0x84
 8004292:	46bd      	mov	sp, r7
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	bf00      	nop
 8004298:	50000100 	.word	0x50000100
 800429c:	50000400 	.word	0x50000400
 80042a0:	50000500 	.word	0x50000500
 80042a4:	50000300 	.word	0x50000300
 80042a8:	50000700 	.word	0x50000700
 80042ac:	50000600 	.word	0x50000600

080042b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c0:	4b0c      	ldr	r3, [pc, #48]	@ (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042cc:	4013      	ands	r3, r2
 80042ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042e2:	4a04      	ldr	r2, [pc, #16]	@ (80042f4 <__NVIC_SetPriorityGrouping+0x44>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	60d3      	str	r3, [r2, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042fc:	4b04      	ldr	r3, [pc, #16]	@ (8004310 <__NVIC_GetPriorityGrouping+0x18>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	f003 0307 	and.w	r3, r3, #7
}
 8004306:	4618      	mov	r0, r3
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00

08004314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	2b00      	cmp	r3, #0
 8004324:	db0b      	blt.n	800433e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004326:	79fb      	ldrb	r3, [r7, #7]
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	4907      	ldr	r1, [pc, #28]	@ (800434c <__NVIC_EnableIRQ+0x38>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2001      	movs	r0, #1
 8004336:	fa00 f202 	lsl.w	r2, r0, r2
 800433a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	e000e100 	.word	0xe000e100

08004350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	6039      	str	r1, [r7, #0]
 800435a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004360:	2b00      	cmp	r3, #0
 8004362:	db0a      	blt.n	800437a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	b2da      	uxtb	r2, r3
 8004368:	490c      	ldr	r1, [pc, #48]	@ (800439c <__NVIC_SetPriority+0x4c>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	0112      	lsls	r2, r2, #4
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	440b      	add	r3, r1
 8004374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004378:	e00a      	b.n	8004390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4908      	ldr	r1, [pc, #32]	@ (80043a0 <__NVIC_SetPriority+0x50>)
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	3b04      	subs	r3, #4
 8004388:	0112      	lsls	r2, r2, #4
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	440b      	add	r3, r1
 800438e:	761a      	strb	r2, [r3, #24]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	e000e100 	.word	0xe000e100
 80043a0:	e000ed00 	.word	0xe000ed00

080043a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b089      	sub	sp, #36	@ 0x24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f1c3 0307 	rsb	r3, r3, #7
 80043be:	2b04      	cmp	r3, #4
 80043c0:	bf28      	it	cs
 80043c2:	2304      	movcs	r3, #4
 80043c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	3304      	adds	r3, #4
 80043ca:	2b06      	cmp	r3, #6
 80043cc:	d902      	bls.n	80043d4 <NVIC_EncodePriority+0x30>
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3b03      	subs	r3, #3
 80043d2:	e000      	b.n	80043d6 <NVIC_EncodePriority+0x32>
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	401a      	ands	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043ec:	f04f 31ff 	mov.w	r1, #4294967295
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	43d9      	mvns	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	4313      	orrs	r3, r2
         );
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3724      	adds	r7, #36	@ 0x24
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3b01      	subs	r3, #1
 8004418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800441c:	d301      	bcc.n	8004422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800441e:	2301      	movs	r3, #1
 8004420:	e00f      	b.n	8004442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004422:	4a0a      	ldr	r2, [pc, #40]	@ (800444c <SysTick_Config+0x40>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800442a:	210f      	movs	r1, #15
 800442c:	f04f 30ff 	mov.w	r0, #4294967295
 8004430:	f7ff ff8e 	bl	8004350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004434:	4b05      	ldr	r3, [pc, #20]	@ (800444c <SysTick_Config+0x40>)
 8004436:	2200      	movs	r2, #0
 8004438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800443a:	4b04      	ldr	r3, [pc, #16]	@ (800444c <SysTick_Config+0x40>)
 800443c:	2207      	movs	r2, #7
 800443e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	e000e010 	.word	0xe000e010

08004450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff ff29 	bl	80042b0 <__NVIC_SetPriorityGrouping>
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b086      	sub	sp, #24
 800446a:	af00      	add	r7, sp, #0
 800446c:	4603      	mov	r3, r0
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004474:	f7ff ff40 	bl	80042f8 <__NVIC_GetPriorityGrouping>
 8004478:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68b9      	ldr	r1, [r7, #8]
 800447e:	6978      	ldr	r0, [r7, #20]
 8004480:	f7ff ff90 	bl	80043a4 <NVIC_EncodePriority>
 8004484:	4602      	mov	r2, r0
 8004486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448a:	4611      	mov	r1, r2
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff5f 	bl	8004350 <__NVIC_SetPriority>
}
 8004492:	bf00      	nop
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff33 	bl	8004314 <__NVIC_EnableIRQ>
}
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff ffa4 	bl	800440c <SysTick_Config>
 80044c4:	4603      	mov	r3, r0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e08d      	b.n	80045fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	4b47      	ldr	r3, [pc, #284]	@ (8004608 <HAL_DMA_Init+0x138>)
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d80f      	bhi.n	800450e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b45      	ldr	r3, [pc, #276]	@ (800460c <HAL_DMA_Init+0x13c>)
 80044f6:	4413      	add	r3, r2
 80044f8:	4a45      	ldr	r2, [pc, #276]	@ (8004610 <HAL_DMA_Init+0x140>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	009a      	lsls	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a42      	ldr	r2, [pc, #264]	@ (8004614 <HAL_DMA_Init+0x144>)
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40
 800450c:	e00e      	b.n	800452c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_DMA_Init+0x148>)
 8004516:	4413      	add	r3, r2
 8004518:	4a3d      	ldr	r2, [pc, #244]	@ (8004610 <HAL_DMA_Init+0x140>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	009a      	lsls	r2, r3, #2
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a3c      	ldr	r2, [pc, #240]	@ (800461c <HAL_DMA_Init+0x14c>)
 800452a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004546:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004550:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004568:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa76 	bl	8004a70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800458c:	d102      	bne.n	8004594 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_DMA_Init+0x104>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d80c      	bhi.n	80045d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa96 	bl	8004aec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e008      	b.n	80045e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40020407 	.word	0x40020407
 800460c:	bffdfff8 	.word	0xbffdfff8
 8004610:	cccccccd 	.word	0xcccccccd
 8004614:	40020000 	.word	0x40020000
 8004618:	bffdfbf8 	.word	0xbffdfbf8
 800461c:	40020400 	.word	0x40020400

08004620 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_DMA_Start_IT+0x20>
 800463c:	2302      	movs	r3, #2
 800463e:	e066      	b.n	800470e <HAL_DMA_Start_IT+0xee>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b01      	cmp	r3, #1
 8004652:	d155      	bne.n	8004700 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f9bb 	bl	80049f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 020e 	orr.w	r2, r2, #14
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	e00f      	b.n	80046b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0204 	bic.w	r2, r2, #4
 80046a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 020a 	orr.w	r2, r2, #10
 80046b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e005      	b.n	800470c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004708:	2302      	movs	r3, #2
 800470a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800470c:	7dfb      	ldrb	r3, [r7, #23]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d005      	beq.n	800473a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2204      	movs	r2, #4
 8004732:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e037      	b.n	80047aa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 020e 	bic.w	r2, r2, #14
 8004748:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004754:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004758:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	f003 021f 	and.w	r2, r3, #31
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f202 	lsl.w	r2, r1, r2
 800477c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004786:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00c      	beq.n	80047aa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800479e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047a8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d00d      	beq.n	80047fc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2204      	movs	r2, #4
 80047e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
 80047fa:	e047      	b.n	800488c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 020e 	bic.w	r2, r2, #14
 800480a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004826:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800482a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004830:	f003 021f 	and.w	r2, r3, #31
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f202 	lsl.w	r2, r1, r2
 800483e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004848:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00c      	beq.n	800486c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004860:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800486a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	4798      	blx	r3
    }
  }
  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2204      	movs	r2, #4
 80048b8:	409a      	lsls	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d026      	beq.n	8004910 <HAL_DMA_IRQHandler+0x7a>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d021      	beq.n	8004910 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0204 	bic.w	r2, r2, #4
 80048e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ee:	f003 021f 	and.w	r2, r3, #31
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	2104      	movs	r1, #4
 80048f8:	fa01 f202 	lsl.w	r2, r1, r2
 80048fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	2b00      	cmp	r3, #0
 8004904:	d071      	beq.n	80049ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800490e:	e06c      	b.n	80049ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2202      	movs	r2, #2
 800491a:	409a      	lsls	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d02e      	beq.n	8004982 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d029      	beq.n	8004982 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 020a 	bic.w	r2, r2, #10
 800494a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004958:	f003 021f 	and.w	r2, r3, #31
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	2102      	movs	r1, #2
 8004962:	fa01 f202 	lsl.w	r2, r1, r2
 8004966:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d038      	beq.n	80049ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004980:	e033      	b.n	80049ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2208      	movs	r2, #8
 800498c:	409a      	lsls	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d02a      	beq.n	80049ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	d025      	beq.n	80049ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 020e 	bic.w	r2, r2, #14
 80049ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b4:	f003 021f 	and.w	r2, r3, #31
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	2101      	movs	r1, #1
 80049be:	fa01 f202 	lsl.w	r2, r1, r2
 80049c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
}
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a0a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a22:	f003 021f 	and.w	r2, r3, #31
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d108      	bne.n	8004a54 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a52:	e007      	b.n	8004a64 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b16      	ldr	r3, [pc, #88]	@ (8004ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d802      	bhi.n	8004a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004a84:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e001      	b.n	8004a8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004a8a:	4b15      	ldr	r3, [pc, #84]	@ (8004ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004a8c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	3b08      	subs	r3, #8
 8004a9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	009a      	lsls	r2, r3, #2
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4413      	add	r3, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004aba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 031f 	and.w	r3, r3, #31
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40020407 	.word	0x40020407
 8004adc:	40020800 	.word	0x40020800
 8004ae0:	40020820 	.word	0x40020820
 8004ae4:	cccccccd 	.word	0xcccccccd
 8004ae8:	40020880 	.word	0x40020880

08004aec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a08      	ldr	r2, [pc, #32]	@ (8004b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b0e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	2201      	movs	r2, #1
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	1000823f 	.word	0x1000823f
 8004b30:	40020940 	.word	0x40020940

08004b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b42:	e15a      	b.n	8004dfa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 814c 	beq.w	8004df4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d005      	beq.n	8004b74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d130      	bne.n	8004bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	2203      	movs	r2, #3
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004baa:	2201      	movs	r2, #1
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f003 0201 	and.w	r2, r3, #1
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d017      	beq.n	8004c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	2203      	movs	r2, #3
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d123      	bne.n	8004c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	08da      	lsrs	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3208      	adds	r2, #8
 8004c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	220f      	movs	r2, #15
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	08da      	lsrs	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3208      	adds	r2, #8
 8004c60:	6939      	ldr	r1, [r7, #16]
 8004c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	2203      	movs	r2, #3
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 0203 	and.w	r2, r3, #3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80a6 	beq.w	8004df4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e18 <HAL_GPIO_Init+0x2e4>)
 8004caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cac:	4a5a      	ldr	r2, [pc, #360]	@ (8004e18 <HAL_GPIO_Init+0x2e4>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004cb4:	4b58      	ldr	r3, [pc, #352]	@ (8004e18 <HAL_GPIO_Init+0x2e4>)
 8004cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cc0:	4a56      	ldr	r2, [pc, #344]	@ (8004e1c <HAL_GPIO_Init+0x2e8>)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	089b      	lsrs	r3, r3, #2
 8004cc6:	3302      	adds	r3, #2
 8004cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	220f      	movs	r2, #15
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004cea:	d01f      	beq.n	8004d2c <HAL_GPIO_Init+0x1f8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a4c      	ldr	r2, [pc, #304]	@ (8004e20 <HAL_GPIO_Init+0x2ec>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d019      	beq.n	8004d28 <HAL_GPIO_Init+0x1f4>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a4b      	ldr	r2, [pc, #300]	@ (8004e24 <HAL_GPIO_Init+0x2f0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d013      	beq.n	8004d24 <HAL_GPIO_Init+0x1f0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8004e28 <HAL_GPIO_Init+0x2f4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00d      	beq.n	8004d20 <HAL_GPIO_Init+0x1ec>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a49      	ldr	r2, [pc, #292]	@ (8004e2c <HAL_GPIO_Init+0x2f8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <HAL_GPIO_Init+0x1e8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a48      	ldr	r2, [pc, #288]	@ (8004e30 <HAL_GPIO_Init+0x2fc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <HAL_GPIO_Init+0x1e4>
 8004d14:	2305      	movs	r3, #5
 8004d16:	e00a      	b.n	8004d2e <HAL_GPIO_Init+0x1fa>
 8004d18:	2306      	movs	r3, #6
 8004d1a:	e008      	b.n	8004d2e <HAL_GPIO_Init+0x1fa>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	e006      	b.n	8004d2e <HAL_GPIO_Init+0x1fa>
 8004d20:	2303      	movs	r3, #3
 8004d22:	e004      	b.n	8004d2e <HAL_GPIO_Init+0x1fa>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e002      	b.n	8004d2e <HAL_GPIO_Init+0x1fa>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_GPIO_Init+0x1fa>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	f002 0203 	and.w	r2, r2, #3
 8004d34:	0092      	lsls	r2, r2, #2
 8004d36:	4093      	lsls	r3, r2
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d3e:	4937      	ldr	r1, [pc, #220]	@ (8004e1c <HAL_GPIO_Init+0x2e8>)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	3302      	adds	r3, #2
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d4c:	4b39      	ldr	r3, [pc, #228]	@ (8004e34 <HAL_GPIO_Init+0x300>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	43db      	mvns	r3, r3
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d70:	4a30      	ldr	r2, [pc, #192]	@ (8004e34 <HAL_GPIO_Init+0x300>)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d76:	4b2f      	ldr	r3, [pc, #188]	@ (8004e34 <HAL_GPIO_Init+0x300>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d9a:	4a26      	ldr	r2, [pc, #152]	@ (8004e34 <HAL_GPIO_Init+0x300>)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004da0:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <HAL_GPIO_Init+0x300>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	43db      	mvns	r3, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e34 <HAL_GPIO_Init+0x300>)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004dca:	4b1a      	ldr	r3, [pc, #104]	@ (8004e34 <HAL_GPIO_Init+0x300>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dee:	4a11      	ldr	r2, [pc, #68]	@ (8004e34 <HAL_GPIO_Init+0x300>)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	3301      	adds	r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	fa22 f303 	lsr.w	r3, r2, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f47f ae9d 	bne.w	8004b44 <HAL_GPIO_Init+0x10>
  }
}
 8004e0a:	bf00      	nop
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	48000400 	.word	0x48000400
 8004e24:	48000800 	.word	0x48000800
 8004e28:	48000c00 	.word	0x48000c00
 8004e2c:	48001000 	.word	0x48001000
 8004e30:	48001400 	.word	0x48001400
 8004e34:	40010400 	.word	0x40010400

08004e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	807b      	strh	r3, [r7, #2]
 8004e44:	4613      	mov	r3, r2
 8004e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e48:	787b      	ldrb	r3, [r7, #1]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e4e:	887a      	ldrh	r2, [r7, #2]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e54:	e002      	b.n	8004e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e56:	887a      	ldrh	r2, [r7, #2]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e7a:	887a      	ldrh	r2, [r7, #2]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	041a      	lsls	r2, r3, #16
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	43d9      	mvns	r1, r3
 8004e86:	887b      	ldrh	r3, [r7, #2]
 8004e88:	400b      	ands	r3, r1
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	619a      	str	r2, [r3, #24]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ea6:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	4013      	ands	r3, r2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d006      	beq.n	8004ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004eb2:	4a05      	ldr	r2, [pc, #20]	@ (8004ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004eb4:	88fb      	ldrh	r3, [r7, #6]
 8004eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fd f9f6 	bl	80022ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40010400 	.word	0x40010400

08004ecc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d141      	bne.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eda:	4b4b      	ldr	r3, [pc, #300]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee6:	d131      	bne.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ee8:	4b47      	ldr	r3, [pc, #284]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004eee:	4a46      	ldr	r2, [pc, #280]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ef8:	4b43      	ldr	r3, [pc, #268]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f00:	4a41      	ldr	r2, [pc, #260]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f08:	4b40      	ldr	r3, [pc, #256]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2232      	movs	r2, #50	@ 0x32
 8004f0e:	fb02 f303 	mul.w	r3, r2, r3
 8004f12:	4a3f      	ldr	r2, [pc, #252]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	0c9b      	lsrs	r3, r3, #18
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f1e:	e002      	b.n	8004f26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f26:	4b38      	ldr	r3, [pc, #224]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f32:	d102      	bne.n	8004f3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f2      	bne.n	8004f20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f3a:	4b33      	ldr	r3, [pc, #204]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f46:	d158      	bne.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e057      	b.n	8004ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f52:	4a2d      	ldr	r2, [pc, #180]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004f5c:	e04d      	b.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f64:	d141      	bne.n	8004fea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f66:	4b28      	ldr	r3, [pc, #160]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f72:	d131      	bne.n	8004fd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f74:	4b24      	ldr	r3, [pc, #144]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f7a:	4a23      	ldr	r2, [pc, #140]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f84:	4b20      	ldr	r3, [pc, #128]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f94:	4b1d      	ldr	r3, [pc, #116]	@ (800500c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2232      	movs	r2, #50	@ 0x32
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005010 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	0c9b      	lsrs	r3, r3, #18
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004faa:	e002      	b.n	8004fb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb2:	4b15      	ldr	r3, [pc, #84]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fbe:	d102      	bne.n	8004fc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f2      	bne.n	8004fac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fc6:	4b10      	ldr	r3, [pc, #64]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd2:	d112      	bne.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e011      	b.n	8004ffc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fde:	4a0a      	ldr	r2, [pc, #40]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004fe8:	e007      	b.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fea:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ff2:	4a05      	ldr	r2, [pc, #20]	@ (8005008 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ff8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	40007000 	.word	0x40007000
 800500c:	2000000c 	.word	0x2000000c
 8005010:	431bde83 	.word	0x431bde83

08005014 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005018:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4a04      	ldr	r2, [pc, #16]	@ (8005030 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800501e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005022:	6093      	str	r3, [r2, #8]
}
 8005024:	bf00      	nop
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40007000 	.word	0x40007000

08005034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e2fe      	b.n	8005644 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d075      	beq.n	800513e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005052:	4b97      	ldr	r3, [pc, #604]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800505c:	4b94      	ldr	r3, [pc, #592]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b0c      	cmp	r3, #12
 800506a:	d102      	bne.n	8005072 <HAL_RCC_OscConfig+0x3e>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b03      	cmp	r3, #3
 8005070:	d002      	beq.n	8005078 <HAL_RCC_OscConfig+0x44>
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d10b      	bne.n	8005090 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005078:	4b8d      	ldr	r3, [pc, #564]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d05b      	beq.n	800513c <HAL_RCC_OscConfig+0x108>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d157      	bne.n	800513c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e2d9      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005098:	d106      	bne.n	80050a8 <HAL_RCC_OscConfig+0x74>
 800509a:	4b85      	ldr	r3, [pc, #532]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a84      	ldr	r2, [pc, #528]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e01d      	b.n	80050e4 <HAL_RCC_OscConfig+0xb0>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b0:	d10c      	bne.n	80050cc <HAL_RCC_OscConfig+0x98>
 80050b2:	4b7f      	ldr	r3, [pc, #508]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a7e      	ldr	r2, [pc, #504]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	4b7c      	ldr	r3, [pc, #496]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a7b      	ldr	r2, [pc, #492]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	e00b      	b.n	80050e4 <HAL_RCC_OscConfig+0xb0>
 80050cc:	4b78      	ldr	r3, [pc, #480]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a77      	ldr	r2, [pc, #476]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	4b75      	ldr	r3, [pc, #468]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a74      	ldr	r2, [pc, #464]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80050de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d013      	beq.n	8005114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd fc5c 	bl	80029a8 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f4:	f7fd fc58 	bl	80029a8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	@ 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e29e      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005106:	4b6a      	ldr	r3, [pc, #424]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d0f0      	beq.n	80050f4 <HAL_RCC_OscConfig+0xc0>
 8005112:	e014      	b.n	800513e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005114:	f7fd fc48 	bl	80029a8 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800511c:	f7fd fc44 	bl	80029a8 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b64      	cmp	r3, #100	@ 0x64
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e28a      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800512e:	4b60      	ldr	r3, [pc, #384]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0xe8>
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d075      	beq.n	8005236 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800514a:	4b59      	ldr	r3, [pc, #356]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005154:	4b56      	ldr	r3, [pc, #344]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b0c      	cmp	r3, #12
 8005162:	d102      	bne.n	800516a <HAL_RCC_OscConfig+0x136>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d002      	beq.n	8005170 <HAL_RCC_OscConfig+0x13c>
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b04      	cmp	r3, #4
 800516e:	d11f      	bne.n	80051b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005170:	4b4f      	ldr	r3, [pc, #316]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_RCC_OscConfig+0x154>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e25d      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005188:	4b49      	ldr	r3, [pc, #292]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	061b      	lsls	r3, r3, #24
 8005196:	4946      	ldr	r1, [pc, #280]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005198:	4313      	orrs	r3, r2
 800519a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800519c:	4b45      	ldr	r3, [pc, #276]	@ (80052b4 <HAL_RCC_OscConfig+0x280>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fd fbb5 	bl	8002910 <HAL_InitTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d043      	beq.n	8005234 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e249      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d023      	beq.n	8005200 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051b8:	4b3d      	ldr	r3, [pc, #244]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a3c      	ldr	r2, [pc, #240]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80051be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fd fbf0 	bl	80029a8 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051cc:	f7fd fbec 	bl	80029a8 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e232      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051de:	4b34      	ldr	r3, [pc, #208]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ea:	4b31      	ldr	r3, [pc, #196]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	061b      	lsls	r3, r3, #24
 80051f8:	492d      	ldr	r1, [pc, #180]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	604b      	str	r3, [r1, #4]
 80051fe:	e01a      	b.n	8005236 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005200:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a2a      	ldr	r2, [pc, #168]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005206:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800520a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fd fbcc 	bl	80029a8 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005214:	f7fd fbc8 	bl	80029a8 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e20e      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005226:	4b22      	ldr	r3, [pc, #136]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f0      	bne.n	8005214 <HAL_RCC_OscConfig+0x1e0>
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005234:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d041      	beq.n	80052c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01c      	beq.n	8005284 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800524a:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 800524c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005250:	4a17      	ldr	r2, [pc, #92]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525a:	f7fd fba5 	bl	80029a8 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005262:	f7fd fba1 	bl	80029a8 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e1e7      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005274:	4b0e      	ldr	r3, [pc, #56]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ef      	beq.n	8005262 <HAL_RCC_OscConfig+0x22e>
 8005282:	e020      	b.n	80052c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005284:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 8005286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528a:	4a09      	ldr	r2, [pc, #36]	@ (80052b0 <HAL_RCC_OscConfig+0x27c>)
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fd fb88 	bl	80029a8 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800529a:	e00d      	b.n	80052b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529c:	f7fd fb84 	bl	80029a8 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d906      	bls.n	80052b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e1ca      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
 80052b4:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052b8:	4b8c      	ldr	r3, [pc, #560]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80052ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1ea      	bne.n	800529c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 80a6 	beq.w	8005420 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d4:	2300      	movs	r3, #0
 80052d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052d8:	4b84      	ldr	r3, [pc, #528]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80052da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2b4>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x2b6>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	4b7f      	ldr	r3, [pc, #508]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80052f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f2:	4a7e      	ldr	r2, [pc, #504]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80052f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80052fa:	4b7c      	ldr	r3, [pc, #496]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80052fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005306:	2301      	movs	r3, #1
 8005308:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800530a:	4b79      	ldr	r3, [pc, #484]	@ (80054f0 <HAL_RCC_OscConfig+0x4bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d118      	bne.n	8005348 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005316:	4b76      	ldr	r3, [pc, #472]	@ (80054f0 <HAL_RCC_OscConfig+0x4bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a75      	ldr	r2, [pc, #468]	@ (80054f0 <HAL_RCC_OscConfig+0x4bc>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005322:	f7fd fb41 	bl	80029a8 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532a:	f7fd fb3d 	bl	80029a8 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e183      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533c:	4b6c      	ldr	r3, [pc, #432]	@ (80054f0 <HAL_RCC_OscConfig+0x4bc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d108      	bne.n	8005362 <HAL_RCC_OscConfig+0x32e>
 8005350:	4b66      	ldr	r3, [pc, #408]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005356:	4a65      	ldr	r2, [pc, #404]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005360:	e024      	b.n	80053ac <HAL_RCC_OscConfig+0x378>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b05      	cmp	r3, #5
 8005368:	d110      	bne.n	800538c <HAL_RCC_OscConfig+0x358>
 800536a:	4b60      	ldr	r3, [pc, #384]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005370:	4a5e      	ldr	r2, [pc, #376]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005372:	f043 0304 	orr.w	r3, r3, #4
 8005376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800537a:	4b5c      	ldr	r3, [pc, #368]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 800537c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005380:	4a5a      	ldr	r2, [pc, #360]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800538a:	e00f      	b.n	80053ac <HAL_RCC_OscConfig+0x378>
 800538c:	4b57      	ldr	r3, [pc, #348]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005392:	4a56      	ldr	r2, [pc, #344]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800539c:	4b53      	ldr	r3, [pc, #332]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a2:	4a52      	ldr	r2, [pc, #328]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d016      	beq.n	80053e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fd faf8 	bl	80029a8 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053bc:	f7fd faf4 	bl	80029a8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e138      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d2:	4b46      	ldr	r3, [pc, #280]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0ed      	beq.n	80053bc <HAL_RCC_OscConfig+0x388>
 80053e0:	e015      	b.n	800540e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e2:	f7fd fae1 	bl	80029a8 <HAL_GetTick>
 80053e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e8:	e00a      	b.n	8005400 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ea:	f7fd fadd 	bl	80029a8 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d901      	bls.n	8005400 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e121      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005400:	4b3a      	ldr	r3, [pc, #232]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1ed      	bne.n	80053ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800540e:	7ffb      	ldrb	r3, [r7, #31]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d105      	bne.n	8005420 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005414:	4b35      	ldr	r3, [pc, #212]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005418:	4a34      	ldr	r2, [pc, #208]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800541e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d03c      	beq.n	80054a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01c      	beq.n	800546e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005434:	4b2d      	ldr	r3, [pc, #180]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005436:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800543a:	4a2c      	ldr	r2, [pc, #176]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005444:	f7fd fab0 	bl	80029a8 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800544c:	f7fd faac 	bl	80029a8 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0f2      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800545e:	4b23      	ldr	r3, [pc, #140]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005460:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ef      	beq.n	800544c <HAL_RCC_OscConfig+0x418>
 800546c:	e01b      	b.n	80054a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800546e:	4b1f      	ldr	r3, [pc, #124]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005470:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547e:	f7fd fa93 	bl	80029a8 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005486:	f7fd fa8f 	bl	80029a8 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e0d5      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005498:	4b14      	ldr	r3, [pc, #80]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 800549a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1ef      	bne.n	8005486 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 80c9 	beq.w	8005642 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054b0:	4b0e      	ldr	r3, [pc, #56]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b0c      	cmp	r3, #12
 80054ba:	f000 8083 	beq.w	80055c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d15e      	bne.n	8005584 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c6:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a08      	ldr	r2, [pc, #32]	@ (80054ec <HAL_RCC_OscConfig+0x4b8>)
 80054cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d2:	f7fd fa69 	bl	80029a8 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d8:	e00c      	b.n	80054f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054da:	f7fd fa65 	bl	80029a8 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d905      	bls.n	80054f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e0ab      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f4:	4b55      	ldr	r3, [pc, #340]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ec      	bne.n	80054da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005500:	4b52      	ldr	r3, [pc, #328]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	4b52      	ldr	r3, [pc, #328]	@ (8005650 <HAL_RCC_OscConfig+0x61c>)
 8005506:	4013      	ands	r3, r2
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6a11      	ldr	r1, [r2, #32]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005510:	3a01      	subs	r2, #1
 8005512:	0112      	lsls	r2, r2, #4
 8005514:	4311      	orrs	r1, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800551a:	0212      	lsls	r2, r2, #8
 800551c:	4311      	orrs	r1, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005522:	0852      	lsrs	r2, r2, #1
 8005524:	3a01      	subs	r2, #1
 8005526:	0552      	lsls	r2, r2, #21
 8005528:	4311      	orrs	r1, r2
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800552e:	0852      	lsrs	r2, r2, #1
 8005530:	3a01      	subs	r2, #1
 8005532:	0652      	lsls	r2, r2, #25
 8005534:	4311      	orrs	r1, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800553a:	06d2      	lsls	r2, r2, #27
 800553c:	430a      	orrs	r2, r1
 800553e:	4943      	ldr	r1, [pc, #268]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 8005540:	4313      	orrs	r3, r2
 8005542:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005544:	4b41      	ldr	r3, [pc, #260]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a40      	ldr	r2, [pc, #256]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 800554a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800554e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005550:	4b3e      	ldr	r3, [pc, #248]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4a3d      	ldr	r2, [pc, #244]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 8005556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800555a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fd fa24 	bl	80029a8 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005564:	f7fd fa20 	bl	80029a8 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e066      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005576:	4b35      	ldr	r3, [pc, #212]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0x530>
 8005582:	e05e      	b.n	8005642 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005584:	4b31      	ldr	r3, [pc, #196]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a30      	ldr	r2, [pc, #192]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 800558a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800558e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fd fa0a 	bl	80029a8 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005598:	f7fd fa06 	bl	80029a8 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e04c      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055aa:	4b28      	ldr	r3, [pc, #160]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055b6:	4b25      	ldr	r3, [pc, #148]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	4924      	ldr	r1, [pc, #144]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 80055bc:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <HAL_RCC_OscConfig+0x620>)
 80055be:	4013      	ands	r3, r2
 80055c0:	60cb      	str	r3, [r1, #12]
 80055c2:	e03e      	b.n	8005642 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e039      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055d0:	4b1e      	ldr	r3, [pc, #120]	@ (800564c <HAL_RCC_OscConfig+0x618>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 0203 	and.w	r2, r3, #3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d12c      	bne.n	800563e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ee:	3b01      	subs	r3, #1
 80055f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d123      	bne.n	800563e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005602:	429a      	cmp	r2, r3
 8005604:	d11b      	bne.n	800563e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005610:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005612:	429a      	cmp	r2, r3
 8005614:	d113      	bne.n	800563e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	3b01      	subs	r3, #1
 8005624:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d109      	bne.n	800563e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	3b01      	subs	r3, #1
 8005638:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800563a:	429a      	cmp	r2, r3
 800563c:	d001      	beq.n	8005642 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3720      	adds	r7, #32
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40021000 	.word	0x40021000
 8005650:	019f800c 	.word	0x019f800c
 8005654:	feeefffc 	.word	0xfeeefffc

08005658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e11e      	b.n	80058ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005670:	4b91      	ldr	r3, [pc, #580]	@ (80058b8 <HAL_RCC_ClockConfig+0x260>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d910      	bls.n	80056a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567e:	4b8e      	ldr	r3, [pc, #568]	@ (80058b8 <HAL_RCC_ClockConfig+0x260>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 020f 	bic.w	r2, r3, #15
 8005686:	498c      	ldr	r1, [pc, #560]	@ (80058b8 <HAL_RCC_ClockConfig+0x260>)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800568e:	4b8a      	ldr	r3, [pc, #552]	@ (80058b8 <HAL_RCC_ClockConfig+0x260>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e106      	b.n	80058ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d073      	beq.n	8005794 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d129      	bne.n	8005708 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b4:	4b81      	ldr	r3, [pc, #516]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0f4      	b.n	80058ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056c4:	f000 f99e 	bl	8005a04 <RCC_GetSysClockFreqFromPLLSource>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4a7c      	ldr	r2, [pc, #496]	@ (80058c0 <HAL_RCC_ClockConfig+0x268>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d93f      	bls.n	8005752 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056d2:	4b7a      	ldr	r3, [pc, #488]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d033      	beq.n	8005752 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d12f      	bne.n	8005752 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056f2:	4b72      	ldr	r3, [pc, #456]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056fa:	4a70      	ldr	r2, [pc, #448]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80056fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005700:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005702:	2380      	movs	r3, #128	@ 0x80
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	e024      	b.n	8005752 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d107      	bne.n	8005720 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005710:	4b6a      	ldr	r3, [pc, #424]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0c6      	b.n	80058ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005720:	4b66      	ldr	r3, [pc, #408]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0be      	b.n	80058ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005730:	f000 f8ce 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 8005734:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4a61      	ldr	r2, [pc, #388]	@ (80058c0 <HAL_RCC_ClockConfig+0x268>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d909      	bls.n	8005752 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800573e:	4b5f      	ldr	r3, [pc, #380]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005746:	4a5d      	ldr	r2, [pc, #372]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800574c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800574e:	2380      	movs	r3, #128	@ 0x80
 8005750:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005752:	4b5a      	ldr	r3, [pc, #360]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4957      	ldr	r1, [pc, #348]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005764:	f7fd f920 	bl	80029a8 <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	e00a      	b.n	8005782 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576c:	f7fd f91c 	bl	80029a8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e095      	b.n	80058ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	4b4e      	ldr	r3, [pc, #312]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 020c 	and.w	r2, r3, #12
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	429a      	cmp	r2, r3
 8005792:	d1eb      	bne.n	800576c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d023      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057ac:	4b43      	ldr	r3, [pc, #268]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4a42      	ldr	r2, [pc, #264]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80057b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0308 	and.w	r3, r3, #8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d007      	beq.n	80057d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057c4:	4b3d      	ldr	r3, [pc, #244]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80057cc:	4a3b      	ldr	r2, [pc, #236]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80057ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80057d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057d4:	4b39      	ldr	r3, [pc, #228]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4936      	ldr	r1, [pc, #216]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
 80057e6:	e008      	b.n	80057fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2b80      	cmp	r3, #128	@ 0x80
 80057ec:	d105      	bne.n	80057fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057ee:	4b33      	ldr	r3, [pc, #204]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	4a32      	ldr	r2, [pc, #200]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 80057f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057fa:	4b2f      	ldr	r3, [pc, #188]	@ (80058b8 <HAL_RCC_ClockConfig+0x260>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d21d      	bcs.n	8005844 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005808:	4b2b      	ldr	r3, [pc, #172]	@ (80058b8 <HAL_RCC_ClockConfig+0x260>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 020f 	bic.w	r2, r3, #15
 8005810:	4929      	ldr	r1, [pc, #164]	@ (80058b8 <HAL_RCC_ClockConfig+0x260>)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	4313      	orrs	r3, r2
 8005816:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005818:	f7fd f8c6 	bl	80029a8 <HAL_GetTick>
 800581c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800581e:	e00a      	b.n	8005836 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005820:	f7fd f8c2 	bl	80029a8 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e03b      	b.n	80058ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005836:	4b20      	ldr	r3, [pc, #128]	@ (80058b8 <HAL_RCC_ClockConfig+0x260>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d1ed      	bne.n	8005820 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4917      	ldr	r1, [pc, #92]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800586e:	4b13      	ldr	r3, [pc, #76]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	490f      	ldr	r1, [pc, #60]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005882:	f000 f825 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 8005886:	4602      	mov	r2, r0
 8005888:	4b0c      	ldr	r3, [pc, #48]	@ (80058bc <HAL_RCC_ClockConfig+0x264>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	091b      	lsrs	r3, r3, #4
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	490c      	ldr	r1, [pc, #48]	@ (80058c4 <HAL_RCC_ClockConfig+0x26c>)
 8005894:	5ccb      	ldrb	r3, [r1, r3]
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	4a0a      	ldr	r2, [pc, #40]	@ (80058c8 <HAL_RCC_ClockConfig+0x270>)
 80058a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058a2:	4b0a      	ldr	r3, [pc, #40]	@ (80058cc <HAL_RCC_ClockConfig+0x274>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fd f832 	bl	8002910 <HAL_InitTick>
 80058ac:	4603      	mov	r3, r0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	40022000 	.word	0x40022000
 80058bc:	40021000 	.word	0x40021000
 80058c0:	04c4b400 	.word	0x04c4b400
 80058c4:	08009914 	.word	0x08009914
 80058c8:	2000000c 	.word	0x2000000c
 80058cc:	20000010 	.word	0x20000010

080058d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 030c 	and.w	r3, r3, #12
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d102      	bne.n	80058e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058e2:	4b2a      	ldr	r3, [pc, #168]	@ (800598c <HAL_RCC_GetSysClockFreq+0xbc>)
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	e047      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058e8:	4b27      	ldr	r3, [pc, #156]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 030c 	and.w	r3, r3, #12
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d102      	bne.n	80058fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058f4:	4b26      	ldr	r3, [pc, #152]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xc0>)
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	e03e      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058fa:	4b23      	ldr	r3, [pc, #140]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 030c 	and.w	r3, r3, #12
 8005902:	2b0c      	cmp	r3, #12
 8005904:	d136      	bne.n	8005974 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005906:	4b20      	ldr	r3, [pc, #128]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f003 0303 	and.w	r3, r3, #3
 800590e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005910:	4b1d      	ldr	r3, [pc, #116]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	3301      	adds	r3, #1
 800591c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b03      	cmp	r3, #3
 8005922:	d10c      	bne.n	800593e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005924:	4a1a      	ldr	r2, [pc, #104]	@ (8005990 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	4a16      	ldr	r2, [pc, #88]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800592e:	68d2      	ldr	r2, [r2, #12]
 8005930:	0a12      	lsrs	r2, r2, #8
 8005932:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	617b      	str	r3, [r7, #20]
      break;
 800593c:	e00c      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800593e:	4a13      	ldr	r2, [pc, #76]	@ (800598c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	fbb2 f3f3 	udiv	r3, r2, r3
 8005946:	4a10      	ldr	r2, [pc, #64]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005948:	68d2      	ldr	r2, [r2, #12]
 800594a:	0a12      	lsrs	r2, r2, #8
 800594c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005950:	fb02 f303 	mul.w	r3, r2, r3
 8005954:	617b      	str	r3, [r7, #20]
      break;
 8005956:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005958:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xb8>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	0e5b      	lsrs	r3, r3, #25
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	3301      	adds	r3, #1
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	e001      	b.n	8005978 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005978:	693b      	ldr	r3, [r7, #16]
}
 800597a:	4618      	mov	r0, r3
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40021000 	.word	0x40021000
 800598c:	00f42400 	.word	0x00f42400
 8005990:	016e3600 	.word	0x016e3600

08005994 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005998:	4b03      	ldr	r3, [pc, #12]	@ (80059a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800599a:	681b      	ldr	r3, [r3, #0]
}
 800599c:	4618      	mov	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	2000000c 	.word	0x2000000c

080059ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059b0:	f7ff fff0 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 80059b4:	4602      	mov	r2, r0
 80059b6:	4b06      	ldr	r3, [pc, #24]	@ (80059d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	0a1b      	lsrs	r3, r3, #8
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	4904      	ldr	r1, [pc, #16]	@ (80059d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059c2:	5ccb      	ldrb	r3, [r1, r3]
 80059c4:	f003 031f 	and.w	r3, r3, #31
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40021000 	.word	0x40021000
 80059d4:	08009924 	.word	0x08009924

080059d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059dc:	f7ff ffda 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	0adb      	lsrs	r3, r3, #11
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	4904      	ldr	r1, [pc, #16]	@ (8005a00 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ee:	5ccb      	ldrb	r3, [r1, r3]
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40021000 	.word	0x40021000
 8005a00:	08009924 	.word	0x08009924

08005a04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a14:	4b1b      	ldr	r3, [pc, #108]	@ (8005a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	091b      	lsrs	r3, r3, #4
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d10c      	bne.n	8005a42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a28:	4a17      	ldr	r2, [pc, #92]	@ (8005a88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	4a14      	ldr	r2, [pc, #80]	@ (8005a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a32:	68d2      	ldr	r2, [r2, #12]
 8005a34:	0a12      	lsrs	r2, r2, #8
 8005a36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	617b      	str	r3, [r7, #20]
    break;
 8005a40:	e00c      	b.n	8005a5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a42:	4a12      	ldr	r2, [pc, #72]	@ (8005a8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8005a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a4c:	68d2      	ldr	r2, [r2, #12]
 8005a4e:	0a12      	lsrs	r2, r2, #8
 8005a50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
    break;
 8005a5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a5c:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	0e5b      	lsrs	r3, r3, #25
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	3301      	adds	r3, #1
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a76:	687b      	ldr	r3, [r7, #4]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	40021000 	.word	0x40021000
 8005a88:	016e3600 	.word	0x016e3600
 8005a8c:	00f42400 	.word	0x00f42400

08005a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a98:	2300      	movs	r3, #0
 8005a9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8098 	beq.w	8005bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ab2:	4b43      	ldr	r3, [pc, #268]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005abe:	4b40      	ldr	r3, [pc, #256]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac2:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aca:	4b3d      	ldr	r3, [pc, #244]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad2:	60bb      	str	r3, [r7, #8]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ada:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a39      	ldr	r2, [pc, #228]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ae6:	f7fc ff5f 	bl	80029a8 <HAL_GetTick>
 8005aea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aec:	e009      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aee:	f7fc ff5b 	bl	80029a8 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d902      	bls.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	74fb      	strb	r3, [r7, #19]
        break;
 8005b00:	e005      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b02:	4b30      	ldr	r3, [pc, #192]	@ (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0ef      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b0e:	7cfb      	ldrb	r3, [r7, #19]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d159      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b14:	4b2a      	ldr	r3, [pc, #168]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b1e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d01e      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d019      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b30:	4b23      	ldr	r3, [pc, #140]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b3c:	4b20      	ldr	r3, [pc, #128]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b42:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b52:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b5c:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d016      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6e:	f7fc ff1b 	bl	80029a8 <HAL_GetTick>
 8005b72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b74:	e00b      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fc ff17 	bl	80029a8 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d902      	bls.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	74fb      	strb	r3, [r7, #19]
            break;
 8005b8c:	e006      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0ec      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b9c:	7cfb      	ldrb	r3, [r7, #19]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ba2:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb0:	4903      	ldr	r1, [pc, #12]	@ (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005bb8:	e008      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bba:	7cfb      	ldrb	r3, [r7, #19]
 8005bbc:	74bb      	strb	r3, [r7, #18]
 8005bbe:	e005      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	7cfb      	ldrb	r3, [r7, #19]
 8005bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bcc:	7c7b      	ldrb	r3, [r7, #17]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd2:	4ba7      	ldr	r3, [pc, #668]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd6:	4aa6      	ldr	r2, [pc, #664]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bdc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00a      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bea:	4ba1      	ldr	r3, [pc, #644]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf0:	f023 0203 	bic.w	r2, r3, #3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	499d      	ldr	r1, [pc, #628]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c0c:	4b98      	ldr	r3, [pc, #608]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c12:	f023 020c 	bic.w	r2, r3, #12
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4995      	ldr	r1, [pc, #596]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c2e:	4b90      	ldr	r3, [pc, #576]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	498c      	ldr	r1, [pc, #560]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00a      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c50:	4b87      	ldr	r3, [pc, #540]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	4984      	ldr	r1, [pc, #528]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c72:	4b7f      	ldr	r3, [pc, #508]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	497b      	ldr	r1, [pc, #492]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c94:	4b76      	ldr	r3, [pc, #472]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	4973      	ldr	r1, [pc, #460]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cbc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	496a      	ldr	r1, [pc, #424]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cd8:	4b65      	ldr	r3, [pc, #404]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cde:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	4962      	ldr	r1, [pc, #392]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	4959      	ldr	r1, [pc, #356]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d1c:	4b54      	ldr	r3, [pc, #336]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d22:	f023 0203 	bic.w	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2a:	4951      	ldr	r1, [pc, #324]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	4948      	ldr	r1, [pc, #288]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d015      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d60:	4b43      	ldr	r3, [pc, #268]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6e:	4940      	ldr	r1, [pc, #256]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d80:	4b3b      	ldr	r3, [pc, #236]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4a3a      	ldr	r2, [pc, #232]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d015      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d98:	4b35      	ldr	r3, [pc, #212]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da6:	4932      	ldr	r1, [pc, #200]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005db6:	d105      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db8:	4b2d      	ldr	r3, [pc, #180]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dc2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dd0:	4b27      	ldr	r3, [pc, #156]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	4924      	ldr	r1, [pc, #144]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dee:	d105      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df0:	4b1f      	ldr	r3, [pc, #124]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dfa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d015      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e08:	4b19      	ldr	r3, [pc, #100]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e16:	4916      	ldr	r1, [pc, #88]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e26:	d105      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e28:	4b11      	ldr	r3, [pc, #68]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a10      	ldr	r2, [pc, #64]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d019      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e40:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	4908      	ldr	r1, [pc, #32]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e5e:	d109      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e60:	4b03      	ldr	r3, [pc, #12]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a02      	ldr	r2, [pc, #8]	@ (8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e6a:	60d3      	str	r3, [r2, #12]
 8005e6c:	e002      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e6e:	bf00      	nop
 8005e70:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d015      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e80:	4b29      	ldr	r3, [pc, #164]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	4926      	ldr	r1, [pc, #152]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e9e:	d105      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ea0:	4b21      	ldr	r3, [pc, #132]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eaa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d015      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ebe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ec6:	4918      	ldr	r1, [pc, #96]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed6:	d105      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ed8:	4b13      	ldr	r3, [pc, #76]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4a12      	ldr	r2, [pc, #72]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ef6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005efe:	490a      	ldr	r1, [pc, #40]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f0e:	d105      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f10:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4a04      	ldr	r2, [pc, #16]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000

08005f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e049      	b.n	8005fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fc fafc 	bl	8002550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 fd6e 	bl	8006a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d001      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e04c      	b.n	800608e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a26      	ldr	r2, [pc, #152]	@ (800609c <HAL_TIM_Base_Start+0xc0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d022      	beq.n	800604c <HAL_TIM_Base_Start+0x70>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800600e:	d01d      	beq.n	800604c <HAL_TIM_Base_Start+0x70>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a22      	ldr	r2, [pc, #136]	@ (80060a0 <HAL_TIM_Base_Start+0xc4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d018      	beq.n	800604c <HAL_TIM_Base_Start+0x70>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a21      	ldr	r2, [pc, #132]	@ (80060a4 <HAL_TIM_Base_Start+0xc8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d013      	beq.n	800604c <HAL_TIM_Base_Start+0x70>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1f      	ldr	r2, [pc, #124]	@ (80060a8 <HAL_TIM_Base_Start+0xcc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00e      	beq.n	800604c <HAL_TIM_Base_Start+0x70>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1e      	ldr	r2, [pc, #120]	@ (80060ac <HAL_TIM_Base_Start+0xd0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d009      	beq.n	800604c <HAL_TIM_Base_Start+0x70>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1c      	ldr	r2, [pc, #112]	@ (80060b0 <HAL_TIM_Base_Start+0xd4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_TIM_Base_Start+0x70>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1b      	ldr	r2, [pc, #108]	@ (80060b4 <HAL_TIM_Base_Start+0xd8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d115      	bne.n	8006078 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	4b19      	ldr	r3, [pc, #100]	@ (80060b8 <HAL_TIM_Base_Start+0xdc>)
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b06      	cmp	r3, #6
 800605c:	d015      	beq.n	800608a <HAL_TIM_Base_Start+0xae>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006064:	d011      	beq.n	800608a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f042 0201 	orr.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006076:	e008      	b.n	800608a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	e000      	b.n	800608c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40013400 	.word	0x40013400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40015000 	.word	0x40015000
 80060b8:	00010007 	.word	0x00010007

080060bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e049      	b.n	8006162 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fa16 	bl	8002514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f000 fca6 	bl	8006a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <HAL_TIM_PWM_Start+0x24>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b01      	cmp	r3, #1
 8006186:	bf14      	ite	ne
 8006188:	2301      	movne	r3, #1
 800618a:	2300      	moveq	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	e03c      	b.n	800620a <HAL_TIM_PWM_Start+0x9e>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b04      	cmp	r3, #4
 8006194:	d109      	bne.n	80061aa <HAL_TIM_PWM_Start+0x3e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	bf14      	ite	ne
 80061a2:	2301      	movne	r3, #1
 80061a4:	2300      	moveq	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e02f      	b.n	800620a <HAL_TIM_PWM_Start+0x9e>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d109      	bne.n	80061c4 <HAL_TIM_PWM_Start+0x58>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e022      	b.n	800620a <HAL_TIM_PWM_Start+0x9e>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b0c      	cmp	r3, #12
 80061c8:	d109      	bne.n	80061de <HAL_TIM_PWM_Start+0x72>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	bf14      	ite	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	2300      	moveq	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	e015      	b.n	800620a <HAL_TIM_PWM_Start+0x9e>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d109      	bne.n	80061f8 <HAL_TIM_PWM_Start+0x8c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e008      	b.n	800620a <HAL_TIM_PWM_Start+0x9e>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e0a6      	b.n	8006360 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <HAL_TIM_PWM_Start+0xb6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006220:	e023      	b.n	800626a <HAL_TIM_PWM_Start+0xfe>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b04      	cmp	r3, #4
 8006226:	d104      	bne.n	8006232 <HAL_TIM_PWM_Start+0xc6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006230:	e01b      	b.n	800626a <HAL_TIM_PWM_Start+0xfe>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b08      	cmp	r3, #8
 8006236:	d104      	bne.n	8006242 <HAL_TIM_PWM_Start+0xd6>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006240:	e013      	b.n	800626a <HAL_TIM_PWM_Start+0xfe>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b0c      	cmp	r3, #12
 8006246:	d104      	bne.n	8006252 <HAL_TIM_PWM_Start+0xe6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006250:	e00b      	b.n	800626a <HAL_TIM_PWM_Start+0xfe>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b10      	cmp	r3, #16
 8006256:	d104      	bne.n	8006262 <HAL_TIM_PWM_Start+0xf6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006260:	e003      	b.n	800626a <HAL_TIM_PWM_Start+0xfe>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2202      	movs	r2, #2
 8006266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2201      	movs	r2, #1
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f001 f864 	bl	8007340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a3a      	ldr	r2, [pc, #232]	@ (8006368 <HAL_TIM_PWM_Start+0x1fc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_TIM_PWM_Start+0x148>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a39      	ldr	r2, [pc, #228]	@ (800636c <HAL_TIM_PWM_Start+0x200>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <HAL_TIM_PWM_Start+0x148>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a37      	ldr	r2, [pc, #220]	@ (8006370 <HAL_TIM_PWM_Start+0x204>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_TIM_PWM_Start+0x148>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a36      	ldr	r2, [pc, #216]	@ (8006374 <HAL_TIM_PWM_Start+0x208>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_TIM_PWM_Start+0x148>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a34      	ldr	r2, [pc, #208]	@ (8006378 <HAL_TIM_PWM_Start+0x20c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIM_PWM_Start+0x148>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a33      	ldr	r2, [pc, #204]	@ (800637c <HAL_TIM_PWM_Start+0x210>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d101      	bne.n	80062b8 <HAL_TIM_PWM_Start+0x14c>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <HAL_TIM_PWM_Start+0x14e>
 80062b8:	2300      	movs	r3, #0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a25      	ldr	r2, [pc, #148]	@ (8006368 <HAL_TIM_PWM_Start+0x1fc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d022      	beq.n	800631e <HAL_TIM_PWM_Start+0x1b2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e0:	d01d      	beq.n	800631e <HAL_TIM_PWM_Start+0x1b2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a26      	ldr	r2, [pc, #152]	@ (8006380 <HAL_TIM_PWM_Start+0x214>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d018      	beq.n	800631e <HAL_TIM_PWM_Start+0x1b2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a24      	ldr	r2, [pc, #144]	@ (8006384 <HAL_TIM_PWM_Start+0x218>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d013      	beq.n	800631e <HAL_TIM_PWM_Start+0x1b2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a23      	ldr	r2, [pc, #140]	@ (8006388 <HAL_TIM_PWM_Start+0x21c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00e      	beq.n	800631e <HAL_TIM_PWM_Start+0x1b2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a19      	ldr	r2, [pc, #100]	@ (800636c <HAL_TIM_PWM_Start+0x200>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d009      	beq.n	800631e <HAL_TIM_PWM_Start+0x1b2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a18      	ldr	r2, [pc, #96]	@ (8006370 <HAL_TIM_PWM_Start+0x204>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_TIM_PWM_Start+0x1b2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a18      	ldr	r2, [pc, #96]	@ (800637c <HAL_TIM_PWM_Start+0x210>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d115      	bne.n	800634a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	4b19      	ldr	r3, [pc, #100]	@ (800638c <HAL_TIM_PWM_Start+0x220>)
 8006326:	4013      	ands	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b06      	cmp	r3, #6
 800632e:	d015      	beq.n	800635c <HAL_TIM_PWM_Start+0x1f0>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006336:	d011      	beq.n	800635c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f042 0201 	orr.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006348:	e008      	b.n	800635c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f042 0201 	orr.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	e000      	b.n	800635e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800635c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40013400 	.word	0x40013400
 8006370:	40014000 	.word	0x40014000
 8006374:	40014400 	.word	0x40014400
 8006378:	40014800 	.word	0x40014800
 800637c:	40015000 	.word	0x40015000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	00010007 	.word	0x00010007

08006390 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e097      	b.n	80064d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fc f925 	bl	8002608 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80063d4:	f023 0307 	bic.w	r3, r3, #7
 80063d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f000 fb31 	bl	8006a4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006412:	f023 0303 	bic.w	r3, r3, #3
 8006416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	4313      	orrs	r3, r2
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006430:	f023 030c 	bic.w	r3, r3, #12
 8006434:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800643c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	4313      	orrs	r3, r2
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	011a      	lsls	r2, r3, #4
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	031b      	lsls	r3, r3, #12
 8006460:	4313      	orrs	r3, r2
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800646e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006476:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	4313      	orrs	r3, r2
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006504:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d110      	bne.n	800652e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d102      	bne.n	8006518 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006512:	7b7b      	ldrb	r3, [r7, #13]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d001      	beq.n	800651c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e069      	b.n	80065f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800652c:	e031      	b.n	8006592 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b04      	cmp	r3, #4
 8006532:	d110      	bne.n	8006556 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d102      	bne.n	8006540 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800653a:	7b3b      	ldrb	r3, [r7, #12]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d001      	beq.n	8006544 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e055      	b.n	80065f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006554:	e01d      	b.n	8006592 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006556:	7bfb      	ldrb	r3, [r7, #15]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d108      	bne.n	800656e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d105      	bne.n	800656e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006562:	7b7b      	ldrb	r3, [r7, #13]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d102      	bne.n	800656e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006568:	7b3b      	ldrb	r3, [r7, #12]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d001      	beq.n	8006572 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e03e      	b.n	80065f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2202      	movs	r2, #2
 800658e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <HAL_TIM_Encoder_Start+0xc4>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	2b04      	cmp	r3, #4
 800659c:	d008      	beq.n	80065b0 <HAL_TIM_Encoder_Start+0xd4>
 800659e:	e00f      	b.n	80065c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2201      	movs	r2, #1
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fec9 	bl	8007340 <TIM_CCxChannelCmd>
      break;
 80065ae:	e016      	b.n	80065de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2201      	movs	r2, #1
 80065b6:	2104      	movs	r1, #4
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fec1 	bl	8007340 <TIM_CCxChannelCmd>
      break;
 80065be:	e00e      	b.n	80065de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	2100      	movs	r1, #0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 feb9 	bl	8007340 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2201      	movs	r2, #1
 80065d4:	2104      	movs	r1, #4
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 feb2 	bl	8007340 <TIM_CCxChannelCmd>
      break;
 80065dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006612:	2302      	movs	r3, #2
 8006614:	e0ff      	b.n	8006816 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b14      	cmp	r3, #20
 8006622:	f200 80f0 	bhi.w	8006806 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006626:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	08006681 	.word	0x08006681
 8006630:	08006807 	.word	0x08006807
 8006634:	08006807 	.word	0x08006807
 8006638:	08006807 	.word	0x08006807
 800663c:	080066c1 	.word	0x080066c1
 8006640:	08006807 	.word	0x08006807
 8006644:	08006807 	.word	0x08006807
 8006648:	08006807 	.word	0x08006807
 800664c:	08006703 	.word	0x08006703
 8006650:	08006807 	.word	0x08006807
 8006654:	08006807 	.word	0x08006807
 8006658:	08006807 	.word	0x08006807
 800665c:	08006743 	.word	0x08006743
 8006660:	08006807 	.word	0x08006807
 8006664:	08006807 	.word	0x08006807
 8006668:	08006807 	.word	0x08006807
 800666c:	08006785 	.word	0x08006785
 8006670:	08006807 	.word	0x08006807
 8006674:	08006807 	.word	0x08006807
 8006678:	08006807 	.word	0x08006807
 800667c:	080067c5 	.word	0x080067c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68b9      	ldr	r1, [r7, #8]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fa94 	bl	8006bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f042 0208 	orr.w	r2, r2, #8
 800669a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0204 	bic.w	r2, r2, #4
 80066aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6999      	ldr	r1, [r3, #24]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	619a      	str	r2, [r3, #24]
      break;
 80066be:	e0a5      	b.n	800680c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68b9      	ldr	r1, [r7, #8]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fb0e 	bl	8006ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6999      	ldr	r1, [r3, #24]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	021a      	lsls	r2, r3, #8
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	619a      	str	r2, [r3, #24]
      break;
 8006700:	e084      	b.n	800680c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fb81 	bl	8006e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0208 	orr.w	r2, r2, #8
 800671c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0204 	bic.w	r2, r2, #4
 800672c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69d9      	ldr	r1, [r3, #28]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	61da      	str	r2, [r3, #28]
      break;
 8006740:	e064      	b.n	800680c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fbf3 	bl	8006f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800675c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69da      	ldr	r2, [r3, #28]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800676c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69d9      	ldr	r1, [r3, #28]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	021a      	lsls	r2, r3, #8
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	61da      	str	r2, [r3, #28]
      break;
 8006782:	e043      	b.n	800680c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fc66 	bl	800705c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0208 	orr.w	r2, r2, #8
 800679e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0204 	bic.w	r2, r2, #4
 80067ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80067c2:	e023      	b.n	800680c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fcb0 	bl	8007130 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	021a      	lsls	r2, r3, #8
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006804:	e002      	b.n	800680c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]
      break;
 800680a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop

08006820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_TIM_ConfigClockSource+0x1c>
 8006838:	2302      	movs	r3, #2
 800683a:	e0f6      	b.n	8006a2a <HAL_TIM_ConfigClockSource+0x20a>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800685a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800685e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a6f      	ldr	r2, [pc, #444]	@ (8006a34 <HAL_TIM_ConfigClockSource+0x214>)
 8006876:	4293      	cmp	r3, r2
 8006878:	f000 80c1 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 800687c:	4a6d      	ldr	r2, [pc, #436]	@ (8006a34 <HAL_TIM_ConfigClockSource+0x214>)
 800687e:	4293      	cmp	r3, r2
 8006880:	f200 80c6 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006884:	4a6c      	ldr	r2, [pc, #432]	@ (8006a38 <HAL_TIM_ConfigClockSource+0x218>)
 8006886:	4293      	cmp	r3, r2
 8006888:	f000 80b9 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 800688c:	4a6a      	ldr	r2, [pc, #424]	@ (8006a38 <HAL_TIM_ConfigClockSource+0x218>)
 800688e:	4293      	cmp	r3, r2
 8006890:	f200 80be 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006894:	4a69      	ldr	r2, [pc, #420]	@ (8006a3c <HAL_TIM_ConfigClockSource+0x21c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	f000 80b1 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 800689c:	4a67      	ldr	r2, [pc, #412]	@ (8006a3c <HAL_TIM_ConfigClockSource+0x21c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	f200 80b6 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80068a4:	4a66      	ldr	r2, [pc, #408]	@ (8006a40 <HAL_TIM_ConfigClockSource+0x220>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	f000 80a9 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 80068ac:	4a64      	ldr	r2, [pc, #400]	@ (8006a40 <HAL_TIM_ConfigClockSource+0x220>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	f200 80ae 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80068b4:	4a63      	ldr	r2, [pc, #396]	@ (8006a44 <HAL_TIM_ConfigClockSource+0x224>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	f000 80a1 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 80068bc:	4a61      	ldr	r2, [pc, #388]	@ (8006a44 <HAL_TIM_ConfigClockSource+0x224>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	f200 80a6 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80068c4:	4a60      	ldr	r2, [pc, #384]	@ (8006a48 <HAL_TIM_ConfigClockSource+0x228>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	f000 8099 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 80068cc:	4a5e      	ldr	r2, [pc, #376]	@ (8006a48 <HAL_TIM_ConfigClockSource+0x228>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	f200 809e 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80068d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068d8:	f000 8091 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 80068dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80068e0:	f200 8096 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80068e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e8:	f000 8089 	beq.w	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 80068ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068f0:	f200 808e 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 80068f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068f8:	d03e      	beq.n	8006978 <HAL_TIM_ConfigClockSource+0x158>
 80068fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068fe:	f200 8087 	bhi.w	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006906:	f000 8086 	beq.w	8006a16 <HAL_TIM_ConfigClockSource+0x1f6>
 800690a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690e:	d87f      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006910:	2b70      	cmp	r3, #112	@ 0x70
 8006912:	d01a      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x12a>
 8006914:	2b70      	cmp	r3, #112	@ 0x70
 8006916:	d87b      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006918:	2b60      	cmp	r3, #96	@ 0x60
 800691a:	d050      	beq.n	80069be <HAL_TIM_ConfigClockSource+0x19e>
 800691c:	2b60      	cmp	r3, #96	@ 0x60
 800691e:	d877      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006920:	2b50      	cmp	r3, #80	@ 0x50
 8006922:	d03c      	beq.n	800699e <HAL_TIM_ConfigClockSource+0x17e>
 8006924:	2b50      	cmp	r3, #80	@ 0x50
 8006926:	d873      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	d058      	beq.n	80069de <HAL_TIM_ConfigClockSource+0x1be>
 800692c:	2b40      	cmp	r3, #64	@ 0x40
 800692e:	d86f      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006930:	2b30      	cmp	r3, #48	@ 0x30
 8006932:	d064      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 8006934:	2b30      	cmp	r3, #48	@ 0x30
 8006936:	d86b      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006938:	2b20      	cmp	r3, #32
 800693a:	d060      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 800693c:	2b20      	cmp	r3, #32
 800693e:	d867      	bhi.n	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d05c      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 8006944:	2b10      	cmp	r3, #16
 8006946:	d05a      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x1de>
 8006948:	e062      	b.n	8006a10 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800695a:	f000 fcd1 	bl	8007300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800696c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68ba      	ldr	r2, [r7, #8]
 8006974:	609a      	str	r2, [r3, #8]
      break;
 8006976:	e04f      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006988:	f000 fcba 	bl	8007300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800699a:	609a      	str	r2, [r3, #8]
      break;
 800699c:	e03c      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069aa:	461a      	mov	r2, r3
 80069ac:	f000 fc2c 	bl	8007208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2150      	movs	r1, #80	@ 0x50
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fc85 	bl	80072c6 <TIM_ITRx_SetConfig>
      break;
 80069bc:	e02c      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ca:	461a      	mov	r2, r3
 80069cc:	f000 fc4b 	bl	8007266 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2160      	movs	r1, #96	@ 0x60
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fc75 	bl	80072c6 <TIM_ITRx_SetConfig>
      break;
 80069dc:	e01c      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ea:	461a      	mov	r2, r3
 80069ec:	f000 fc0c 	bl	8007208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2140      	movs	r1, #64	@ 0x40
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fc65 	bl	80072c6 <TIM_ITRx_SetConfig>
      break;
 80069fc:	e00c      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f000 fc5c 	bl	80072c6 <TIM_ITRx_SetConfig>
      break;
 8006a0e:	e003      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
      break;
 8006a14:	e000      	b.n	8006a18 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	00100070 	.word	0x00100070
 8006a38:	00100060 	.word	0x00100060
 8006a3c:	00100050 	.word	0x00100050
 8006a40:	00100040 	.word	0x00100040
 8006a44:	00100030 	.word	0x00100030
 8006a48:	00100020 	.word	0x00100020

08006a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006b90 <TIM_Base_SetConfig+0x144>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d017      	beq.n	8006a94 <TIM_Base_SetConfig+0x48>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a6a:	d013      	beq.n	8006a94 <TIM_Base_SetConfig+0x48>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a49      	ldr	r2, [pc, #292]	@ (8006b94 <TIM_Base_SetConfig+0x148>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00f      	beq.n	8006a94 <TIM_Base_SetConfig+0x48>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a48      	ldr	r2, [pc, #288]	@ (8006b98 <TIM_Base_SetConfig+0x14c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00b      	beq.n	8006a94 <TIM_Base_SetConfig+0x48>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a47      	ldr	r2, [pc, #284]	@ (8006b9c <TIM_Base_SetConfig+0x150>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <TIM_Base_SetConfig+0x48>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a46      	ldr	r2, [pc, #280]	@ (8006ba0 <TIM_Base_SetConfig+0x154>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_Base_SetConfig+0x48>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a45      	ldr	r2, [pc, #276]	@ (8006ba4 <TIM_Base_SetConfig+0x158>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d108      	bne.n	8006aa6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a39      	ldr	r2, [pc, #228]	@ (8006b90 <TIM_Base_SetConfig+0x144>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d023      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab4:	d01f      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a36      	ldr	r2, [pc, #216]	@ (8006b94 <TIM_Base_SetConfig+0x148>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d01b      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a35      	ldr	r2, [pc, #212]	@ (8006b98 <TIM_Base_SetConfig+0x14c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d017      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a34      	ldr	r2, [pc, #208]	@ (8006b9c <TIM_Base_SetConfig+0x150>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a33      	ldr	r2, [pc, #204]	@ (8006ba0 <TIM_Base_SetConfig+0x154>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00f      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a33      	ldr	r2, [pc, #204]	@ (8006ba8 <TIM_Base_SetConfig+0x15c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00b      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a32      	ldr	r2, [pc, #200]	@ (8006bac <TIM_Base_SetConfig+0x160>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d007      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a31      	ldr	r2, [pc, #196]	@ (8006bb0 <TIM_Base_SetConfig+0x164>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_Base_SetConfig+0xaa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba4 <TIM_Base_SetConfig+0x158>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d108      	bne.n	8006b08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a18      	ldr	r2, [pc, #96]	@ (8006b90 <TIM_Base_SetConfig+0x144>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d013      	beq.n	8006b5c <TIM_Base_SetConfig+0x110>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba0 <TIM_Base_SetConfig+0x154>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00f      	beq.n	8006b5c <TIM_Base_SetConfig+0x110>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba8 <TIM_Base_SetConfig+0x15c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00b      	beq.n	8006b5c <TIM_Base_SetConfig+0x110>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a19      	ldr	r2, [pc, #100]	@ (8006bac <TIM_Base_SetConfig+0x160>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d007      	beq.n	8006b5c <TIM_Base_SetConfig+0x110>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a18      	ldr	r2, [pc, #96]	@ (8006bb0 <TIM_Base_SetConfig+0x164>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d003      	beq.n	8006b5c <TIM_Base_SetConfig+0x110>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a13      	ldr	r2, [pc, #76]	@ (8006ba4 <TIM_Base_SetConfig+0x158>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d103      	bne.n	8006b64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d105      	bne.n	8006b82 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f023 0201 	bic.w	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	611a      	str	r2, [r3, #16]
  }
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40012c00 	.word	0x40012c00
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40013400 	.word	0x40013400
 8006ba4:	40015000 	.word	0x40015000
 8006ba8:	40014000 	.word	0x40014000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800

08006bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f023 0201 	bic.w	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0303 	bic.w	r3, r3, #3
 8006bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 0302 	bic.w	r3, r3, #2
 8006c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a30      	ldr	r2, [pc, #192]	@ (8006cd0 <TIM_OC1_SetConfig+0x11c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <TIM_OC1_SetConfig+0x88>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a2f      	ldr	r2, [pc, #188]	@ (8006cd4 <TIM_OC1_SetConfig+0x120>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00f      	beq.n	8006c3c <TIM_OC1_SetConfig+0x88>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006cd8 <TIM_OC1_SetConfig+0x124>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00b      	beq.n	8006c3c <TIM_OC1_SetConfig+0x88>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a2d      	ldr	r2, [pc, #180]	@ (8006cdc <TIM_OC1_SetConfig+0x128>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d007      	beq.n	8006c3c <TIM_OC1_SetConfig+0x88>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce0 <TIM_OC1_SetConfig+0x12c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d003      	beq.n	8006c3c <TIM_OC1_SetConfig+0x88>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a2b      	ldr	r2, [pc, #172]	@ (8006ce4 <TIM_OC1_SetConfig+0x130>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d10c      	bne.n	8006c56 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 0308 	bic.w	r3, r3, #8
 8006c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 0304 	bic.w	r3, r3, #4
 8006c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd0 <TIM_OC1_SetConfig+0x11c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <TIM_OC1_SetConfig+0xd2>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd4 <TIM_OC1_SetConfig+0x120>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00f      	beq.n	8006c86 <TIM_OC1_SetConfig+0xd2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd8 <TIM_OC1_SetConfig+0x124>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00b      	beq.n	8006c86 <TIM_OC1_SetConfig+0xd2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a1a      	ldr	r2, [pc, #104]	@ (8006cdc <TIM_OC1_SetConfig+0x128>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d007      	beq.n	8006c86 <TIM_OC1_SetConfig+0xd2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a19      	ldr	r2, [pc, #100]	@ (8006ce0 <TIM_OC1_SetConfig+0x12c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d003      	beq.n	8006c86 <TIM_OC1_SetConfig+0xd2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a18      	ldr	r2, [pc, #96]	@ (8006ce4 <TIM_OC1_SetConfig+0x130>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d111      	bne.n	8006caa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	621a      	str	r2, [r3, #32]
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40012c00 	.word	0x40012c00
 8006cd4:	40013400 	.word	0x40013400
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	40014400 	.word	0x40014400
 8006ce0:	40014800 	.word	0x40014800
 8006ce4:	40015000 	.word	0x40015000

08006ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	f023 0210 	bic.w	r2, r3, #16
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f023 0320 	bic.w	r3, r3, #32
 8006d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a2c      	ldr	r2, [pc, #176]	@ (8006df8 <TIM_OC2_SetConfig+0x110>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d007      	beq.n	8006d5c <TIM_OC2_SetConfig+0x74>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8006dfc <TIM_OC2_SetConfig+0x114>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_OC2_SetConfig+0x74>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a2a      	ldr	r2, [pc, #168]	@ (8006e00 <TIM_OC2_SetConfig+0x118>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d10d      	bne.n	8006d78 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8006df8 <TIM_OC2_SetConfig+0x110>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d013      	beq.n	8006da8 <TIM_OC2_SetConfig+0xc0>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	@ (8006dfc <TIM_OC2_SetConfig+0x114>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00f      	beq.n	8006da8 <TIM_OC2_SetConfig+0xc0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006e04 <TIM_OC2_SetConfig+0x11c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00b      	beq.n	8006da8 <TIM_OC2_SetConfig+0xc0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a1d      	ldr	r2, [pc, #116]	@ (8006e08 <TIM_OC2_SetConfig+0x120>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d007      	beq.n	8006da8 <TIM_OC2_SetConfig+0xc0>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e0c <TIM_OC2_SetConfig+0x124>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_OC2_SetConfig+0xc0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a17      	ldr	r2, [pc, #92]	@ (8006e00 <TIM_OC2_SetConfig+0x118>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d113      	bne.n	8006dd0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	621a      	str	r2, [r3, #32]
}
 8006dea:	bf00      	nop
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40012c00 	.word	0x40012c00
 8006dfc:	40013400 	.word	0x40013400
 8006e00:	40015000 	.word	0x40015000
 8006e04:	40014000 	.word	0x40014000
 8006e08:	40014400 	.word	0x40014400
 8006e0c:	40014800 	.word	0x40014800

08006e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0303 	bic.w	r3, r3, #3
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8006f1c <TIM_OC3_SetConfig+0x10c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <TIM_OC3_SetConfig+0x72>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a2a      	ldr	r2, [pc, #168]	@ (8006f20 <TIM_OC3_SetConfig+0x110>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_OC3_SetConfig+0x72>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a29      	ldr	r2, [pc, #164]	@ (8006f24 <TIM_OC3_SetConfig+0x114>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d10d      	bne.n	8006e9e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8006f1c <TIM_OC3_SetConfig+0x10c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <TIM_OC3_SetConfig+0xbe>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f20 <TIM_OC3_SetConfig+0x110>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d00f      	beq.n	8006ece <TIM_OC3_SetConfig+0xbe>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f28 <TIM_OC3_SetConfig+0x118>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00b      	beq.n	8006ece <TIM_OC3_SetConfig+0xbe>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f2c <TIM_OC3_SetConfig+0x11c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d007      	beq.n	8006ece <TIM_OC3_SetConfig+0xbe>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f30 <TIM_OC3_SetConfig+0x120>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d003      	beq.n	8006ece <TIM_OC3_SetConfig+0xbe>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a16      	ldr	r2, [pc, #88]	@ (8006f24 <TIM_OC3_SetConfig+0x114>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d113      	bne.n	8006ef6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	621a      	str	r2, [r3, #32]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	40012c00 	.word	0x40012c00
 8006f20:	40013400 	.word	0x40013400
 8006f24:	40015000 	.word	0x40015000
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40014400 	.word	0x40014400
 8006f30:	40014800 	.word	0x40014800

08006f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	031b      	lsls	r3, r3, #12
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a2c      	ldr	r2, [pc, #176]	@ (8007044 <TIM_OC4_SetConfig+0x110>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <TIM_OC4_SetConfig+0x74>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007048 <TIM_OC4_SetConfig+0x114>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC4_SetConfig+0x74>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800704c <TIM_OC4_SetConfig+0x118>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d10d      	bne.n	8006fc4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	031b      	lsls	r3, r3, #12
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8007044 <TIM_OC4_SetConfig+0x110>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d013      	beq.n	8006ff4 <TIM_OC4_SetConfig+0xc0>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a1e      	ldr	r2, [pc, #120]	@ (8007048 <TIM_OC4_SetConfig+0x114>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00f      	beq.n	8006ff4 <TIM_OC4_SetConfig+0xc0>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8007050 <TIM_OC4_SetConfig+0x11c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00b      	beq.n	8006ff4 <TIM_OC4_SetConfig+0xc0>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a1d      	ldr	r2, [pc, #116]	@ (8007054 <TIM_OC4_SetConfig+0x120>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d007      	beq.n	8006ff4 <TIM_OC4_SetConfig+0xc0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8007058 <TIM_OC4_SetConfig+0x124>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d003      	beq.n	8006ff4 <TIM_OC4_SetConfig+0xc0>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a17      	ldr	r2, [pc, #92]	@ (800704c <TIM_OC4_SetConfig+0x118>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d113      	bne.n	800701c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ffa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007002:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	019b      	lsls	r3, r3, #6
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	4313      	orrs	r3, r2
 800700e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	019b      	lsls	r3, r3, #6
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4313      	orrs	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	40012c00 	.word	0x40012c00
 8007048:	40013400 	.word	0x40013400
 800704c:	40015000 	.word	0x40015000
 8007050:	40014000 	.word	0x40014000
 8007054:	40014400 	.word	0x40014400
 8007058:	40014800 	.word	0x40014800

0800705c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800708a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800708e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80070a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a19      	ldr	r2, [pc, #100]	@ (8007118 <TIM_OC5_SetConfig+0xbc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <TIM_OC5_SetConfig+0x82>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a18      	ldr	r2, [pc, #96]	@ (800711c <TIM_OC5_SetConfig+0xc0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00f      	beq.n	80070de <TIM_OC5_SetConfig+0x82>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a17      	ldr	r2, [pc, #92]	@ (8007120 <TIM_OC5_SetConfig+0xc4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00b      	beq.n	80070de <TIM_OC5_SetConfig+0x82>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a16      	ldr	r2, [pc, #88]	@ (8007124 <TIM_OC5_SetConfig+0xc8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d007      	beq.n	80070de <TIM_OC5_SetConfig+0x82>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a15      	ldr	r2, [pc, #84]	@ (8007128 <TIM_OC5_SetConfig+0xcc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d003      	beq.n	80070de <TIM_OC5_SetConfig+0x82>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a14      	ldr	r2, [pc, #80]	@ (800712c <TIM_OC5_SetConfig+0xd0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d109      	bne.n	80070f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	621a      	str	r2, [r3, #32]
}
 800710c:	bf00      	nop
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	40012c00 	.word	0x40012c00
 800711c:	40013400 	.word	0x40013400
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800
 800712c:	40015000 	.word	0x40015000

08007130 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800715e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	021b      	lsls	r3, r3, #8
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	051b      	lsls	r3, r3, #20
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a1a      	ldr	r2, [pc, #104]	@ (80071f0 <TIM_OC6_SetConfig+0xc0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <TIM_OC6_SetConfig+0x84>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a19      	ldr	r2, [pc, #100]	@ (80071f4 <TIM_OC6_SetConfig+0xc4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00f      	beq.n	80071b4 <TIM_OC6_SetConfig+0x84>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a18      	ldr	r2, [pc, #96]	@ (80071f8 <TIM_OC6_SetConfig+0xc8>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00b      	beq.n	80071b4 <TIM_OC6_SetConfig+0x84>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a17      	ldr	r2, [pc, #92]	@ (80071fc <TIM_OC6_SetConfig+0xcc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_OC6_SetConfig+0x84>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a16      	ldr	r2, [pc, #88]	@ (8007200 <TIM_OC6_SetConfig+0xd0>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_OC6_SetConfig+0x84>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a15      	ldr	r2, [pc, #84]	@ (8007204 <TIM_OC6_SetConfig+0xd4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d109      	bne.n	80071c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	029b      	lsls	r3, r3, #10
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40012c00 	.word	0x40012c00
 80071f4:	40013400 	.word	0x40013400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800
 8007204:	40015000 	.word	0x40015000

08007208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007208:	b480      	push	{r7}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f023 0201 	bic.w	r2, r3, #1
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	4313      	orrs	r3, r2
 800723c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f023 030a 	bic.w	r3, r3, #10
 8007244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	621a      	str	r2, [r3, #32]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007266:	b480      	push	{r7}
 8007268:	b087      	sub	sp, #28
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f023 0210 	bic.w	r2, r3, #16
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	031b      	lsls	r3, r3, #12
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80072a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80072dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f043 0307 	orr.w	r3, r3, #7
 80072ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	609a      	str	r2, [r3, #8]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800731a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	021a      	lsls	r2, r3, #8
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	431a      	orrs	r2, r3
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4313      	orrs	r3, r2
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	609a      	str	r2, [r3, #8]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 031f 	and.w	r3, r3, #31
 8007352:	2201      	movs	r2, #1
 8007354:	fa02 f303 	lsl.w	r3, r2, r3
 8007358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a1a      	ldr	r2, [r3, #32]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	43db      	mvns	r3, r3
 8007362:	401a      	ands	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f003 031f 	and.w	r3, r3, #31
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	fa01 f303 	lsl.w	r3, r1, r3
 8007378:	431a      	orrs	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e074      	b.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a34      	ldr	r2, [pc, #208]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d009      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a33      	ldr	r2, [pc, #204]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d004      	beq.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a31      	ldr	r2, [pc, #196]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d108      	bne.n	80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80073e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80073fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a21      	ldr	r2, [pc, #132]	@ (800749c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d022      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007424:	d01d      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1f      	ldr	r2, [pc, #124]	@ (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d018      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a1d      	ldr	r2, [pc, #116]	@ (80074ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d013      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a1c      	ldr	r2, [pc, #112]	@ (80074b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00e      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a15      	ldr	r2, [pc, #84]	@ (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d009      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a18      	ldr	r2, [pc, #96]	@ (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d004      	beq.n	8007462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a11      	ldr	r2, [pc, #68]	@ (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d10c      	bne.n	800747c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	4313      	orrs	r3, r2
 8007472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40013400 	.word	0x40013400
 80074a4:	40015000 	.word	0x40015000
 80074a8:	40000400 	.word	0x40000400
 80074ac:	40000800 	.word	0x40000800
 80074b0:	40000c00 	.word	0x40000c00
 80074b4:	40014000 	.word	0x40014000

080074b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e078      	b.n	80075c6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	4313      	orrs	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1c      	ldr	r2, [pc, #112]	@ (80075d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d009      	beq.n	800757a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a1b      	ldr	r2, [pc, #108]	@ (80075d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d004      	beq.n	800757a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a19      	ldr	r2, [pc, #100]	@ (80075dc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d11c      	bne.n	80075b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	051b      	lsls	r3, r3, #20
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40012c00 	.word	0x40012c00
 80075d8:	40013400 	.word	0x40013400
 80075dc:	40015000 	.word	0x40015000

080075e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e042      	b.n	8007678 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d106      	bne.n	800760a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fa ff25 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2224      	movs	r2, #36	@ 0x24
 800760e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0201 	bic.w	r2, r2, #1
 8007620:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 ff42 	bl	80084b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fc43 	bl	8007ebc <UART_SetConfig>
 8007636:	4603      	mov	r3, r0
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e01b      	b.n	8007678 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800764e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800765e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0201 	orr.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 ffc1 	bl	80085f8 <UART_CheckIdleState>
 8007676:	4603      	mov	r3, r0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08a      	sub	sp, #40	@ 0x28
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	4613      	mov	r3, r2
 800768e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007696:	2b20      	cmp	r3, #32
 8007698:	d17b      	bne.n	8007792 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_UART_Transmit+0x26>
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e074      	b.n	8007794 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2221      	movs	r2, #33	@ 0x21
 80076b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ba:	f7fb f975 	bl	80029a8 <HAL_GetTick>
 80076be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	88fa      	ldrh	r2, [r7, #6]
 80076cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d8:	d108      	bne.n	80076ec <HAL_UART_Transmit+0x6c>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d104      	bne.n	80076ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	e003      	b.n	80076f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076f4:	e030      	b.n	8007758 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2200      	movs	r2, #0
 80076fe:	2180      	movs	r1, #128	@ 0x80
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f001 f823 	bl	800874c <UART_WaitOnFlagUntilTimeout>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e03d      	b.n	8007794 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800772c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	3302      	adds	r3, #2
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	e007      	b.n	8007746 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	781a      	ldrb	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	3301      	adds	r3, #1
 8007744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800775e:	b29b      	uxth	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1c8      	bne.n	80076f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2200      	movs	r2, #0
 800776c:	2140      	movs	r1, #64	@ 0x40
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 ffec 	bl	800874c <UART_WaitOnFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e006      	b.n	8007794 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	e000      	b.n	8007794 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007792:	2302      	movs	r3, #2
  }
}
 8007794:	4618      	mov	r0, r3
 8007796:	3720      	adds	r7, #32
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	@ 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	d137      	bne.n	8007824 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_UART_Receive_IT+0x24>
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e030      	b.n	8007826 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a18      	ldr	r2, [pc, #96]	@ (8007830 <HAL_UART_Receive_IT+0x94>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d01f      	beq.n	8007814 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d018      	beq.n	8007814 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	613b      	str	r3, [r7, #16]
   return(result);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	623b      	str	r3, [r7, #32]
 8007802:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	61bb      	str	r3, [r7, #24]
   return(result);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007814:	88fb      	ldrh	r3, [r7, #6]
 8007816:	461a      	mov	r2, r3
 8007818:	68b9      	ldr	r1, [r7, #8]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f001 f804 	bl	8008828 <UART_Start_Receive_IT>
 8007820:	4603      	mov	r3, r0
 8007822:	e000      	b.n	8007826 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007824:	2302      	movs	r3, #2
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	3728      	adds	r7, #40	@ 0x28
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	40008000 	.word	0x40008000

08007834 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b0ba      	sub	sp, #232	@ 0xe8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800785a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800785e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007862:	4013      	ands	r3, r2
 8007864:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007868:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800786c:	2b00      	cmp	r3, #0
 800786e:	d11b      	bne.n	80078a8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007874:	f003 0320 	and.w	r3, r3, #32
 8007878:	2b00      	cmp	r3, #0
 800787a:	d015      	beq.n	80078a8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d009      	beq.n	80078a8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 82e3 	beq.w	8007e64 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
      }
      return;
 80078a6:	e2dd      	b.n	8007e64 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 8123 	beq.w	8007af8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078b6:	4b8d      	ldr	r3, [pc, #564]	@ (8007aec <HAL_UART_IRQHandler+0x2b8>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078c2:	4b8b      	ldr	r3, [pc, #556]	@ (8007af0 <HAL_UART_IRQHandler+0x2bc>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 8116 	beq.w	8007af8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d011      	beq.n	80078fc <HAL_UART_IRQHandler+0xc8>
 80078d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00b      	beq.n	80078fc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2201      	movs	r2, #1
 80078ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078f2:	f043 0201 	orr.w	r2, r3, #1
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d011      	beq.n	800792c <HAL_UART_IRQHandler+0xf8>
 8007908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2202      	movs	r2, #2
 800791a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007922:	f043 0204 	orr.w	r2, r3, #4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800792c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b00      	cmp	r3, #0
 8007936:	d011      	beq.n	800795c <HAL_UART_IRQHandler+0x128>
 8007938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2204      	movs	r2, #4
 800794a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007952:	f043 0202 	orr.w	r2, r3, #2
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800795c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007960:	f003 0308 	and.w	r3, r3, #8
 8007964:	2b00      	cmp	r3, #0
 8007966:	d017      	beq.n	8007998 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d105      	bne.n	8007980 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007974:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007978:	4b5c      	ldr	r3, [pc, #368]	@ (8007aec <HAL_UART_IRQHandler+0x2b8>)
 800797a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2208      	movs	r2, #8
 8007986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800798e:	f043 0208 	orr.w	r2, r3, #8
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800799c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d012      	beq.n	80079ca <HAL_UART_IRQHandler+0x196>
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00c      	beq.n	80079ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c0:	f043 0220 	orr.w	r2, r3, #32
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 8249 	beq.w	8007e68 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d013      	beq.n	8007a0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079e6:	f003 0320 	and.w	r3, r3, #32
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d007      	beq.n	8007a0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1e:	2b40      	cmp	r3, #64	@ 0x40
 8007a20:	d005      	beq.n	8007a2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d054      	beq.n	8007ad8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f001 f81c 	bl	8008a6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3e:	2b40      	cmp	r3, #64	@ 0x40
 8007a40:	d146      	bne.n	8007ad0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3308      	adds	r3, #8
 8007a48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3308      	adds	r3, #8
 8007a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1d9      	bne.n	8007a42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d017      	beq.n	8007ac8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a9e:	4a15      	ldr	r2, [pc, #84]	@ (8007af4 <HAL_UART_IRQHandler+0x2c0>)
 8007aa0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fc fe8d 	bl	80047c8 <HAL_DMA_Abort_IT>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d019      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ac6:	e00f      	b.n	8007ae8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f9e1 	bl	8007e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ace:	e00b      	b.n	8007ae8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f9dd 	bl	8007e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad6:	e007      	b.n	8007ae8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9d9 	bl	8007e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ae6:	e1bf      	b.n	8007e68 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae8:	bf00      	nop
    return;
 8007aea:	e1bd      	b.n	8007e68 <HAL_UART_IRQHandler+0x634>
 8007aec:	10000001 	.word	0x10000001
 8007af0:	04000120 	.word	0x04000120
 8007af4:	08008b39 	.word	0x08008b39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	f040 8153 	bne.w	8007da8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b06:	f003 0310 	and.w	r3, r3, #16
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 814c 	beq.w	8007da8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 8145 	beq.w	8007da8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2210      	movs	r2, #16
 8007b24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b30:	2b40      	cmp	r3, #64	@ 0x40
 8007b32:	f040 80bb 	bne.w	8007cac <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 818f 	beq.w	8007e6c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	f080 8187 	bcs.w	8007e6c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f040 8087 	bne.w	8007c8a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b88:	e853 3f00 	ldrex	r3, [r3]
 8007b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ba6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007baa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bb6:	e841 2300 	strex	r3, r2, [r1]
 8007bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1da      	bne.n	8007b7c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bd0:	e853 3f00 	ldrex	r3, [r3]
 8007bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bd8:	f023 0301 	bic.w	r3, r3, #1
 8007bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3308      	adds	r3, #8
 8007be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e1      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3308      	adds	r3, #8
 8007c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3308      	adds	r3, #8
 8007c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e3      	bne.n	8007c02 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c58:	f023 0310 	bic.w	r3, r3, #16
 8007c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c6c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e4      	bne.n	8007c48 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fc fd46 	bl	8004716 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f8fd 	bl	8007ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007caa:	e0df      	b.n	8007e6c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80d1 	beq.w	8007e70 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007cce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 80cc 	beq.w	8007e70 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ce8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cfc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e4      	bne.n	8007cd8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3308      	adds	r3, #8
 8007d32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d36:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d3e:	e841 2300 	strex	r3, r2, [r1]
 8007d42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1e1      	bne.n	8007d0e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2220      	movs	r2, #32
 8007d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d80:	61fb      	str	r3, [r7, #28]
 8007d82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	69b9      	ldr	r1, [r7, #24]
 8007d86:	69fa      	ldr	r2, [r7, #28]
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e4      	bne.n	8007d5e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2202      	movs	r2, #2
 8007d98:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f87f 	bl	8007ea4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007da6:	e063      	b.n	8007e70 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00e      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x59e>
 8007db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007db8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d008      	beq.n	8007dd2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007dc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 fc12 	bl	80095f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dd0:	e051      	b.n	8007e76 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d014      	beq.n	8007e08 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d008      	beq.n	8007e08 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d03a      	beq.n	8007e74 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
    }
    return;
 8007e06:	e035      	b.n	8007e74 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <HAL_UART_IRQHandler+0x5f4>
 8007e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fe9f 	bl	8008b64 <UART_EndTransmit_IT>
    return;
 8007e26:	e026      	b.n	8007e76 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d009      	beq.n	8007e48 <HAL_UART_IRQHandler+0x614>
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 fbeb 	bl	800961c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e46:	e016      	b.n	8007e76 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d010      	beq.n	8007e76 <HAL_UART_IRQHandler+0x642>
 8007e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	da0c      	bge.n	8007e76 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fbd3 	bl	8009608 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e62:	e008      	b.n	8007e76 <HAL_UART_IRQHandler+0x642>
      return;
 8007e64:	bf00      	nop
 8007e66:	e006      	b.n	8007e76 <HAL_UART_IRQHandler+0x642>
    return;
 8007e68:	bf00      	nop
 8007e6a:	e004      	b.n	8007e76 <HAL_UART_IRQHandler+0x642>
      return;
 8007e6c:	bf00      	nop
 8007e6e:	e002      	b.n	8007e76 <HAL_UART_IRQHandler+0x642>
      return;
 8007e70:	bf00      	nop
 8007e72:	e000      	b.n	8007e76 <HAL_UART_IRQHandler+0x642>
    return;
 8007e74:	bf00      	nop
  }
}
 8007e76:	37e8      	adds	r7, #232	@ 0xe8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ec0:	b08c      	sub	sp, #48	@ 0x30
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4baa      	ldr	r3, [pc, #680]	@ (8008194 <UART_SetConfig+0x2d8>)
 8007eec:	4013      	ands	r3, r2
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a9f      	ldr	r2, [pc, #636]	@ (8008198 <UART_SetConfig+0x2dc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f24:	4313      	orrs	r3, r2
 8007f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f46:	f023 010f 	bic.w	r1, r3, #15
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a90      	ldr	r2, [pc, #576]	@ (800819c <UART_SetConfig+0x2e0>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d125      	bne.n	8007fac <UART_SetConfig+0xf0>
 8007f60:	4b8f      	ldr	r3, [pc, #572]	@ (80081a0 <UART_SetConfig+0x2e4>)
 8007f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f66:	f003 0303 	and.w	r3, r3, #3
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d81a      	bhi.n	8007fa4 <UART_SetConfig+0xe8>
 8007f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f74 <UART_SetConfig+0xb8>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007f85 	.word	0x08007f85
 8007f78:	08007f95 	.word	0x08007f95
 8007f7c:	08007f8d 	.word	0x08007f8d
 8007f80:	08007f9d 	.word	0x08007f9d
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	e116      	b.n	80081ba <UART_SetConfig+0x2fe>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f92:	e112      	b.n	80081ba <UART_SetConfig+0x2fe>
 8007f94:	2304      	movs	r3, #4
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9a:	e10e      	b.n	80081ba <UART_SetConfig+0x2fe>
 8007f9c:	2308      	movs	r3, #8
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa2:	e10a      	b.n	80081ba <UART_SetConfig+0x2fe>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007faa:	e106      	b.n	80081ba <UART_SetConfig+0x2fe>
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a7c      	ldr	r2, [pc, #496]	@ (80081a4 <UART_SetConfig+0x2e8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d138      	bne.n	8008028 <UART_SetConfig+0x16c>
 8007fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80081a0 <UART_SetConfig+0x2e4>)
 8007fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fbc:	f003 030c 	and.w	r3, r3, #12
 8007fc0:	2b0c      	cmp	r3, #12
 8007fc2:	d82d      	bhi.n	8008020 <UART_SetConfig+0x164>
 8007fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fcc <UART_SetConfig+0x110>)
 8007fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fca:	bf00      	nop
 8007fcc:	08008001 	.word	0x08008001
 8007fd0:	08008021 	.word	0x08008021
 8007fd4:	08008021 	.word	0x08008021
 8007fd8:	08008021 	.word	0x08008021
 8007fdc:	08008011 	.word	0x08008011
 8007fe0:	08008021 	.word	0x08008021
 8007fe4:	08008021 	.word	0x08008021
 8007fe8:	08008021 	.word	0x08008021
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008021 	.word	0x08008021
 8007ff4:	08008021 	.word	0x08008021
 8007ff8:	08008021 	.word	0x08008021
 8007ffc:	08008019 	.word	0x08008019
 8008000:	2300      	movs	r3, #0
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e0d8      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008008:	2302      	movs	r3, #2
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e0d4      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008010:	2304      	movs	r3, #4
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e0d0      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008018:	2308      	movs	r3, #8
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801e:	e0cc      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008020:	2310      	movs	r3, #16
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008026:	e0c8      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a5e      	ldr	r2, [pc, #376]	@ (80081a8 <UART_SetConfig+0x2ec>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d125      	bne.n	800807e <UART_SetConfig+0x1c2>
 8008032:	4b5b      	ldr	r3, [pc, #364]	@ (80081a0 <UART_SetConfig+0x2e4>)
 8008034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008038:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800803c:	2b30      	cmp	r3, #48	@ 0x30
 800803e:	d016      	beq.n	800806e <UART_SetConfig+0x1b2>
 8008040:	2b30      	cmp	r3, #48	@ 0x30
 8008042:	d818      	bhi.n	8008076 <UART_SetConfig+0x1ba>
 8008044:	2b20      	cmp	r3, #32
 8008046:	d00a      	beq.n	800805e <UART_SetConfig+0x1a2>
 8008048:	2b20      	cmp	r3, #32
 800804a:	d814      	bhi.n	8008076 <UART_SetConfig+0x1ba>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <UART_SetConfig+0x19a>
 8008050:	2b10      	cmp	r3, #16
 8008052:	d008      	beq.n	8008066 <UART_SetConfig+0x1aa>
 8008054:	e00f      	b.n	8008076 <UART_SetConfig+0x1ba>
 8008056:	2300      	movs	r3, #0
 8008058:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805c:	e0ad      	b.n	80081ba <UART_SetConfig+0x2fe>
 800805e:	2302      	movs	r3, #2
 8008060:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008064:	e0a9      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008066:	2304      	movs	r3, #4
 8008068:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806c:	e0a5      	b.n	80081ba <UART_SetConfig+0x2fe>
 800806e:	2308      	movs	r3, #8
 8008070:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008074:	e0a1      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008076:	2310      	movs	r3, #16
 8008078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800807c:	e09d      	b.n	80081ba <UART_SetConfig+0x2fe>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a4a      	ldr	r2, [pc, #296]	@ (80081ac <UART_SetConfig+0x2f0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d125      	bne.n	80080d4 <UART_SetConfig+0x218>
 8008088:	4b45      	ldr	r3, [pc, #276]	@ (80081a0 <UART_SetConfig+0x2e4>)
 800808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800808e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008092:	2bc0      	cmp	r3, #192	@ 0xc0
 8008094:	d016      	beq.n	80080c4 <UART_SetConfig+0x208>
 8008096:	2bc0      	cmp	r3, #192	@ 0xc0
 8008098:	d818      	bhi.n	80080cc <UART_SetConfig+0x210>
 800809a:	2b80      	cmp	r3, #128	@ 0x80
 800809c:	d00a      	beq.n	80080b4 <UART_SetConfig+0x1f8>
 800809e:	2b80      	cmp	r3, #128	@ 0x80
 80080a0:	d814      	bhi.n	80080cc <UART_SetConfig+0x210>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <UART_SetConfig+0x1f0>
 80080a6:	2b40      	cmp	r3, #64	@ 0x40
 80080a8:	d008      	beq.n	80080bc <UART_SetConfig+0x200>
 80080aa:	e00f      	b.n	80080cc <UART_SetConfig+0x210>
 80080ac:	2300      	movs	r3, #0
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b2:	e082      	b.n	80081ba <UART_SetConfig+0x2fe>
 80080b4:	2302      	movs	r3, #2
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ba:	e07e      	b.n	80081ba <UART_SetConfig+0x2fe>
 80080bc:	2304      	movs	r3, #4
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c2:	e07a      	b.n	80081ba <UART_SetConfig+0x2fe>
 80080c4:	2308      	movs	r3, #8
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ca:	e076      	b.n	80081ba <UART_SetConfig+0x2fe>
 80080cc:	2310      	movs	r3, #16
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d2:	e072      	b.n	80081ba <UART_SetConfig+0x2fe>
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a35      	ldr	r2, [pc, #212]	@ (80081b0 <UART_SetConfig+0x2f4>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d12a      	bne.n	8008134 <UART_SetConfig+0x278>
 80080de:	4b30      	ldr	r3, [pc, #192]	@ (80081a0 <UART_SetConfig+0x2e4>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ec:	d01a      	beq.n	8008124 <UART_SetConfig+0x268>
 80080ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080f2:	d81b      	bhi.n	800812c <UART_SetConfig+0x270>
 80080f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f8:	d00c      	beq.n	8008114 <UART_SetConfig+0x258>
 80080fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080fe:	d815      	bhi.n	800812c <UART_SetConfig+0x270>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <UART_SetConfig+0x250>
 8008104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008108:	d008      	beq.n	800811c <UART_SetConfig+0x260>
 800810a:	e00f      	b.n	800812c <UART_SetConfig+0x270>
 800810c:	2300      	movs	r3, #0
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e052      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008114:	2302      	movs	r3, #2
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e04e      	b.n	80081ba <UART_SetConfig+0x2fe>
 800811c:	2304      	movs	r3, #4
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e04a      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008124:	2308      	movs	r3, #8
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e046      	b.n	80081ba <UART_SetConfig+0x2fe>
 800812c:	2310      	movs	r3, #16
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e042      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a17      	ldr	r2, [pc, #92]	@ (8008198 <UART_SetConfig+0x2dc>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d13a      	bne.n	80081b4 <UART_SetConfig+0x2f8>
 800813e:	4b18      	ldr	r3, [pc, #96]	@ (80081a0 <UART_SetConfig+0x2e4>)
 8008140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008144:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008148:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800814c:	d01a      	beq.n	8008184 <UART_SetConfig+0x2c8>
 800814e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008152:	d81b      	bhi.n	800818c <UART_SetConfig+0x2d0>
 8008154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008158:	d00c      	beq.n	8008174 <UART_SetConfig+0x2b8>
 800815a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800815e:	d815      	bhi.n	800818c <UART_SetConfig+0x2d0>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <UART_SetConfig+0x2b0>
 8008164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008168:	d008      	beq.n	800817c <UART_SetConfig+0x2c0>
 800816a:	e00f      	b.n	800818c <UART_SetConfig+0x2d0>
 800816c:	2300      	movs	r3, #0
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008172:	e022      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008174:	2302      	movs	r3, #2
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817a:	e01e      	b.n	80081ba <UART_SetConfig+0x2fe>
 800817c:	2304      	movs	r3, #4
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008182:	e01a      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008184:	2308      	movs	r3, #8
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818a:	e016      	b.n	80081ba <UART_SetConfig+0x2fe>
 800818c:	2310      	movs	r3, #16
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008192:	e012      	b.n	80081ba <UART_SetConfig+0x2fe>
 8008194:	cfff69f3 	.word	0xcfff69f3
 8008198:	40008000 	.word	0x40008000
 800819c:	40013800 	.word	0x40013800
 80081a0:	40021000 	.word	0x40021000
 80081a4:	40004400 	.word	0x40004400
 80081a8:	40004800 	.word	0x40004800
 80081ac:	40004c00 	.word	0x40004c00
 80081b0:	40005000 	.word	0x40005000
 80081b4:	2310      	movs	r3, #16
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4aae      	ldr	r2, [pc, #696]	@ (8008478 <UART_SetConfig+0x5bc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	f040 8097 	bne.w	80082f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d823      	bhi.n	8008216 <UART_SetConfig+0x35a>
 80081ce:	a201      	add	r2, pc, #4	@ (adr r2, 80081d4 <UART_SetConfig+0x318>)
 80081d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d4:	080081f9 	.word	0x080081f9
 80081d8:	08008217 	.word	0x08008217
 80081dc:	08008201 	.word	0x08008201
 80081e0:	08008217 	.word	0x08008217
 80081e4:	08008207 	.word	0x08008207
 80081e8:	08008217 	.word	0x08008217
 80081ec:	08008217 	.word	0x08008217
 80081f0:	08008217 	.word	0x08008217
 80081f4:	0800820f 	.word	0x0800820f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081f8:	f7fd fbd8 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 80081fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081fe:	e010      	b.n	8008222 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008200:	4b9e      	ldr	r3, [pc, #632]	@ (800847c <UART_SetConfig+0x5c0>)
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008204:	e00d      	b.n	8008222 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008206:	f7fd fb63 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 800820a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800820c:	e009      	b.n	8008222 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800820e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008212:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008214:	e005      	b.n	8008222 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008220:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 8130 	beq.w	800848a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822e:	4a94      	ldr	r2, [pc, #592]	@ (8008480 <UART_SetConfig+0x5c4>)
 8008230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008234:	461a      	mov	r2, r3
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	fbb3 f3f2 	udiv	r3, r3, r2
 800823c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	4613      	mov	r3, r2
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	4413      	add	r3, r2
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	429a      	cmp	r2, r3
 800824c:	d305      	bcc.n	800825a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	429a      	cmp	r2, r3
 8008258:	d903      	bls.n	8008262 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008260:	e113      	b.n	800848a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008264:	2200      	movs	r2, #0
 8008266:	60bb      	str	r3, [r7, #8]
 8008268:	60fa      	str	r2, [r7, #12]
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800826e:	4a84      	ldr	r2, [pc, #528]	@ (8008480 <UART_SetConfig+0x5c4>)
 8008270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008274:	b29b      	uxth	r3, r3
 8008276:	2200      	movs	r2, #0
 8008278:	603b      	str	r3, [r7, #0]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008280:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008284:	f7f8 fc06 	bl	8000a94 <__aeabi_uldivmod>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4610      	mov	r0, r2
 800828e:	4619      	mov	r1, r3
 8008290:	f04f 0200 	mov.w	r2, #0
 8008294:	f04f 0300 	mov.w	r3, #0
 8008298:	020b      	lsls	r3, r1, #8
 800829a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800829e:	0202      	lsls	r2, r0, #8
 80082a0:	6979      	ldr	r1, [r7, #20]
 80082a2:	6849      	ldr	r1, [r1, #4]
 80082a4:	0849      	lsrs	r1, r1, #1
 80082a6:	2000      	movs	r0, #0
 80082a8:	460c      	mov	r4, r1
 80082aa:	4605      	mov	r5, r0
 80082ac:	eb12 0804 	adds.w	r8, r2, r4
 80082b0:	eb43 0905 	adc.w	r9, r3, r5
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	469a      	mov	sl, r3
 80082bc:	4693      	mov	fp, r2
 80082be:	4652      	mov	r2, sl
 80082c0:	465b      	mov	r3, fp
 80082c2:	4640      	mov	r0, r8
 80082c4:	4649      	mov	r1, r9
 80082c6:	f7f8 fbe5 	bl	8000a94 <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4613      	mov	r3, r2
 80082d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082d8:	d308      	bcc.n	80082ec <UART_SetConfig+0x430>
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082e0:	d204      	bcs.n	80082ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6a3a      	ldr	r2, [r7, #32]
 80082e8:	60da      	str	r2, [r3, #12]
 80082ea:	e0ce      	b.n	800848a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082f2:	e0ca      	b.n	800848a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082fc:	d166      	bne.n	80083cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80082fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008302:	2b08      	cmp	r3, #8
 8008304:	d827      	bhi.n	8008356 <UART_SetConfig+0x49a>
 8008306:	a201      	add	r2, pc, #4	@ (adr r2, 800830c <UART_SetConfig+0x450>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	08008331 	.word	0x08008331
 8008310:	08008339 	.word	0x08008339
 8008314:	08008341 	.word	0x08008341
 8008318:	08008357 	.word	0x08008357
 800831c:	08008347 	.word	0x08008347
 8008320:	08008357 	.word	0x08008357
 8008324:	08008357 	.word	0x08008357
 8008328:	08008357 	.word	0x08008357
 800832c:	0800834f 	.word	0x0800834f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008330:	f7fd fb3c 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 8008334:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008336:	e014      	b.n	8008362 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008338:	f7fd fb4e 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 800833c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800833e:	e010      	b.n	8008362 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008340:	4b4e      	ldr	r3, [pc, #312]	@ (800847c <UART_SetConfig+0x5c0>)
 8008342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008344:	e00d      	b.n	8008362 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008346:	f7fd fac3 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 800834a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800834c:	e009      	b.n	8008362 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800834e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008352:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008354:	e005      	b.n	8008362 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	f000 8090 	beq.w	800848a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836e:	4a44      	ldr	r2, [pc, #272]	@ (8008480 <UART_SetConfig+0x5c4>)
 8008370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008374:	461a      	mov	r2, r3
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	fbb3 f3f2 	udiv	r3, r3, r2
 800837c:	005a      	lsls	r2, r3, #1
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	441a      	add	r2, r3
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	fbb2 f3f3 	udiv	r3, r2, r3
 800838e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	2b0f      	cmp	r3, #15
 8008394:	d916      	bls.n	80083c4 <UART_SetConfig+0x508>
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800839c:	d212      	bcs.n	80083c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	f023 030f 	bic.w	r3, r3, #15
 80083a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	085b      	lsrs	r3, r3, #1
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f003 0307 	and.w	r3, r3, #7
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	8bfb      	ldrh	r3, [r7, #30]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	8bfa      	ldrh	r2, [r7, #30]
 80083c0:	60da      	str	r2, [r3, #12]
 80083c2:	e062      	b.n	800848a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083ca:	e05e      	b.n	800848a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d828      	bhi.n	8008426 <UART_SetConfig+0x56a>
 80083d4:	a201      	add	r2, pc, #4	@ (adr r2, 80083dc <UART_SetConfig+0x520>)
 80083d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083da:	bf00      	nop
 80083dc:	08008401 	.word	0x08008401
 80083e0:	08008409 	.word	0x08008409
 80083e4:	08008411 	.word	0x08008411
 80083e8:	08008427 	.word	0x08008427
 80083ec:	08008417 	.word	0x08008417
 80083f0:	08008427 	.word	0x08008427
 80083f4:	08008427 	.word	0x08008427
 80083f8:	08008427 	.word	0x08008427
 80083fc:	0800841f 	.word	0x0800841f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008400:	f7fd fad4 	bl	80059ac <HAL_RCC_GetPCLK1Freq>
 8008404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008406:	e014      	b.n	8008432 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008408:	f7fd fae6 	bl	80059d8 <HAL_RCC_GetPCLK2Freq>
 800840c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800840e:	e010      	b.n	8008432 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008410:	4b1a      	ldr	r3, [pc, #104]	@ (800847c <UART_SetConfig+0x5c0>)
 8008412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008414:	e00d      	b.n	8008432 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008416:	f7fd fa5b 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 800841a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800841c:	e009      	b.n	8008432 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800841e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008424:	e005      	b.n	8008432 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008430:	bf00      	nop
    }

    if (pclk != 0U)
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d028      	beq.n	800848a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843c:	4a10      	ldr	r2, [pc, #64]	@ (8008480 <UART_SetConfig+0x5c4>)
 800843e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008442:	461a      	mov	r2, r3
 8008444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008446:	fbb3 f2f2 	udiv	r2, r3, r2
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	085b      	lsrs	r3, r3, #1
 8008450:	441a      	add	r2, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	fbb2 f3f3 	udiv	r3, r2, r3
 800845a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	2b0f      	cmp	r3, #15
 8008460:	d910      	bls.n	8008484 <UART_SetConfig+0x5c8>
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008468:	d20c      	bcs.n	8008484 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	b29a      	uxth	r2, r3
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60da      	str	r2, [r3, #12]
 8008474:	e009      	b.n	800848a <UART_SetConfig+0x5ce>
 8008476:	bf00      	nop
 8008478:	40008000 	.word	0x40008000
 800847c:	00f42400 	.word	0x00f42400
 8008480:	0800992c 	.word	0x0800992c
      }
      else
      {
        ret = HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2201      	movs	r2, #1
 800848e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2201      	movs	r2, #1
 8008496:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	2200      	movs	r2, #0
 800849e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2200      	movs	r2, #0
 80084a4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3730      	adds	r7, #48	@ 0x30
 80084ae:	46bd      	mov	sp, r7
 80084b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c0:	f003 0308 	and.w	r3, r3, #8
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008548:	f003 0310 	and.w	r3, r3, #16
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01a      	beq.n	80085ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085b2:	d10a      	bne.n	80085ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	605a      	str	r2, [r3, #4]
  }
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b098      	sub	sp, #96	@ 0x60
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008608:	f7fa f9ce 	bl	80029a8 <HAL_GetTick>
 800860c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0308 	and.w	r3, r3, #8
 8008618:	2b08      	cmp	r3, #8
 800861a:	d12f      	bne.n	800867c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800861c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008624:	2200      	movs	r2, #0
 8008626:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f88e 	bl	800874c <UART_WaitOnFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d022      	beq.n	800867c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800864a:	653b      	str	r3, [r7, #80]	@ 0x50
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
 8008652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008654:	647b      	str	r3, [r7, #68]	@ 0x44
 8008656:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008658:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800865a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800865c:	e841 2300 	strex	r3, r2, [r1]
 8008660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e6      	bne.n	8008636 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2220      	movs	r2, #32
 800866c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e063      	b.n	8008744 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 0304 	and.w	r3, r3, #4
 8008686:	2b04      	cmp	r3, #4
 8008688:	d149      	bne.n	800871e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800868a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008692:	2200      	movs	r2, #0
 8008694:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f857 	bl	800874c <UART_WaitOnFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d03c      	beq.n	800871e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	e853 3f00 	ldrex	r3, [r3]
 80086b0:	623b      	str	r3, [r7, #32]
   return(result);
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80086c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ca:	e841 2300 	strex	r3, r2, [r1]
 80086ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1e6      	bne.n	80086a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3308      	adds	r3, #8
 80086dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f023 0301 	bic.w	r3, r3, #1
 80086ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3308      	adds	r3, #8
 80086f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086f6:	61fa      	str	r2, [r7, #28]
 80086f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fa:	69b9      	ldr	r1, [r7, #24]
 80086fc:	69fa      	ldr	r2, [r7, #28]
 80086fe:	e841 2300 	strex	r3, r2, [r1]
 8008702:	617b      	str	r3, [r7, #20]
   return(result);
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e5      	bne.n	80086d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2220      	movs	r2, #32
 800870e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e012      	b.n	8008744 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2220      	movs	r2, #32
 8008722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3758      	adds	r7, #88	@ 0x58
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	603b      	str	r3, [r7, #0]
 8008758:	4613      	mov	r3, r2
 800875a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800875c:	e04f      	b.n	80087fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d04b      	beq.n	80087fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008766:	f7fa f91f 	bl	80029a8 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	429a      	cmp	r2, r3
 8008774:	d302      	bcc.n	800877c <UART_WaitOnFlagUntilTimeout+0x30>
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e04e      	b.n	800881e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b00      	cmp	r3, #0
 800878c:	d037      	beq.n	80087fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b80      	cmp	r3, #128	@ 0x80
 8008792:	d034      	beq.n	80087fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b40      	cmp	r3, #64	@ 0x40
 8008798:	d031      	beq.n	80087fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	f003 0308 	and.w	r3, r3, #8
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d110      	bne.n	80087ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2208      	movs	r2, #8
 80087ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 f95b 	bl	8008a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2208      	movs	r2, #8
 80087ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e029      	b.n	800881e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087d8:	d111      	bne.n	80087fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f000 f941 	bl	8008a6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2220      	movs	r2, #32
 80087ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e00f      	b.n	800881e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69da      	ldr	r2, [r3, #28]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	4013      	ands	r3, r2
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	429a      	cmp	r2, r3
 800880c:	bf0c      	ite	eq
 800880e:	2301      	moveq	r3, #1
 8008810:	2300      	movne	r3, #0
 8008812:	b2db      	uxtb	r3, r3
 8008814:	461a      	mov	r2, r3
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	429a      	cmp	r2, r3
 800881a:	d0a0      	beq.n	800875e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008828:	b480      	push	{r7}
 800882a:	b0a3      	sub	sp, #140	@ 0x8c
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	4613      	mov	r3, r2
 8008834:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	88fa      	ldrh	r2, [r7, #6]
 8008840:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	88fa      	ldrh	r2, [r7, #6]
 8008848:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800885a:	d10e      	bne.n	800887a <UART_Start_Receive_IT+0x52>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d105      	bne.n	8008870 <UART_Start_Receive_IT+0x48>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800886a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800886e:	e02d      	b.n	80088cc <UART_Start_Receive_IT+0xa4>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	22ff      	movs	r2, #255	@ 0xff
 8008874:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008878:	e028      	b.n	80088cc <UART_Start_Receive_IT+0xa4>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10d      	bne.n	800889e <UART_Start_Receive_IT+0x76>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d104      	bne.n	8008894 <UART_Start_Receive_IT+0x6c>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	22ff      	movs	r2, #255	@ 0xff
 800888e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008892:	e01b      	b.n	80088cc <UART_Start_Receive_IT+0xa4>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	227f      	movs	r2, #127	@ 0x7f
 8008898:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800889c:	e016      	b.n	80088cc <UART_Start_Receive_IT+0xa4>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088a6:	d10d      	bne.n	80088c4 <UART_Start_Receive_IT+0x9c>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <UART_Start_Receive_IT+0x92>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	227f      	movs	r2, #127	@ 0x7f
 80088b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088b8:	e008      	b.n	80088cc <UART_Start_Receive_IT+0xa4>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	223f      	movs	r2, #63	@ 0x3f
 80088be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088c2:	e003      	b.n	80088cc <UART_Start_Receive_IT+0xa4>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2222      	movs	r2, #34	@ 0x22
 80088d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3308      	adds	r3, #8
 80088e2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088e6:	e853 3f00 	ldrex	r3, [r3]
 80088ea:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80088ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088ee:	f043 0301 	orr.w	r3, r3, #1
 80088f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008900:	673a      	str	r2, [r7, #112]	@ 0x70
 8008902:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008904:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008906:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008908:	e841 2300 	strex	r3, r2, [r1]
 800890c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800890e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e3      	bne.n	80088dc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800891c:	d14f      	bne.n	80089be <UART_Start_Receive_IT+0x196>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008924:	88fa      	ldrh	r2, [r7, #6]
 8008926:	429a      	cmp	r2, r3
 8008928:	d349      	bcc.n	80089be <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008932:	d107      	bne.n	8008944 <UART_Start_Receive_IT+0x11c>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d103      	bne.n	8008944 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4a47      	ldr	r2, [pc, #284]	@ (8008a5c <UART_Start_Receive_IT+0x234>)
 8008940:	675a      	str	r2, [r3, #116]	@ 0x74
 8008942:	e002      	b.n	800894a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4a46      	ldr	r2, [pc, #280]	@ (8008a60 <UART_Start_Receive_IT+0x238>)
 8008948:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d01a      	beq.n	8008988 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008966:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008974:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008976:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800897a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e4      	bne.n	8008952 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3308      	adds	r3, #8
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800899e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3308      	adds	r3, #8
 80089a6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80089a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80089aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e5      	bne.n	8008988 <UART_Start_Receive_IT+0x160>
 80089bc:	e046      	b.n	8008a4c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089c6:	d107      	bne.n	80089d8 <UART_Start_Receive_IT+0x1b0>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a24      	ldr	r2, [pc, #144]	@ (8008a64 <UART_Start_Receive_IT+0x23c>)
 80089d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80089d6:	e002      	b.n	80089de <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4a23      	ldr	r2, [pc, #140]	@ (8008a68 <UART_Start_Receive_IT+0x240>)
 80089dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d019      	beq.n	8008a1a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80089fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a06:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e6      	bne.n	80089e6 <UART_Start_Receive_IT+0x1be>
 8008a18:	e018      	b.n	8008a4c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	613b      	str	r3, [r7, #16]
   return(result);
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f043 0320 	orr.w	r3, r3, #32
 8008a2e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a38:	623b      	str	r3, [r7, #32]
 8008a3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3c:	69f9      	ldr	r1, [r7, #28]
 8008a3e:	6a3a      	ldr	r2, [r7, #32]
 8008a40:	e841 2300 	strex	r3, r2, [r1]
 8008a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e6      	bne.n	8008a1a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	378c      	adds	r7, #140	@ 0x8c
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	0800928d 	.word	0x0800928d
 8008a60:	08008f2d 	.word	0x08008f2d
 8008a64:	08008d75 	.word	0x08008d75
 8008a68:	08008bbd 	.word	0x08008bbd

08008a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b095      	sub	sp, #84	@ 0x54
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a92:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a94:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e6      	bne.n	8008a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e3      	bne.n	8008aa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d118      	bne.n	8008b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f023 0310 	bic.w	r3, r3, #16
 8008afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	461a      	mov	r2, r3
 8008b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b04:	61bb      	str	r3, [r7, #24]
 8008b06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	6979      	ldr	r1, [r7, #20]
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	e841 2300 	strex	r3, r2, [r1]
 8008b10:	613b      	str	r3, [r7, #16]
   return(result);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e6      	bne.n	8008ae6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b2c:	bf00      	nop
 8008b2e:	3754      	adds	r7, #84	@ 0x54
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f7ff f99a 	bl	8007e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b5c:	bf00      	nop
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	461a      	mov	r2, r3
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6979      	ldr	r1, [r7, #20]
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	613b      	str	r3, [r7, #16]
   return(result);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e6      	bne.n	8008b6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff f965 	bl	8007e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bb2:	bf00      	nop
 8008bb4:	3720      	adds	r7, #32
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
	...

08008bbc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b09c      	sub	sp, #112	@ 0x70
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bd4:	2b22      	cmp	r3, #34	@ 0x22
 8008bd6:	f040 80be 	bne.w	8008d56 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008be4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008be8:	b2d9      	uxtb	r1, r3
 8008bea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf4:	400a      	ands	r2, r1
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f040 80a1 	bne.w	8008d66 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c2c:	e853 3f00 	ldrex	r3, [r3]
 8008c30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e6      	bne.n	8008c24 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c60:	e853 3f00 	ldrex	r3, [r3]
 8008c64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c68:	f023 0301 	bic.w	r3, r3, #1
 8008c6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3308      	adds	r3, #8
 8008c74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c76:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e5      	bne.n	8008c56 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a33      	ldr	r2, [pc, #204]	@ (8008d70 <UART_RxISR_8BIT+0x1b4>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d01f      	beq.n	8008ce8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d018      	beq.n	8008ce8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cbe:	e853 3f00 	ldrex	r3, [r3]
 8008cc2:	623b      	str	r3, [r7, #32]
   return(result);
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cdc:	e841 2300 	strex	r3, r2, [r1]
 8008ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1e6      	bne.n	8008cb6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d12e      	bne.n	8008d4e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0310 	bic.w	r3, r3, #16
 8008d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d14:	61fb      	str	r3, [r7, #28]
 8008d16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	69b9      	ldr	r1, [r7, #24]
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	e841 2300 	strex	r3, r2, [r1]
 8008d20:	617b      	str	r3, [r7, #20]
   return(result);
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1e6      	bne.n	8008cf6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	69db      	ldr	r3, [r3, #28]
 8008d2e:	f003 0310 	and.w	r3, r3, #16
 8008d32:	2b10      	cmp	r3, #16
 8008d34:	d103      	bne.n	8008d3e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2210      	movs	r2, #16
 8008d3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff f8ac 	bl	8007ea4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d4c:	e00b      	b.n	8008d66 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7f9 fa94 	bl	800227c <HAL_UART_RxCpltCallback>
}
 8008d54:	e007      	b.n	8008d66 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	699a      	ldr	r2, [r3, #24]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0208 	orr.w	r2, r2, #8
 8008d64:	619a      	str	r2, [r3, #24]
}
 8008d66:	bf00      	nop
 8008d68:	3770      	adds	r7, #112	@ 0x70
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	40008000 	.word	0x40008000

08008d74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b09c      	sub	sp, #112	@ 0x70
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d8c:	2b22      	cmp	r3, #34	@ 0x22
 8008d8e:	f040 80be 	bne.w	8008f0e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008da2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008da6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008daa:	4013      	ands	r3, r2
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008db0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db6:	1c9a      	adds	r2, r3, #2
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f040 80a1 	bne.w	8008f1e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008df0:	667b      	str	r3, [r7, #100]	@ 0x64
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8008dfc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e6      	bne.n	8008ddc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	3308      	adds	r3, #8
 8008e14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e18:	e853 3f00 	ldrex	r3, [r3]
 8008e1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	f023 0301 	bic.w	r3, r3, #1
 8008e24:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3308      	adds	r3, #8
 8008e2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e5      	bne.n	8008e0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a33      	ldr	r2, [pc, #204]	@ (8008f28 <UART_RxISR_16BIT+0x1b4>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d01f      	beq.n	8008ea0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d018      	beq.n	8008ea0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e8e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e6      	bne.n	8008e6e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d12e      	bne.n	8008f06 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	e853 3f00 	ldrex	r3, [r3]
 8008eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f023 0310 	bic.w	r3, r3, #16
 8008ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ecc:	61bb      	str	r3, [r7, #24]
 8008ece:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed0:	6979      	ldr	r1, [r7, #20]
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	e841 2300 	strex	r3, r2, [r1]
 8008ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e6      	bne.n	8008eae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d103      	bne.n	8008ef6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2210      	movs	r2, #16
 8008ef4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7fe ffd0 	bl	8007ea4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f04:	e00b      	b.n	8008f1e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7f9 f9b8 	bl	800227c <HAL_UART_RxCpltCallback>
}
 8008f0c:	e007      	b.n	8008f1e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	699a      	ldr	r2, [r3, #24]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f042 0208 	orr.w	r2, r2, #8
 8008f1c:	619a      	str	r2, [r3, #24]
}
 8008f1e:	bf00      	nop
 8008f20:	3770      	adds	r7, #112	@ 0x70
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	40008000 	.word	0x40008000

08008f2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b0ac      	sub	sp, #176	@ 0xb0
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f3a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f62:	2b22      	cmp	r3, #34	@ 0x22
 8008f64:	f040 8182 	bne.w	800926c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f6e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f72:	e125      	b.n	80091c0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f7e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008f82:	b2d9      	uxtb	r1, r3
 8008f84:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f8e:	400a      	ands	r2, r1
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fbe:	f003 0307 	and.w	r3, r3, #7
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d053      	beq.n	800906e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d011      	beq.n	8008ff6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00b      	beq.n	8008ff6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fec:	f043 0201 	orr.w	r2, r3, #1
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d011      	beq.n	8009026 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009006:	f003 0301 	and.w	r3, r3, #1
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2202      	movs	r2, #2
 8009014:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800901c:	f043 0204 	orr.w	r2, r3, #4
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800902a:	f003 0304 	and.w	r3, r3, #4
 800902e:	2b00      	cmp	r3, #0
 8009030:	d011      	beq.n	8009056 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00b      	beq.n	8009056 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2204      	movs	r2, #4
 8009044:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800904c:	f043 0202 	orr.w	r2, r3, #2
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f7fe ff15 	bl	8007e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009074:	b29b      	uxth	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	f040 80a2 	bne.w	80091c0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800908a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800908c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800909e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090a0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80090a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090a6:	e841 2300 	strex	r3, r2, [r1]
 80090aa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80090ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e4      	bne.n	800907c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3308      	adds	r3, #8
 80090b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80090c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	3308      	adds	r3, #8
 80090d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090da:	66ba      	str	r2, [r7, #104]	@ 0x68
 80090dc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090de:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80090e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80090e2:	e841 2300 	strex	r3, r2, [r1]
 80090e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80090e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1e1      	bne.n	80090b2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a5f      	ldr	r2, [pc, #380]	@ (8009284 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d021      	beq.n	8009150 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d01a      	beq.n	8009150 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800912a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800912e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800913c:	657b      	str	r3, [r7, #84]	@ 0x54
 800913e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009142:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800914a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e4      	bne.n	800911a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009154:	2b01      	cmp	r3, #1
 8009156:	d130      	bne.n	80091ba <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	f023 0310 	bic.w	r3, r3, #16
 8009172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009180:	643b      	str	r3, [r7, #64]	@ 0x40
 8009182:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009186:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e4      	bne.n	800915e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b10      	cmp	r3, #16
 80091a0:	d103      	bne.n	80091aa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2210      	movs	r2, #16
 80091a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7fe fe76 	bl	8007ea4 <HAL_UARTEx_RxEventCallback>
 80091b8:	e002      	b.n	80091c0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7f9 f85e 	bl	800227c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091c0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d006      	beq.n	80091d6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80091c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f47f aecf 	bne.w	8008f74 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091dc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d049      	beq.n	800927c <UART_RxISR_8BIT_FIFOEN+0x350>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091ee:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d242      	bcs.n	800927c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	3308      	adds	r3, #8
 80091fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	e853 3f00 	ldrex	r3, [r3]
 8009204:	61fb      	str	r3, [r7, #28]
   return(result);
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800920c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3308      	adds	r3, #8
 8009216:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800921a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800921c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1e3      	bne.n	80091f6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a15      	ldr	r2, [pc, #84]	@ (8009288 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009232:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	60bb      	str	r3, [r7, #8]
   return(result);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f043 0320 	orr.w	r3, r3, #32
 8009248:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	461a      	mov	r2, r3
 8009252:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	6979      	ldr	r1, [r7, #20]
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	613b      	str	r3, [r7, #16]
   return(result);
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e4      	bne.n	8009234 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800926a:	e007      	b.n	800927c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	699a      	ldr	r2, [r3, #24]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0208 	orr.w	r2, r2, #8
 800927a:	619a      	str	r2, [r3, #24]
}
 800927c:	bf00      	nop
 800927e:	37b0      	adds	r7, #176	@ 0xb0
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	40008000 	.word	0x40008000
 8009288:	08008bbd 	.word	0x08008bbd

0800928c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b0ae      	sub	sp, #184	@ 0xb8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800929a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092c2:	2b22      	cmp	r3, #34	@ 0x22
 80092c4:	f040 8186 	bne.w	80095d4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092d2:	e129      	b.n	8009528 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092da:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80092e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80092ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80092ee:	4013      	ands	r3, r2
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fc:	1c9a      	adds	r2, r3, #2
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009308:	b29b      	uxth	r3, r3
 800930a:	3b01      	subs	r3, #1
 800930c:	b29a      	uxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800931e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009322:	f003 0307 	and.w	r3, r3, #7
 8009326:	2b00      	cmp	r3, #0
 8009328:	d053      	beq.n	80093d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800932a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d011      	beq.n	800935a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800933a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00b      	beq.n	800935a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2201      	movs	r2, #1
 8009348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009350:	f043 0201 	orr.w	r2, r3, #1
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800935a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d011      	beq.n	800938a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00b      	beq.n	800938a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2202      	movs	r2, #2
 8009378:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009380:	f043 0204 	orr.w	r2, r3, #4
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800938a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d011      	beq.n	80093ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00b      	beq.n	80093ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2204      	movs	r2, #4
 80093a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b0:	f043 0202 	orr.w	r2, r3, #2
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d006      	beq.n	80093d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fe fd63 	bl	8007e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f040 80a4 	bne.w	8009528 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093e8:	e853 3f00 	ldrex	r3, [r3]
 80093ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80093ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80093f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	461a      	mov	r2, r3
 80093fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009402:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009406:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800940a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e2      	bne.n	80093e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	3308      	adds	r3, #8
 8009420:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009424:	e853 3f00 	ldrex	r3, [r3]
 8009428:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800942a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800942c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3308      	adds	r3, #8
 800943e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009442:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009444:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009446:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009448:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800944a:	e841 2300 	strex	r3, r2, [r1]
 800944e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009452:	2b00      	cmp	r3, #0
 8009454:	d1e1      	bne.n	800941a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a5f      	ldr	r2, [pc, #380]	@ (80095ec <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d021      	beq.n	80094b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01a      	beq.n	80094b8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009492:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009496:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80094a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094a6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094ac:	e841 2300 	strex	r3, r2, [r1]
 80094b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d1e4      	bne.n	8009482 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d130      	bne.n	8009522 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d6:	f023 0310 	bic.w	r3, r3, #16
 80094da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80094e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80094ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e4      	bne.n	80094c6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b10      	cmp	r3, #16
 8009508:	d103      	bne.n	8009512 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2210      	movs	r2, #16
 8009510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fe fcc2 	bl	8007ea4 <HAL_UARTEx_RxEventCallback>
 8009520:	e002      	b.n	8009528 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7f8 feaa 	bl	800227c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009528:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800952c:	2b00      	cmp	r3, #0
 800952e:	d006      	beq.n	800953e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b00      	cmp	r3, #0
 800953a:	f47f aecb 	bne.w	80092d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009544:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009548:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800954c:	2b00      	cmp	r3, #0
 800954e:	d049      	beq.n	80095e4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009556:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800955a:	429a      	cmp	r2, r3
 800955c:	d242      	bcs.n	80095e4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3308      	adds	r3, #8
 8009564:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	623b      	str	r3, [r7, #32]
   return(result);
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3308      	adds	r3, #8
 800957e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009582:	633a      	str	r2, [r7, #48]	@ 0x30
 8009584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800958a:	e841 2300 	strex	r3, r2, [r1]
 800958e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e3      	bne.n	800955e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a15      	ldr	r2, [pc, #84]	@ (80095f0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800959a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f043 0320 	orr.w	r3, r3, #32
 80095b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095be:	61fb      	str	r3, [r7, #28]
 80095c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c2:	69b9      	ldr	r1, [r7, #24]
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	e841 2300 	strex	r3, r2, [r1]
 80095ca:	617b      	str	r3, [r7, #20]
   return(result);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1e4      	bne.n	800959c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095d2:	e007      	b.n	80095e4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	699a      	ldr	r2, [r3, #24]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f042 0208 	orr.w	r2, r2, #8
 80095e2:	619a      	str	r2, [r3, #24]
}
 80095e4:	bf00      	nop
 80095e6:	37b8      	adds	r7, #184	@ 0xb8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	40008000 	.word	0x40008000
 80095f0:	08008d75 	.word	0x08008d75

080095f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <HAL_UARTEx_DisableFifoMode+0x16>
 8009642:	2302      	movs	r3, #2
 8009644:	e027      	b.n	8009696 <HAL_UARTEx_DisableFifoMode+0x66>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2224      	movs	r2, #36	@ 0x24
 8009652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 0201 	bic.w	r2, r2, #1
 800966c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009674:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2220      	movs	r2, #32
 8009688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d101      	bne.n	80096ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096b6:	2302      	movs	r3, #2
 80096b8:	e02d      	b.n	8009716 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2224      	movs	r2, #36	@ 0x24
 80096c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0201 	bic.w	r2, r2, #1
 80096e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f850 	bl	800979c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2220      	movs	r2, #32
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800972e:	2b01      	cmp	r3, #1
 8009730:	d101      	bne.n	8009736 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009732:	2302      	movs	r3, #2
 8009734:	e02d      	b.n	8009792 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2224      	movs	r2, #36	@ 0x24
 8009742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f022 0201 	bic.w	r2, r2, #1
 800975c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f812 	bl	800979c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d108      	bne.n	80097be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097bc:	e031      	b.n	8009822 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097be:	2308      	movs	r3, #8
 80097c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097c2:	2308      	movs	r3, #8
 80097c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	0e5b      	lsrs	r3, r3, #25
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 0307 	and.w	r3, r3, #7
 80097d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	0f5b      	lsrs	r3, r3, #29
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
 80097e8:	7b3a      	ldrb	r2, [r7, #12]
 80097ea:	4911      	ldr	r1, [pc, #68]	@ (8009830 <UARTEx_SetNbDataToProcess+0x94>)
 80097ec:	5c8a      	ldrb	r2, [r1, r2]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097f2:	7b3a      	ldrb	r2, [r7, #12]
 80097f4:	490f      	ldr	r1, [pc, #60]	@ (8009834 <UARTEx_SetNbDataToProcess+0x98>)
 80097f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	7b7a      	ldrb	r2, [r7, #13]
 8009808:	4909      	ldr	r1, [pc, #36]	@ (8009830 <UARTEx_SetNbDataToProcess+0x94>)
 800980a:	5c8a      	ldrb	r2, [r1, r2]
 800980c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009810:	7b7a      	ldrb	r2, [r7, #13]
 8009812:	4908      	ldr	r1, [pc, #32]	@ (8009834 <UARTEx_SetNbDataToProcess+0x98>)
 8009814:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009816:	fb93 f3f2 	sdiv	r3, r3, r2
 800981a:	b29a      	uxth	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009822:	bf00      	nop
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	08009944 	.word	0x08009944
 8009834:	0800994c 	.word	0x0800994c

08009838 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	ed93 7a06 	vldr	s14, [r3, #24]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	edd3 7a07 	vldr	s15, [r3, #28]
 800984e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	edd3 7a08 	vldr	s15, [r3, #32]
 8009858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	edd3 7a06 	vldr	s15, [r3, #24]
 8009868:	eeb1 7a67 	vneg.f32	s14, s15
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	edd3 7a08 	vldr	s15, [r3, #32]
 8009872:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a1a      	ldr	r2, [r3, #32]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d006      	beq.n	800989c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	330c      	adds	r3, #12
 8009892:	220c      	movs	r2, #12
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f804 	bl	80098a4 <memset>
  }

}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <memset>:
 80098a4:	4402      	add	r2, r0
 80098a6:	4603      	mov	r3, r0
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d100      	bne.n	80098ae <memset+0xa>
 80098ac:	4770      	bx	lr
 80098ae:	f803 1b01 	strb.w	r1, [r3], #1
 80098b2:	e7f9      	b.n	80098a8 <memset+0x4>

080098b4 <__libc_init_array>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	4d0d      	ldr	r5, [pc, #52]	@ (80098ec <__libc_init_array+0x38>)
 80098b8:	4c0d      	ldr	r4, [pc, #52]	@ (80098f0 <__libc_init_array+0x3c>)
 80098ba:	1b64      	subs	r4, r4, r5
 80098bc:	10a4      	asrs	r4, r4, #2
 80098be:	2600      	movs	r6, #0
 80098c0:	42a6      	cmp	r6, r4
 80098c2:	d109      	bne.n	80098d8 <__libc_init_array+0x24>
 80098c4:	4d0b      	ldr	r5, [pc, #44]	@ (80098f4 <__libc_init_array+0x40>)
 80098c6:	4c0c      	ldr	r4, [pc, #48]	@ (80098f8 <__libc_init_array+0x44>)
 80098c8:	f000 f818 	bl	80098fc <_init>
 80098cc:	1b64      	subs	r4, r4, r5
 80098ce:	10a4      	asrs	r4, r4, #2
 80098d0:	2600      	movs	r6, #0
 80098d2:	42a6      	cmp	r6, r4
 80098d4:	d105      	bne.n	80098e2 <__libc_init_array+0x2e>
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098dc:	4798      	blx	r3
 80098de:	3601      	adds	r6, #1
 80098e0:	e7ee      	b.n	80098c0 <__libc_init_array+0xc>
 80098e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e6:	4798      	blx	r3
 80098e8:	3601      	adds	r6, #1
 80098ea:	e7f2      	b.n	80098d2 <__libc_init_array+0x1e>
 80098ec:	0800995c 	.word	0x0800995c
 80098f0:	0800995c 	.word	0x0800995c
 80098f4:	0800995c 	.word	0x0800995c
 80098f8:	08009960 	.word	0x08009960

080098fc <_init>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	bf00      	nop
 8009900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009902:	bc08      	pop	{r3}
 8009904:	469e      	mov	lr, r3
 8009906:	4770      	bx	lr

08009908 <_fini>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	bf00      	nop
 800990c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990e:	bc08      	pop	{r3}
 8009910:	469e      	mov	lr, r3
 8009912:	4770      	bx	lr
