
LAB2-Firmware-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009028  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009200  08009200  0000a200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009240  08009240  0000b018  2**0
                  CONTENTS
  4 .ARM          00000008  08009240  08009240  0000a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009248  08009248  0000b018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009248  08009248  0000a248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800924c  0800924c  0000a24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009250  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000018  08009268  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08009268  0000b378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181f9  00000000  00000000  0000b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb5  00000000  00000000  00023241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  00025ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108b  00000000  00000000  00027420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  000284ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b27  00000000  00000000  00051281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114232  00000000  00000000  00069da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017dfda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d34  00000000  00000000  0017e020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00183d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080091e8 	.word	0x080091e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080091e8 	.word	0x080091e8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f001 fa2e 	bl	80021ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 f907 	bl	8000fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f000 fbf9 	bl	8001588 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d96:	f000 fbcd 	bl	8001534 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d9a:	f000 f9c7 	bl	800112c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d9e:	f000 f94b 	bl	8001038 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000da2:	f000 fa0d 	bl	80011c0 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000da6:	f000 fafd 	bl	80013a4 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000daa:	f000 fa57 	bl	800125c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dae:	f000 faab 	bl	8001308 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000db2:	4864      	ldr	r0, [pc, #400]	@ (8000f44 <main+0x1c0>)
 8000db4:	f004 fd7e 	bl	80058b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8000db8:	4863      	ldr	r0, [pc, #396]	@ (8000f48 <main+0x1c4>)
 8000dba:	f004 fd7b 	bl	80058b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000dbe:	4863      	ldr	r0, [pc, #396]	@ (8000f4c <main+0x1c8>)
 8000dc0:	f004 fd78 	bl	80058b4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8000dc4:	4862      	ldr	r0, [pc, #392]	@ (8000f50 <main+0x1cc>)
 8000dc6:	f004 fd75 	bl	80058b4 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	485e      	ldr	r0, [pc, #376]	@ (8000f48 <main+0x1c4>)
 8000dce:	f004 fe43 	bl	8005a58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	485c      	ldr	r0, [pc, #368]	@ (8000f48 <main+0x1c4>)
 8000dd6:	f004 fe3f 	bl	8005a58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000dda:	2108      	movs	r1, #8
 8000ddc:	485a      	ldr	r0, [pc, #360]	@ (8000f48 <main+0x1c4>)
 8000dde:	f004 fe3b 	bl	8005a58 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000de2:	213c      	movs	r1, #60	@ 0x3c
 8000de4:	4859      	ldr	r0, [pc, #356]	@ (8000f4c <main+0x1c8>)
 8000de6:	f004 ffef 	bl	8005dc8 <HAL_TIM_Encoder_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dea:	217f      	movs	r1, #127	@ 0x7f
 8000dec:	4859      	ldr	r0, [pc, #356]	@ (8000f54 <main+0x1d0>)
 8000dee:	f002 fd7b 	bl	80038e8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 10);
 8000df2:	220a      	movs	r2, #10
 8000df4:	4958      	ldr	r1, [pc, #352]	@ (8000f58 <main+0x1d4>)
 8000df6:	4857      	ldr	r0, [pc, #348]	@ (8000f54 <main+0x1d0>)
 8000df8:	f001 fe68 	bl	8002acc <HAL_ADC_Start_DMA>

  PID.Kp = 0.18;
 8000dfc:	4b57      	ldr	r3, [pc, #348]	@ (8000f5c <main+0x1d8>)
 8000dfe:	4a58      	ldr	r2, [pc, #352]	@ (8000f60 <main+0x1dc>)
 8000e00:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.00000;;
 8000e02:	4b56      	ldr	r3, [pc, #344]	@ (8000f5c <main+0x1d8>)
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.3;
 8000e0a:	4b54      	ldr	r3, [pc, #336]	@ (8000f5c <main+0x1d8>)
 8000e0c:	4a55      	ldr	r2, [pc, #340]	@ (8000f64 <main+0x1e0>)
 8000e0e:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4852      	ldr	r0, [pc, #328]	@ (8000f5c <main+0x1d8>)
 8000e14:	f008 f986 	bl	8009124 <arm_pid_init_f32>

  PID2.Kp = 0.18;
 8000e18:	4b53      	ldr	r3, [pc, #332]	@ (8000f68 <main+0x1e4>)
 8000e1a:	4a51      	ldr	r2, [pc, #324]	@ (8000f60 <main+0x1dc>)
 8000e1c:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.00000;;
 8000e1e:	4b52      	ldr	r3, [pc, #328]	@ (8000f68 <main+0x1e4>)
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.3;
 8000e26:	4b50      	ldr	r3, [pc, #320]	@ (8000f68 <main+0x1e4>)
 8000e28:	4a4e      	ldr	r2, [pc, #312]	@ (8000f64 <main+0x1e0>)
 8000e2a:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	484e      	ldr	r0, [pc, #312]	@ (8000f68 <main+0x1e4>)
 8000e30:	f008 f978 	bl	8009124 <arm_pid_init_f32>

  UARTInterruptConfig();
 8000e34:	f000 ff16 	bl	8001c64 <UARTInterruptConfig>
  _micros = 0;
 8000e38:	494c      	ldr	r1, [pc, #304]	@ (8000f6c <main+0x1e8>)
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (state == 0)
 8000e46:	4b4a      	ldr	r3, [pc, #296]	@ (8000f70 <main+0x1ec>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10f      	bne.n	8000e6e <main+0xea>
	  {
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 8000e4e:	f001 fa31 	bl	80022b4 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	4b47      	ldr	r3, [pc, #284]	@ (8000f74 <main+0x1f0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d9f4      	bls.n	8000e46 <main+0xc2>
		  {
			  timestamp = HAL_GetTick() + 1;
 8000e5c:	f001 fa2a 	bl	80022b4 <HAL_GetTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a43      	ldr	r2, [pc, #268]	@ (8000f74 <main+0x1f0>)
 8000e66:	6013      	str	r3, [r2, #0]
			  MotorControl();
 8000e68:	f000 fc52 	bl	8001710 <MotorControl>
 8000e6c:	e7eb      	b.n	8000e46 <main+0xc2>
		  }
	  }

	  else if (state == 1)
 8000e6e:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <main+0x1ec>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d10f      	bne.n	8000e96 <main+0x112>
	  {
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 8000e76:	f001 fa1d 	bl	80022b4 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f78 <main+0x1f4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d9e0      	bls.n	8000e46 <main+0xc2>
		  {
			  timestamp = HAL_GetTick() + 1;
 8000e84:	f001 fa16 	bl	80022b4 <HAL_GetTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8000f78 <main+0x1f4>)
 8000e8e:	6013      	str	r3, [r2, #0]
			  MotorControl2();
 8000e90:	f000 fd86 	bl	80019a0 <MotorControl2>
 8000e94:	e7d7      	b.n	8000e46 <main+0xc2>
		  }
	  }

	  else if (state == 2)
 8000e96:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <main+0x1ec>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d1d3      	bne.n	8000e46 <main+0xc2>
	  {
		  static uint32_t timestamp2 = 0;
		  currentTime = micros();
 8000e9e:	f000 fec7 	bl	8001c30 <micros>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4935      	ldr	r1, [pc, #212]	@ (8000f7c <main+0x1f8>)
 8000ea8:	e9c1 2300 	strd	r2, r3, [r1]

		  PWMDrive = (Rx[2]<< 8)+Rx[1];
 8000eac:	4b34      	ldr	r3, [pc, #208]	@ (8000f80 <main+0x1fc>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4a32      	ldr	r2, [pc, #200]	@ (8000f80 <main+0x1fc>)
 8000eb6:	7852      	ldrb	r2, [r2, #1]
 8000eb8:	4413      	add	r3, r2
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <main+0x200>)
 8000ebe:	801a      	strh	r2, [r3, #0]

		  if(currentTime > timestamp2)
 8000ec0:	4b31      	ldr	r3, [pc, #196]	@ (8000f88 <main+0x204>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	461c      	mov	r4, r3
 8000ec8:	4615      	mov	r5, r2
 8000eca:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <main+0x1f8>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	4294      	cmp	r4, r2
 8000ed2:	eb75 0303 	sbcs.w	r3, r5, r3
 8000ed6:	d2b6      	bcs.n	8000e46 <main+0xc2>
		  {
			  timestamp2 = currentTime + 500;//us
 8000ed8:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <main+0x1f8>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000ee4:	4a28      	ldr	r2, [pc, #160]	@ (8000f88 <main+0x204>)
 8000ee6:	6013      	str	r3, [r2, #0]

			  if(timestamp2 > 4294967296) timestamp2 = 0;

			  dataSend = fabs(RPMspeed);
 8000ee8:	4b28      	ldr	r3, [pc, #160]	@ (8000f8c <main+0x208>)
 8000eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fae4 	bl	80004bc <__aeabi_i2d>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4690      	mov	r8, r2
 8000efa:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8000efe:	4640      	mov	r0, r8
 8000f00:	4649      	mov	r1, r9
 8000f02:	f7ff fd57 	bl	80009b4 <__aeabi_d2uiz>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <main+0x20c>)
 8000f0c:	801a      	strh	r2, [r3, #0]

			  dataBytes[0] = header; // Header byte
 8000f0e:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <main+0x210>)
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <main+0x214>)
 8000f14:	701a      	strb	r2, [r3, #0]
			  dataBytes[1] = (uint8_t)(dataSend & 0xFF); // Lower byte
 8000f16:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <main+0x20c>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <main+0x214>)
 8000f1e:	705a      	strb	r2, [r3, #1]
			  dataBytes[2] = (uint8_t)((dataSend >> 8) & 0xFF); // Upper byte
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <main+0x20c>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <main+0x214>)
 8000f2c:	709a      	strb	r2, [r3, #2]
			  dataBytes[3] = 0x0A;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <main+0x214>)
 8000f30:	220a      	movs	r2, #10
 8000f32:	70da      	strb	r2, [r3, #3]

			  HAL_UART_Transmit(&hlpuart1, dataBytes, sizeof(dataBytes), 10);
 8000f34:	230a      	movs	r3, #10
 8000f36:	2204      	movs	r2, #4
 8000f38:	4917      	ldr	r1, [pc, #92]	@ (8000f98 <main+0x214>)
 8000f3a:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <main+0x218>)
 8000f3c:	f006 f816 	bl	8006f6c <HAL_UART_Transmit>
	  if (state == 0)
 8000f40:	e781      	b.n	8000e46 <main+0xc2>
 8000f42:	bf00      	nop
 8000f44:	20000194 	.word	0x20000194
 8000f48:	20000278 	.word	0x20000278
 8000f4c:	200001e0 	.word	0x200001e0
 8000f50:	2000022c 	.word	0x2000022c
 8000f54:	20000034 	.word	0x20000034
 8000f58:	200002d0 	.word	0x200002d0
 8000f5c:	200002fc 	.word	0x200002fc
 8000f60:	3e3851ec 	.word	0x3e3851ec
 8000f64:	3e99999a 	.word	0x3e99999a
 8000f68:	20000320 	.word	0x20000320
 8000f6c:	20000360 	.word	0x20000360
 8000f70:	200002c4 	.word	0x200002c4
 8000f74:	20000368 	.word	0x20000368
 8000f78:	2000036c 	.word	0x2000036c
 8000f7c:	200002c8 	.word	0x200002c8
 8000f80:	20000354 	.word	0x20000354
 8000f84:	2000035a 	.word	0x2000035a
 8000f88:	20000370 	.word	0x20000370
 8000f8c:	20000350 	.word	0x20000350
 8000f90:	2000000a 	.word	0x2000000a
 8000f94:	20000008 	.word	0x20000008
 8000f98:	2000035c 	.word	0x2000035c
 8000f9c:	20000100 	.word	0x20000100

08000fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b094      	sub	sp, #80	@ 0x50
 8000fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	2238      	movs	r2, #56	@ 0x38
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f008 f8ee 	bl	8009190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f003 fbee 	bl	80047a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd2:	2340      	movs	r3, #64	@ 0x40
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fe2:	2355      	movs	r3, #85	@ 0x55
 8000fe4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fc88 	bl	800490c <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001002:	f000 fe7d 	bl	8001d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	230f      	movs	r3, #15
 8001008:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100a:	2303      	movs	r3, #3
 800100c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2104      	movs	r1, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f003 ff86 	bl	8004f30 <HAL_RCC_ClockConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800102a:	f000 fe69 	bl	8001d00 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3750      	adds	r7, #80	@ 0x50
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2220      	movs	r2, #32
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f008 f89d 	bl	8009190 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001056:	4b33      	ldr	r3, [pc, #204]	@ (8001124 <MX_ADC1_Init+0xec>)
 8001058:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800105c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800105e:	4b31      	ldr	r3, [pc, #196]	@ (8001124 <MX_ADC1_Init+0xec>)
 8001060:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001064:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001066:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <MX_ADC1_Init+0xec>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106c:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <MX_ADC1_Init+0xec>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001072:	4b2c      	ldr	r3, [pc, #176]	@ (8001124 <MX_ADC1_Init+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001078:	4b2a      	ldr	r3, [pc, #168]	@ (8001124 <MX_ADC1_Init+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107e:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <MX_ADC1_Init+0xec>)
 8001080:	2204      	movs	r2, #4
 8001082:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001084:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <MX_ADC1_Init+0xec>)
 8001086:	2200      	movs	r2, #0
 8001088:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108a:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <MX_ADC1_Init+0xec>)
 800108c:	2200      	movs	r2, #0
 800108e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001090:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <MX_ADC1_Init+0xec>)
 8001092:	2201      	movs	r2, #1
 8001094:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001096:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <MX_ADC1_Init+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_ADC1_Init+0xec>)
 80010a0:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80010a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_ADC1_Init+0xec>)
 80010a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_ADC1_Init+0xec>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <MX_ADC1_Init+0xec>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_ADC1_Init+0xec>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c4:	4817      	ldr	r0, [pc, #92]	@ (8001124 <MX_ADC1_Init+0xec>)
 80010c6:	f001 fb45 	bl	8002754 <HAL_ADC_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010d0:	f000 fe16 	bl	8001d00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4811      	ldr	r0, [pc, #68]	@ (8001124 <MX_ADC1_Init+0xec>)
 80010e0:	f002 fc64 	bl	80039ac <HAL_ADCEx_MultiModeConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010ea:	f000 fe09 	bl	8001d00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001128 <MX_ADC1_Init+0xf0>)
 80010f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f2:	2306      	movs	r3, #6
 80010f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010f6:	2307      	movs	r3, #7
 80010f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010fa:	237f      	movs	r3, #127	@ 0x7f
 80010fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <MX_ADC1_Init+0xec>)
 800110c:	f001 fdd0 	bl	8002cb0 <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001116:	f000 fdf3 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	@ 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000034 	.word	0x20000034
 8001128:	04300002 	.word	0x04300002

0800112c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001132:	4a22      	ldr	r2, [pc, #136]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001134:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800116e:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001170:	f005 feac 	bl	8006ecc <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800117a:	f000 fdc1 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001182:	f007 ff04 	bl	8008f8e <HAL_UARTEx_SetTxFifoThreshold>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800118c:	f000 fdb8 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001190:	2100      	movs	r1, #0
 8001192:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 8001194:	f007 ff39 	bl	800900a <HAL_UARTEx_SetRxFifoThreshold>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800119e:	f000 fdaf 	bl	8001d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_LPUART1_UART_Init+0x8c>)
 80011a4:	f007 feba 	bl	8008f1c <HAL_UARTEx_DisableFifoMode>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011ae:	f000 fda7 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000100 	.word	0x20000100
 80011bc:	40008000 	.word	0x40008000

080011c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011de:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <MX_TIM3_Init+0x94>)
 80011e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <MX_TIM3_Init+0x98>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <MX_TIM3_Init+0x94>)
 80011e6:	22a9      	movs	r2, #169	@ 0xa9
 80011e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_TIM3_Init+0x94>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <MX_TIM3_Init+0x94>)
 80011f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <MX_TIM3_Init+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <MX_TIM3_Init+0x94>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001204:	4813      	ldr	r0, [pc, #76]	@ (8001254 <MX_TIM3_Init+0x94>)
 8001206:	f004 fafd 	bl	8005804 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001210:	f000 fd76 	bl	8001d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <MX_TIM3_Init+0x94>)
 8001222:	f004 ff73 	bl	800610c <HAL_TIM_ConfigClockSource>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800122c:	f000 fd68 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001230:	2320      	movs	r3, #32
 8001232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_TIM3_Init+0x94>)
 800123e:	f005 fd1b 	bl	8006c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001248:	f000 fd5a 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000194 	.word	0x20000194
 8001258:	40000400 	.word	0x40000400

0800125c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	@ 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	@ 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f007 ff90 	bl	8009190 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800127a:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <MX_TIM4_Init+0xa4>)
 800127c:	4a21      	ldr	r2, [pc, #132]	@ (8001304 <MX_TIM4_Init+0xa8>)
 800127e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <MX_TIM4_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_TIM4_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3071;
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM4_Init+0xa4>)
 800128e:	f640 32ff 	movw	r2, #3071	@ 0xbff
 8001292:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b1a      	ldr	r3, [pc, #104]	@ (8001300 <MX_TIM4_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_TIM4_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a0:	2303      	movs	r3, #3
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_TIM4_Init+0xa4>)
 80012cc:	f004 fcd6 	bl	8005c7c <HAL_TIM_Encoder_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012d6:	f000 fd13 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	@ (8001300 <MX_TIM4_Init+0xa4>)
 80012e8:	f005 fcc6 	bl	8006c78 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012f2:	f000 fd05 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	@ 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001e0 	.word	0x200001e0
 8001304:	40000800 	.word	0x40000800

08001308 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001326:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <MX_TIM5_Init+0x94>)
 8001328:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <MX_TIM5_Init+0x98>)
 800132a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800132c:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <MX_TIM5_Init+0x94>)
 800132e:	22a9      	movs	r2, #169	@ 0xa9
 8001330:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_TIM5_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_TIM5_Init+0x94>)
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <MX_TIM5_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_TIM5_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	@ (800139c <MX_TIM5_Init+0x94>)
 800134e:	f004 fa59 	bl	8005804 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 fcd2 	bl	8001d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <MX_TIM5_Init+0x94>)
 800136a:	f004 fecf 	bl	800610c <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 fcc4 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_TIM5_Init+0x94>)
 8001386:	f005 fc77 	bl	8006c78 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 fcb6 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000022c 	.word	0x2000022c
 80013a0:	40000c00 	.word	0x40000c00

080013a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09c      	sub	sp, #112	@ 0x70
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2234      	movs	r2, #52	@ 0x34
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f007 fed6 	bl	8009190 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013e4:	4b51      	ldr	r3, [pc, #324]	@ (800152c <MX_TIM8_Init+0x188>)
 80013e6:	4a52      	ldr	r2, [pc, #328]	@ (8001530 <MX_TIM8_Init+0x18c>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 80013ea:	4b50      	ldr	r3, [pc, #320]	@ (800152c <MX_TIM8_Init+0x188>)
 80013ec:	2210      	movs	r2, #16
 80013ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b4e      	ldr	r3, [pc, #312]	@ (800152c <MX_TIM8_Init+0x188>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 80013f6:	4b4d      	ldr	r3, [pc, #308]	@ (800152c <MX_TIM8_Init+0x188>)
 80013f8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80013fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b4b      	ldr	r3, [pc, #300]	@ (800152c <MX_TIM8_Init+0x188>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001404:	4b49      	ldr	r3, [pc, #292]	@ (800152c <MX_TIM8_Init+0x188>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b48      	ldr	r3, [pc, #288]	@ (800152c <MX_TIM8_Init+0x188>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001410:	4846      	ldr	r0, [pc, #280]	@ (800152c <MX_TIM8_Init+0x188>)
 8001412:	f004 f9f7 	bl	8005804 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800141c:	f000 fc70 	bl	8001d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001424:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800142a:	4619      	mov	r1, r3
 800142c:	483f      	ldr	r0, [pc, #252]	@ (800152c <MX_TIM8_Init+0x188>)
 800142e:	f004 fe6d 	bl	800610c <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001438:	f000 fc62 	bl	8001d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800143c:	483b      	ldr	r0, [pc, #236]	@ (800152c <MX_TIM8_Init+0x188>)
 800143e:	f004 faa9 	bl	8005994 <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001448:	f000 fc5a 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001458:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800145c:	4619      	mov	r1, r3
 800145e:	4833      	ldr	r0, [pc, #204]	@ (800152c <MX_TIM8_Init+0x188>)
 8001460:	f005 fc0a 	bl	8006c78 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800146a:	f000 fc49 	bl	8001d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	@ 0x60
 8001470:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800147a:	2300      	movs	r3, #0
 800147c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	4826      	ldr	r0, [pc, #152]	@ (800152c <MX_TIM8_Init+0x188>)
 8001494:	f004 fd26 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800149e:	f000 fc2f 	bl	8001d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014a6:	2204      	movs	r2, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	4820      	ldr	r0, [pc, #128]	@ (800152c <MX_TIM8_Init+0x188>)
 80014ac:	f004 fd1a 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80014b6:	f000 fc23 	bl	8001d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014be:	2208      	movs	r2, #8
 80014c0:	4619      	mov	r1, r3
 80014c2:	481a      	ldr	r0, [pc, #104]	@ (800152c <MX_TIM8_Init+0x188>)
 80014c4:	f004 fd0e 	bl	8005ee4 <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80014ce:	f000 fc17 	bl	8001d00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4807      	ldr	r0, [pc, #28]	@ (800152c <MX_TIM8_Init+0x188>)
 8001510:	f005 fc48 	bl	8006da4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 800151a:	f000 fbf1 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800151e:	4803      	ldr	r0, [pc, #12]	@ (800152c <MX_TIM8_Init+0x188>)
 8001520:	f000 fd86 	bl	8002030 <HAL_TIM_MspPostInit>

}
 8001524:	bf00      	nop
 8001526:	3770      	adds	r7, #112	@ 0x70
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000278 	.word	0x20000278
 8001530:	40013400 	.word	0x40013400

08001534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800153a:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_DMA_Init+0x50>)
 800153c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800153e:	4a11      	ldr	r2, [pc, #68]	@ (8001584 <MX_DMA_Init+0x50>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	6493      	str	r3, [r2, #72]	@ 0x48
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <MX_DMA_Init+0x50>)
 8001548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_DMA_Init+0x50>)
 8001554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001556:	4a0b      	ldr	r2, [pc, #44]	@ (8001584 <MX_DMA_Init+0x50>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6493      	str	r3, [r2, #72]	@ 0x48
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_DMA_Init+0x50>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	200b      	movs	r0, #11
 8001570:	f002 fbff 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001574:	200b      	movs	r0, #11
 8001576:	f002 fc16 	bl	8003da6 <HAL_NVIC_EnableIRQ>

}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	4b30      	ldr	r3, [pc, #192]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015bc:	f043 0320 	orr.w	r3, r3, #32
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <MX_GPIO_Init+0xd8>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8001604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001608:	f003 f89c 	bl	8004744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001612:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4810      	ldr	r0, [pc, #64]	@ (8001664 <MX_GPIO_Init+0xdc>)
 8001624:	f002 ff0c 	bl	8004440 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 8001628:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001644:	f002 fefc 	bl	8004440 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2028      	movs	r0, #40	@ 0x28
 800164e:	f002 fb90 	bl	8003d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001652:	2028      	movs	r0, #40	@ 0x28
 8001654:	f002 fba7 	bl	8003da6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	@ 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	48000800 	.word	0x48000800

08001668 <ADC_Averaged>:

/* USER CODE BEGIN 4 */
void ADC_Averaged()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	e00c      	b.n	800168e <ADC_Averaged+0x26>
	{
		ADC_SumAPot += ADCBuffer[i];
 8001674:	4a20      	ldr	r2, [pc, #128]	@ (80016f8 <ADC_Averaged+0x90>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167c:	461a      	mov	r2, r3
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <ADC_Averaged+0x94>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a1d      	ldr	r2, [pc, #116]	@ (80016fc <ADC_Averaged+0x94>)
 8001686:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3301      	adds	r3, #1
 800168c:	607b      	str	r3, [r7, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b09      	cmp	r3, #9
 8001692:	ddef      	ble.n	8001674 <ADC_Averaged+0xc>
	}

	ADC_Average = ADC_SumAPot / 10;
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <ADC_Averaged+0x94>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	@ (8001700 <ADC_Averaged+0x98>)
 800169a:	fb82 1203 	smull	r1, r2, r2, r3
 800169e:	1092      	asrs	r2, r2, #2
 80016a0:	17db      	asrs	r3, r3, #31
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <ADC_Averaged+0x9c>)
 80016a6:	6013      	str	r3, [r2, #0]
	ADC_SumAPot = 0;
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <ADC_Averaged+0x94>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
	Degrees_Position = (ADC_Average * 360.00) / 4095.00;
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <ADC_Averaged+0x9c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff02 	bl	80004bc <__aeabi_i2d>
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <ADC_Averaged+0xa0>)
 80016be:	f7fe ff67 	bl	8000590 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	a309      	add	r3, pc, #36	@ (adr r3, 80016f0 <ADC_Averaged+0x88>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7ff f888 	bl	80007e4 <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff f98a 	bl	80009f4 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <ADC_Averaged+0xa4>)
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	00000000 	.word	0x00000000
 80016f4:	40affe00 	.word	0x40affe00
 80016f8:	200002d0 	.word	0x200002d0
 80016fc:	200002e8 	.word	0x200002e8
 8001700:	66666667 	.word	0x66666667
 8001704:	200002e4 	.word	0x200002e4
 8001708:	40768000 	.word	0x40768000
 800170c:	200002ec 	.word	0x200002ec

08001710 <MotorControl>:

void MotorControl()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
	ADC_Averaged();
 8001716:	f7ff ffa7 	bl	8001668 <ADC_Averaged>
	Vfeedback = arm_pid_f32(&PID2, setposition - Degrees_Position);
 800171a:	4b8f      	ldr	r3, [pc, #572]	@ (8001958 <MotorControl+0x248>)
 800171c:	ed93 7a00 	vldr	s14, [r3]
 8001720:	4b8e      	ldr	r3, [pc, #568]	@ (800195c <MotorControl+0x24c>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172a:	4b8d      	ldr	r3, [pc, #564]	@ (8001960 <MotorControl+0x250>)
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	ed93 7a00 	vldr	s14, [r3]
 8001738:	edd7 7a02 	vldr	s15, [r7, #8]
 800173c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	edd3 6a01 	vldr	s13, [r3, #4]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	edd3 7a03 	vldr	s15, [r3, #12]
 800174c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001750:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	edd3 6a02 	vldr	s13, [r3, #8]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001772:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a75      	ldr	r2, [pc, #468]	@ (8001964 <MotorControl+0x254>)
 800178e:	6013      	str	r3, [r2, #0]

	if (Vfeedback >= 0)
 8001790:	4b74      	ldr	r3, [pc, #464]	@ (8001964 <MotorControl+0x254>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	db69      	blt.n	8001874 <MotorControl+0x164>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017aa:	f002 ffcb 	bl	8004744 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b8:	f002 ffc4 	bl	8004744 <HAL_GPIO_WritePin>
		DutyCycle = ((Vfeedback * 4899.00) / 40.00) + 100;
 80017bc:	4b69      	ldr	r3, [pc, #420]	@ (8001964 <MotorControl+0x254>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe8d 	bl	80004e0 <__aeabi_f2d>
 80017c6:	a362      	add	r3, pc, #392	@ (adr r3, 8001950 <MotorControl+0x240>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fee0 	bl	8000590 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b62      	ldr	r3, [pc, #392]	@ (8001968 <MotorControl+0x258>)
 80017de:	f7ff f801 	bl	80007e4 <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	4b5f      	ldr	r3, [pc, #380]	@ (800196c <MotorControl+0x25c>)
 80017f0:	f7fe fd18 	bl	8000224 <__adddf3>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f8fa 	bl	80009f4 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <MotorControl+0x260>)
 8001804:	6013      	str	r3, [r2, #0]
		if (DutyCycle > 4999) DutyCycle = 4999;
 8001806:	4b5a      	ldr	r3, [pc, #360]	@ (8001970 <MotorControl+0x260>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001974 <MotorControl+0x264>
 8001810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001818:	dd03      	ble.n	8001822 <MotorControl+0x112>
 800181a:	4b55      	ldr	r3, [pc, #340]	@ (8001970 <MotorControl+0x260>)
 800181c:	4a56      	ldr	r2, [pc, #344]	@ (8001978 <MotorControl+0x268>)
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e01b      	b.n	800185a <MotorControl+0x14a>
		else if (DutyCycle < 2500) DutyCycle = 0;
 8001822:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <MotorControl+0x260>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800197c <MotorControl+0x26c>
 800182c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	d504      	bpl.n	8001840 <MotorControl+0x130>
 8001836:	4b4e      	ldr	r3, [pc, #312]	@ (8001970 <MotorControl+0x260>)
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e00c      	b.n	800185a <MotorControl+0x14a>
		else if (DutyCycle < 2600) DutyCycle = 2600;
 8001840:	4b4b      	ldr	r3, [pc, #300]	@ (8001970 <MotorControl+0x260>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001980 <MotorControl+0x270>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d502      	bpl.n	800185a <MotorControl+0x14a>
 8001854:	4b46      	ldr	r3, [pc, #280]	@ (8001970 <MotorControl+0x260>)
 8001856:	4a4b      	ldr	r2, [pc, #300]	@ (8001984 <MotorControl+0x274>)
 8001858:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
 800185a:	4b45      	ldr	r3, [pc, #276]	@ (8001970 <MotorControl+0x260>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	eef0 7ae7 	vabs.f32	s15, s15
 8001864:	4b48      	ldr	r3, [pc, #288]	@ (8001988 <MotorControl+0x278>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186c:	ee17 2a90 	vmov	r2, s15
 8001870:	635a      	str	r2, [r3, #52]	@ 0x34
		if (DutyCycle < -4999) DutyCycle = -4999;
		else if (DutyCycle > -2500) DutyCycle = 0;
		else if (DutyCycle > -2600) DutyCycle = -2600;
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
	}
}
 8001872:	e068      	b.n	8001946 <MotorControl+0x236>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800187a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187e:	f002 ff61 	bl	8004744 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188c:	f002 ff5a 	bl	8004744 <HAL_GPIO_WritePin>
		DutyCycle = ((Vfeedback * 4899.00) / 40.00) - 100;
 8001890:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <MotorControl+0x254>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe23 	bl	80004e0 <__aeabi_f2d>
 800189a:	a32d      	add	r3, pc, #180	@ (adr r3, 8001950 <MotorControl+0x240>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe fe76 	bl	8000590 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001968 <MotorControl+0x258>)
 80018b2:	f7fe ff97 	bl	80007e4 <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b2a      	ldr	r3, [pc, #168]	@ (800196c <MotorControl+0x25c>)
 80018c4:	f7fe fcac 	bl	8000220 <__aeabi_dsub>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff f890 	bl	80009f4 <__aeabi_d2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a26      	ldr	r2, [pc, #152]	@ (8001970 <MotorControl+0x260>)
 80018d8:	6013      	str	r3, [r2, #0]
		if (DutyCycle < -4999) DutyCycle = -4999;
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <MotorControl+0x260>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800198c <MotorControl+0x27c>
 80018e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	d503      	bpl.n	80018f6 <MotorControl+0x1e6>
 80018ee:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <MotorControl+0x260>)
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <MotorControl+0x280>)
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e01b      	b.n	800192e <MotorControl+0x21e>
		else if (DutyCycle > -2500) DutyCycle = 0;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001970 <MotorControl+0x260>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001994 <MotorControl+0x284>
 8001900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	dd04      	ble.n	8001914 <MotorControl+0x204>
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <MotorControl+0x260>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e00c      	b.n	800192e <MotorControl+0x21e>
		else if (DutyCycle > -2600) DutyCycle = -2600;
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <MotorControl+0x260>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001998 <MotorControl+0x288>
 800191e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	dd02      	ble.n	800192e <MotorControl+0x21e>
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <MotorControl+0x260>)
 800192a:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <MotorControl+0x28c>)
 800192c:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <MotorControl+0x260>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	eef0 7ae7 	vabs.f32	s15, s15
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <MotorControl+0x278>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001940:	ee17 2a90 	vmov	r2, s15
 8001944:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	00000000 	.word	0x00000000
 8001954:	40b32300 	.word	0x40b32300
 8001958:	20000000 	.word	0x20000000
 800195c:	200002ec 	.word	0x200002ec
 8001960:	20000320 	.word	0x20000320
 8001964:	20000344 	.word	0x20000344
 8001968:	40440000 	.word	0x40440000
 800196c:	40590000 	.word	0x40590000
 8001970:	200002f4 	.word	0x200002f4
 8001974:	459c3800 	.word	0x459c3800
 8001978:	459c3800 	.word	0x459c3800
 800197c:	451c4000 	.word	0x451c4000
 8001980:	45228000 	.word	0x45228000
 8001984:	45228000 	.word	0x45228000
 8001988:	20000278 	.word	0x20000278
 800198c:	c59c3800 	.word	0xc59c3800
 8001990:	c59c3800 	.word	0xc59c3800
 8001994:	c51c4000 	.word	0xc51c4000
 8001998:	c5228000 	.word	0xc5228000
 800199c:	c5228000 	.word	0xc5228000

080019a0 <MotorControl2>:

void MotorControl2()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 80019a6:	4b92      	ldr	r3, [pc, #584]	@ (8001bf0 <MotorControl2+0x250>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	4a91      	ldr	r2, [pc, #580]	@ (8001bf4 <MotorControl2+0x254>)
 80019ae:	6013      	str	r3, [r2, #0]
	Degrees_Position2 = (QEIReadRaw * 360.00) / 3072.00;
 80019b0:	4b90      	ldr	r3, [pc, #576]	@ (8001bf4 <MotorControl2+0x254>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fd71 	bl	800049c <__aeabi_ui2d>
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	4b8e      	ldr	r3, [pc, #568]	@ (8001bf8 <MotorControl2+0x258>)
 80019c0:	f7fe fde6 	bl	8000590 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b8a      	ldr	r3, [pc, #552]	@ (8001bfc <MotorControl2+0x25c>)
 80019d2:	f7fe ff07 	bl	80007e4 <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff f809 	bl	80009f4 <__aeabi_d2f>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a86      	ldr	r2, [pc, #536]	@ (8001c00 <MotorControl2+0x260>)
 80019e6:	6013      	str	r3, [r2, #0]

	Vfeedback2 = arm_pid_f32(&PID, setposition2 - Degrees_Position2);
 80019e8:	4b86      	ldr	r3, [pc, #536]	@ (8001c04 <MotorControl2+0x264>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	4b84      	ldr	r3, [pc, #528]	@ (8001c00 <MotorControl2+0x260>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	4b83      	ldr	r3, [pc, #524]	@ (8001c08 <MotorControl2+0x268>)
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a40:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	615a      	str	r2, [r3, #20]
    return (out);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a6c      	ldr	r2, [pc, #432]	@ (8001c0c <MotorControl2+0x26c>)
 8001a5c:	6013      	str	r3, [r2, #0]

	if (Vfeedback2 >= 0)
 8001a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8001c0c <MotorControl2+0x26c>)
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6c:	db5e      	blt.n	8001b2c <MotorControl2+0x18c>
	{
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001a6e:	4b68      	ldr	r3, [pc, #416]	@ (8001c10 <MotorControl2+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001a76:	2201      	movs	r2, #1
 8001a78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a80:	f002 fe60 	bl	8004744 <HAL_GPIO_WritePin>
		DutyCycle2 = ((Vfeedback2 * 4799.00) / 20.00) + 200;
 8001a84:	4b61      	ldr	r3, [pc, #388]	@ (8001c0c <MotorControl2+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd29 	bl	80004e0 <__aeabi_f2d>
 8001a8e:	a356      	add	r3, pc, #344	@ (adr r3, 8001be8 <MotorControl2+0x248>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fd7c 	bl	8000590 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b5b      	ldr	r3, [pc, #364]	@ (8001c14 <MotorControl2+0x274>)
 8001aa6:	f7fe fe9d 	bl	80007e4 <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	4b58      	ldr	r3, [pc, #352]	@ (8001c18 <MotorControl2+0x278>)
 8001ab8:	f7fe fbb4 	bl	8000224 <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7fe ff96 	bl	80009f4 <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4a54      	ldr	r2, [pc, #336]	@ (8001c1c <MotorControl2+0x27c>)
 8001acc:	6013      	str	r3, [r2, #0]
		if (DutyCycle2 > 4999) DutyCycle2 = 4999;
 8001ace:	4b53      	ldr	r3, [pc, #332]	@ (8001c1c <MotorControl2+0x27c>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001c20 <MotorControl2+0x280>
 8001ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	dd02      	ble.n	8001ae8 <MotorControl2+0x148>
 8001ae2:	4b4e      	ldr	r3, [pc, #312]	@ (8001c1c <MotorControl2+0x27c>)
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	@ (8001c24 <MotorControl2+0x284>)
 8001ae6:	601a      	str	r2, [r3, #0]

		if (fabs(setposition2 - Degrees_Position2) <= 0.5) DutyCycle2 = 0;
 8001ae8:	4b46      	ldr	r3, [pc, #280]	@ (8001c04 <MotorControl2+0x264>)
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	4b44      	ldr	r3, [pc, #272]	@ (8001c00 <MotorControl2+0x260>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af8:	eef0 7ae7 	vabs.f32	s15, s15
 8001afc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	d803      	bhi.n	8001b12 <MotorControl2+0x172>
 8001b0a:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <MotorControl2+0x27c>)
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, fabs(DutyCycle2));
 8001b12:	4b42      	ldr	r3, [pc, #264]	@ (8001c1c <MotorControl2+0x27c>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	eef0 7ae7 	vabs.f32	s15, s15
 8001b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c10 <MotorControl2+0x270>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b24:	ee17 2a90 	vmov	r2, s15
 8001b28:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (fabs(setposition2 - Degrees_Position2) <= 0.5) DutyCycle2 = 0;

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, fabs(DutyCycle2));
	}
}
 8001b2a:	e056      	b.n	8001bda <MotorControl2+0x23a>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001b2c:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <MotorControl2+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	63da      	str	r2, [r3, #60]	@ 0x3c
		DutyCycle2 = ((Vfeedback2 * 4799.00) / 20.00) - 200;
 8001b34:	4b35      	ldr	r3, [pc, #212]	@ (8001c0c <MotorControl2+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fcd1 	bl	80004e0 <__aeabi_f2d>
 8001b3e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001be8 <MotorControl2+0x248>)
 8001b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b44:	f7fe fd24 	bl	8000590 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <MotorControl2+0x274>)
 8001b56:	f7fe fe45 	bl	80007e4 <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	4b2c      	ldr	r3, [pc, #176]	@ (8001c18 <MotorControl2+0x278>)
 8001b68:	f7fe fb5a 	bl	8000220 <__aeabi_dsub>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe ff3e 	bl	80009f4 <__aeabi_d2f>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a28      	ldr	r2, [pc, #160]	@ (8001c1c <MotorControl2+0x27c>)
 8001b7c:	6013      	str	r3, [r2, #0]
		if (DutyCycle2 < -4999) DutyCycle2 = -4999;
 8001b7e:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <MotorControl2+0x27c>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001c28 <MotorControl2+0x288>
 8001b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	d502      	bpl.n	8001b98 <MotorControl2+0x1f8>
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <MotorControl2+0x27c>)
 8001b94:	4a25      	ldr	r2, [pc, #148]	@ (8001c2c <MotorControl2+0x28c>)
 8001b96:	601a      	str	r2, [r3, #0]
		if (fabs(setposition2 - Degrees_Position2) <= 0.5) DutyCycle2 = 0;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <MotorControl2+0x264>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <MotorControl2+0x260>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb8:	d803      	bhi.n	8001bc2 <MotorControl2+0x222>
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <MotorControl2+0x27c>)
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, fabs(DutyCycle2));
 8001bc2:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MotorControl2+0x27c>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bcc:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <MotorControl2+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bd4:	ee17 2a90 	vmov	r2, s15
 8001bd8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	00000000 	.word	0x00000000
 8001bec:	40b2bf00 	.word	0x40b2bf00
 8001bf0:	200001e0 	.word	0x200001e0
 8001bf4:	2000034c 	.word	0x2000034c
 8001bf8:	40768000 	.word	0x40768000
 8001bfc:	40a80000 	.word	0x40a80000
 8001c00:	200002f0 	.word	0x200002f0
 8001c04:	20000004 	.word	0x20000004
 8001c08:	200002fc 	.word	0x200002fc
 8001c0c:	20000348 	.word	0x20000348
 8001c10:	20000278 	.word	0x20000278
 8001c14:	40340000 	.word	0x40340000
 8001c18:	40690000 	.word	0x40690000
 8001c1c:	200002f8 	.word	0x200002f8
 8001c20:	459c3800 	.word	0x459c3800
 8001c24:	459c3800 	.word	0x459c3800
 8001c28:	c59c3800 	.word	0xc59c3800
 8001c2c:	c59c3800 	.word	0xc59c3800

08001c30 <micros>:
		_micros += UINT32_MAX;
	}
}

uint64_t micros()
{
 8001c30:	b4b0      	push	{r4, r5, r7}
 8001c32:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8001c34:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <micros+0x2c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <micros+0x30>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	1884      	adds	r4, r0, r2
 8001c48:	eb41 0503 	adc.w	r5, r1, r3
 8001c4c:	4622      	mov	r2, r4
 8001c4e:	462b      	mov	r3, r5
}
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bcb0      	pop	{r4, r5, r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000022c 	.word	0x2000022c
 8001c60:	20000360 	.word	0x20000360

08001c64 <UARTInterruptConfig>:
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
	QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
}

void UARTInterruptConfig()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Rx,4);
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <UARTInterruptConfig+0x14>)
 8001c6c:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <UARTInterruptConfig+0x18>)
 8001c6e:	f005 fa0b 	bl	8007088 <HAL_UART_Receive_IT>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000354 	.word	0x20000354
 8001c7c:	20000100 	.word	0x20000100

08001c80 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x28>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d107      	bne.n	8001ca0 <HAL_UART_RxCpltCallback+0x20>
	{
		Rx[4] = '\0';
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_UART_RxCpltCallback+0x2c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, Rx, 4);
 8001c96:	2204      	movs	r2, #4
 8001c98:	4904      	ldr	r1, [pc, #16]	@ (8001cac <HAL_UART_RxCpltCallback+0x2c>)
 8001c9a:	4803      	ldr	r0, [pc, #12]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x28>)
 8001c9c:	f005 f9f4 	bl	8007088 <HAL_UART_Receive_IT>
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000100 	.word	0x20000100
 8001cac:	20000354 	.word	0x20000354

08001cb0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cc0:	d116      	bne.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x40>
	{
		switch (state)
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d00e      	beq.n	8001ce8 <HAL_GPIO_EXTI_Callback+0x38>
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	dc10      	bgt.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x40>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <HAL_GPIO_EXTI_Callback+0x28>
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d004      	beq.n	8001ce0 <HAL_GPIO_EXTI_Callback+0x30>
		case 2:
			state = 0;
			break;
		}
	}
}
 8001cd6:	e00b      	b.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x40>
			state = 1;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
			break;
 8001cde:	e007      	b.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x40>
			state = 2;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	701a      	strb	r2, [r3, #0]
			break;
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x40>
			state = 0;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
			break;
 8001cee:	bf00      	nop
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	200002c4 	.word	0x200002c4

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
}
 8001d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <Error_Handler+0x8>

08001d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_MspInit+0x44>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d16:	4a0e      	ldr	r2, [pc, #56]	@ (8001d50 <HAL_MspInit+0x44>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_MspInit+0x44>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_MspInit+0x44>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <HAL_MspInit+0x44>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_MspInit+0x44>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001d42:	f002 fdd3 	bl	80048ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000

08001d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b09e      	sub	sp, #120	@ 0x78
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2254      	movs	r2, #84	@ 0x54
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f007 fa0b 	bl	8009190 <memset>
  if(hadc->Instance==ADC1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d82:	d15f      	bne.n	8001e44 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001d84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d8a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001d8e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fae7 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001da0:	f7ff ffae 	bl	8001d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001da4:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <HAL_ADC_MspInit+0xf8>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da8:	4a28      	ldr	r2, [pc, #160]	@ (8001e4c <HAL_ADC_MspInit+0xf8>)
 8001daa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db0:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <HAL_ADC_MspInit+0xf8>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <HAL_ADC_MspInit+0xf8>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	4a22      	ldr	r2, [pc, #136]	@ (8001e4c <HAL_ADC_MspInit+0xf8>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_ADC_MspInit+0xf8>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dea:	f002 fb29 	bl	8004440 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001df0:	4a18      	ldr	r2, [pc, #96]	@ (8001e54 <HAL_ADC_MspInit+0x100>)
 8001df2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001df6:	2205      	movs	r2, #5
 8001df8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e08:	2280      	movs	r2, #128	@ 0x80
 8001e0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e1e:	2220      	movs	r2, #32
 8001e20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e28:	4809      	ldr	r0, [pc, #36]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e2a:	f001 ffd7 	bl	8003ddc <HAL_DMA_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001e34:	f7ff ff64 	bl	8001d00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e3e:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <HAL_ADC_MspInit+0xfc>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3778      	adds	r7, #120	@ 0x78
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	200000a0 	.word	0x200000a0
 8001e54:	40020008 	.word	0x40020008

08001e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b09e      	sub	sp, #120	@ 0x78
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	2254      	movs	r2, #84	@ 0x54
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f007 f989 	bl	8009190 <memset>
  if(huart->Instance==LPUART1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <HAL_UART_MspInit+0xb8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d13e      	bne.n	8001f06 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 fa67 	bl	8005368 <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ea0:	f7ff ff2e 	bl	8001d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_UART_MspInit+0xbc>)
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f14 <HAL_UART_MspInit+0xbc>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001eb0:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <HAL_UART_MspInit+0xbc>)
 8001eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebc:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_UART_MspInit+0xbc>)
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec0:	4a14      	ldr	r2, [pc, #80]	@ (8001f14 <HAL_UART_MspInit+0xbc>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_UART_MspInit+0xbc>)
 8001eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ef2:	f002 faa5 	bl	8004440 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	205b      	movs	r0, #91	@ 0x5b
 8001efc:	f001 ff39 	bl	8003d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001f00:	205b      	movs	r0, #91	@ 0x5b
 8001f02:	f001 ff50 	bl	8003da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3778      	adds	r7, #120	@ 0x78
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40008000 	.word	0x40008000
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1c      	ldr	r2, [pc, #112]	@ (8001f98 <HAL_TIM_Base_MspInit+0x80>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d10c      	bne.n	8001f44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f30:	f043 0302 	orr.w	r3, r3, #2
 8001f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f42:	e022      	b.n	8001f8a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a15      	ldr	r2, [pc, #84]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x88>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d10c      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f4e:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
}
 8001f66:	e010      	b.n	8001f8a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x8c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10b      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f76:	4a09      	ldr	r2, [pc, #36]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f7e:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <HAL_TIM_Base_MspInit+0x84>)
 8001f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
}
 8001f8a:	bf00      	nop
 8001f8c:	371c      	adds	r7, #28
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40000c00 	.word	0x40000c00
 8001fa4:	40013400 	.word	0x40013400

08001fa8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d127      	bne.n	800201a <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fca:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	4a16      	ldr	r2, [pc, #88]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	4a10      	ldr	r2, [pc, #64]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x80>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ffa:	23c0      	movs	r3, #192	@ 0xc0
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800200a:	2302      	movs	r3, #2
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	@ (800202c <HAL_TIM_Encoder_MspInit+0x84>)
 8002016:	f002 fa13 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800201a:	bf00      	nop
 800201c:	3728      	adds	r7, #40	@ 0x28
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40000800 	.word	0x40000800
 8002028:	40021000 	.word	0x40021000
 800202c:	48000400 	.word	0x48000400

08002030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1f      	ldr	r2, [pc, #124]	@ (80020cc <HAL_TIM_MspPostInit+0x9c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d138      	bne.n	80020c4 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_TIM_MspPostInit+0xa0>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	4a1e      	ldr	r2, [pc, #120]	@ (80020d0 <HAL_TIM_MspPostInit+0xa0>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800205e:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <HAL_TIM_MspPostInit+0xa0>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_TIM_MspPostInit+0xa0>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	4a18      	ldr	r2, [pc, #96]	@ (80020d0 <HAL_TIM_MspPostInit+0xa0>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <HAL_TIM_MspPostInit+0xa0>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002082:	23c0      	movs	r3, #192	@ 0xc0
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002092:	2304      	movs	r3, #4
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <HAL_TIM_MspPostInit+0xa4>)
 800209e:	f002 f9cf 	bl	8004440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80020b4:	230a      	movs	r3, #10
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	@ (80020d8 <HAL_TIM_MspPostInit+0xa8>)
 80020c0:	f002 f9be 	bl	8004440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	@ 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40013400 	.word	0x40013400
 80020d0:	40021000 	.word	0x40021000
 80020d4:	48000800 	.word	0x48000800
 80020d8:	48000400 	.word	0x48000400

080020dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <NMI_Handler+0x4>

080020e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <HardFault_Handler+0x4>

080020ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <MemManage_Handler+0x4>

080020f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <BusFault_Handler+0x4>

080020fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <UsageFault_Handler+0x4>

08002104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002132:	f000 f8ad 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <DMA1_Channel1_IRQHandler+0x10>)
 8002142:	f002 f82e 	bl	80041a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200000a0 	.word	0x200000a0

08002150 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002154:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002158:	f002 fb0c 	bl	8004774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002164:	4802      	ldr	r0, [pc, #8]	@ (8002170 <LPUART1_IRQHandler+0x10>)
 8002166:	f004 ffdb 	bl	8007120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000100 	.word	0x20000100

08002174 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	@ (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002198:	480d      	ldr	r0, [pc, #52]	@ (80021d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800219a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800219c:	f7ff ffea 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	@ (80021d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <LoopForever+0xe>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	@ (80021e4 <LoopForever+0x16>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f006 ffeb 	bl	80091a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ca:	f7fe fddb 	bl	8000d84 <main>

080021ce <LoopForever>:

LoopForever:
    b LoopForever
 80021ce:	e7fe      	b.n	80021ce <LoopForever>
  ldr   r0, =_estack
 80021d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80021dc:	08009250 	.word	0x08009250
  ldr r2, =_sbss
 80021e0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80021e4:	20000378 	.word	0x20000378

080021e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_2_IRQHandler>

080021ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f001 fdb1 	bl	8003d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 f80e 	bl	800221c <HAL_InitTick>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	71fb      	strb	r3, [r7, #7]
 800220a:	e001      	b.n	8002210 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800220c:	f7ff fd7e 	bl	8001d0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002210:	79fb      	ldrb	r3, [r7, #7]

}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002228:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <HAL_InitTick+0x68>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d022      	beq.n	8002276 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002230:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <HAL_InitTick+0x6c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <HAL_InitTick+0x68>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800223c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	4618      	mov	r0, r3
 8002246:	f001 fdbc 	bl	8003dc2 <HAL_SYSTICK_Config>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10f      	bne.n	8002270 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	d809      	bhi.n	800226a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002256:	2200      	movs	r2, #0
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	f04f 30ff 	mov.w	r0, #4294967295
 800225e:	f001 fd88 	bl	8003d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <HAL_InitTick+0x70>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e007      	b.n	800227a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e004      	b.n	800227a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
 8002274:	e001      	b.n	800227a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800227a:	7bfb      	ldrb	r3, [r7, #15]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000014 	.word	0x20000014
 8002288:	2000000c 	.word	0x2000000c
 800228c:	20000010 	.word	0x20000010

08002290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_IncTick+0x1c>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_IncTick+0x20>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4413      	add	r3, r2
 800229e:	4a03      	ldr	r2, [pc, #12]	@ (80022ac <HAL_IncTick+0x1c>)
 80022a0:	6013      	str	r3, [r2, #0]
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	20000374 	.word	0x20000374
 80022b0:	20000014 	.word	0x20000014

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	@ (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000374 	.word	0x20000374

080022cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3360      	adds	r3, #96	@ 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <LL_ADC_SetOffset+0x44>)
 8002356:	4013      	ands	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	4313      	orrs	r3, r2
 8002364:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800236c:	bf00      	nop
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	03fff000 	.word	0x03fff000

0800237c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3360      	adds	r3, #96	@ 0x60
 800238a:	461a      	mov	r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3360      	adds	r3, #96	@ 0x60
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3360      	adds	r3, #96	@ 0x60
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	431a      	orrs	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002408:	bf00      	nop
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3360      	adds	r3, #96	@ 0x60
 8002424:	461a      	mov	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	431a      	orrs	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	615a      	str	r2, [r3, #20]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002496:	b480      	push	{r7}
 8002498:	b087      	sub	sp, #28
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3330      	adds	r3, #48	@ 0x30
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	0a1b      	lsrs	r3, r3, #8
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	4413      	add	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	211f      	movs	r1, #31
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	401a      	ands	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0e9b      	lsrs	r3, r3, #26
 80024ce:	f003 011f 	and.w	r1, r3, #31
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	431a      	orrs	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	3314      	adds	r3, #20
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	0e5b      	lsrs	r3, r3, #25
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	0d1b      	lsrs	r3, r3, #20
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2107      	movs	r1, #7
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	401a      	ands	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	0d1b      	lsrs	r3, r3, #20
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	431a      	orrs	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002538:	bf00      	nop
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255c:	43db      	mvns	r3, r3
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0318 	and.w	r3, r3, #24
 8002566:	4908      	ldr	r1, [pc, #32]	@ (8002588 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002568:	40d9      	lsrs	r1, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	400b      	ands	r3, r1
 800256e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002572:	431a      	orrs	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	0007ffff 	.word	0x0007ffff

0800258c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 031f 	and.w	r3, r3, #31
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6093      	str	r3, [r2, #8]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e0:	d101      	bne.n	80025e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002604:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002608:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002630:	d101      	bne.n	8002636 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002654:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800267c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002680:	f043 0202 	orr.w	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <LL_ADC_IsEnabled+0x18>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <LL_ADC_IsEnabled+0x1a>
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d101      	bne.n	80026d2 <LL_ADC_IsDisableOngoing+0x18>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <LL_ADC_IsDisableOngoing+0x1a>
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b04      	cmp	r3, #4
 800271a:	d101      	bne.n	8002720 <LL_ADC_REG_IsConversionOngoing+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b08      	cmp	r3, #8
 8002740:	d101      	bne.n	8002746 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e1a9      	b.n	8002ac2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff fae9 	bl	8001d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff ff19 	bl	80025cc <LL_ADC_IsDeepPowerDownEnabled>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff feff 	bl	80025a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff34 	bl	800261c <LL_ADC_IsInternalRegulatorEnabled>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff18 	bl	80025f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002a38 <HAL_ADC_Init+0x2e4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	4a9c      	ldr	r2, [pc, #624]	@ (8002a3c <HAL_ADC_Init+0x2e8>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027d8:	e002      	b.n	80027e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f9      	bne.n	80027da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ff16 	bl	800261c <LL_ADC_IsInternalRegulatorEnabled>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fa:	f043 0210 	orr.w	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff76 	bl	8002708 <LL_ADC_REG_IsConversionOngoing>
 800281c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8142 	bne.w	8002ab0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 813e 	bne.w	8002ab0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800283c:	f043 0202 	orr.w	r2, r3, #2
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff23 	bl	8002694 <LL_ADC_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d141      	bne.n	80028d8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800285c:	d004      	beq.n	8002868 <HAL_ADC_Init+0x114>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a77      	ldr	r2, [pc, #476]	@ (8002a40 <HAL_ADC_Init+0x2ec>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d10f      	bne.n	8002888 <HAL_ADC_Init+0x134>
 8002868:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800286c:	f7ff ff12 	bl	8002694 <LL_ADC_IsEnabled>
 8002870:	4604      	mov	r4, r0
 8002872:	4873      	ldr	r0, [pc, #460]	@ (8002a40 <HAL_ADC_Init+0x2ec>)
 8002874:	f7ff ff0e 	bl	8002694 <LL_ADC_IsEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	4323      	orrs	r3, r4
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e012      	b.n	80028ae <HAL_ADC_Init+0x15a>
 8002888:	486e      	ldr	r0, [pc, #440]	@ (8002a44 <HAL_ADC_Init+0x2f0>)
 800288a:	f7ff ff03 	bl	8002694 <LL_ADC_IsEnabled>
 800288e:	4604      	mov	r4, r0
 8002890:	486d      	ldr	r0, [pc, #436]	@ (8002a48 <HAL_ADC_Init+0x2f4>)
 8002892:	f7ff feff 	bl	8002694 <LL_ADC_IsEnabled>
 8002896:	4603      	mov	r3, r0
 8002898:	431c      	orrs	r4, r3
 800289a:	486c      	ldr	r0, [pc, #432]	@ (8002a4c <HAL_ADC_Init+0x2f8>)
 800289c:	f7ff fefa 	bl	8002694 <LL_ADC_IsEnabled>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4323      	orrs	r3, r4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d012      	beq.n	80028d8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ba:	d004      	beq.n	80028c6 <HAL_ADC_Init+0x172>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a5f      	ldr	r2, [pc, #380]	@ (8002a40 <HAL_ADC_Init+0x2ec>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_Init+0x176>
 80028c6:	4a62      	ldr	r2, [pc, #392]	@ (8002a50 <HAL_ADC_Init+0x2fc>)
 80028c8:	e000      	b.n	80028cc <HAL_ADC_Init+0x178>
 80028ca:	4a62      	ldr	r2, [pc, #392]	@ (8002a54 <HAL_ADC_Init+0x300>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f7ff fcfa 	bl	80022cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7f5b      	ldrb	r3, [r3, #29]
 80028dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002902:	2b01      	cmp	r3, #1
 8002904:	d106      	bne.n	8002914 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	045b      	lsls	r3, r3, #17
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d009      	beq.n	8002930 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	4b48      	ldr	r3, [pc, #288]	@ (8002a58 <HAL_ADC_Init+0x304>)
 8002938:	4013      	ands	r3, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	69b9      	ldr	r1, [r7, #24]
 8002940:	430b      	orrs	r3, r1
 8002942:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fee5 	bl	800272e <LL_ADC_INJ_IsConversionOngoing>
 8002964:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d17f      	bne.n	8002a6c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d17c      	bne.n	8002a6c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002976:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800297e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800298e:	f023 0302 	bic.w	r3, r3, #2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	430b      	orrs	r3, r1
 800299a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d017      	beq.n	80029d4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6911      	ldr	r1, [r2, #16]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80029d2:	e013      	b.n	80029fc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80029e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d12a      	bne.n	8002a5c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a1c:	4311      	orrs	r1, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	e019      	b.n	8002a6c <HAL_ADC_Init+0x318>
 8002a38:	2000000c 	.word	0x2000000c
 8002a3c:	053e2d63 	.word	0x053e2d63
 8002a40:	50000100 	.word	0x50000100
 8002a44:	50000400 	.word	0x50000400
 8002a48:	50000500 	.word	0x50000500
 8002a4c:	50000600 	.word	0x50000600
 8002a50:	50000300 	.word	0x50000300
 8002a54:	50000700 	.word	0x50000700
 8002a58:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d10c      	bne.n	8002a8e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	f023 010f 	bic.w	r1, r3, #15
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	1e5a      	subs	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a8c:	e007      	b.n	8002a9e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 020f 	bic.w	r2, r2, #15
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aae:	e007      	b.n	8002ac0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	f043 0210 	orr.w	r2, r3, #16
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	@ 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	bf00      	nop

08002acc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae0:	d004      	beq.n	8002aec <HAL_ADC_Start_DMA+0x20>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a5a      	ldr	r2, [pc, #360]	@ (8002c50 <HAL_ADC_Start_DMA+0x184>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_Start_DMA+0x24>
 8002aec:	4b59      	ldr	r3, [pc, #356]	@ (8002c54 <HAL_ADC_Start_DMA+0x188>)
 8002aee:	e000      	b.n	8002af2 <HAL_ADC_Start_DMA+0x26>
 8002af0:	4b59      	ldr	r3, [pc, #356]	@ (8002c58 <HAL_ADC_Start_DMA+0x18c>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fd4a 	bl	800258c <LL_ADC_GetMultimode>
 8002af8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fe02 	bl	8002708 <LL_ADC_REG_IsConversionOngoing>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 809b 	bne.w	8002c42 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Start_DMA+0x4e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e096      	b.n	8002c48 <HAL_ADC_Start_DMA+0x17c>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a4d      	ldr	r2, [pc, #308]	@ (8002c5c <HAL_ADC_Start_DMA+0x190>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d008      	beq.n	8002b3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d002      	beq.n	8002b3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b09      	cmp	r3, #9
 8002b3c:	d17a      	bne.n	8002c34 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fcf6 	bl	8003530 <ADC_Enable>
 8002b44:	4603      	mov	r3, r0
 8002b46:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d16d      	bne.n	8002c2a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a3a      	ldr	r2, [pc, #232]	@ (8002c50 <HAL_ADC_Start_DMA+0x184>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_ADC_Start_DMA+0xb4>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3b      	ldr	r2, [pc, #236]	@ (8002c60 <HAL_ADC_Start_DMA+0x194>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d002      	beq.n	8002b7c <HAL_ADC_Start_DMA+0xb0>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e003      	b.n	8002b84 <HAL_ADC_Start_DMA+0xb8>
 8002b7c:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_ADC_Start_DMA+0x198>)
 8002b7e:	e001      	b.n	8002b84 <HAL_ADC_Start_DMA+0xb8>
 8002b80:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d002      	beq.n	8002b92 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bae:	f023 0206 	bic.w	r2, r3, #6
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	4a29      	ldr	r2, [pc, #164]	@ (8002c68 <HAL_ADC_Start_DMA+0x19c>)
 8002bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	4a28      	ldr	r2, [pc, #160]	@ (8002c6c <HAL_ADC_Start_DMA+0x1a0>)
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	4a27      	ldr	r2, [pc, #156]	@ (8002c70 <HAL_ADC_Start_DMA+0x1a4>)
 8002bd4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	221c      	movs	r2, #28
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0210 	orr.w	r2, r2, #16
 8002bf4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3340      	adds	r3, #64	@ 0x40
 8002c10:	4619      	mov	r1, r3
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f001 f989 	bl	8003f2c <HAL_DMA_Start_IT>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fd5c 	bl	80026e0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c28:	e00d      	b.n	8002c46 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002c40:	e001      	b.n	8002c46 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c42:	2302      	movs	r3, #2
 8002c44:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	50000100 	.word	0x50000100
 8002c54:	50000300 	.word	0x50000300
 8002c58:	50000700 	.word	0x50000700
 8002c5c:	50000600 	.word	0x50000600
 8002c60:	50000500 	.word	0x50000500
 8002c64:	50000400 	.word	0x50000400
 8002c68:	0800371b 	.word	0x0800371b
 8002c6c:	080037f3 	.word	0x080037f3
 8002c70:	0800380f 	.word	0x0800380f

08002c74 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b0b6      	sub	sp, #216	@ 0xd8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x24>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f000 bc13 	b.w	80034fa <HAL_ADC_ConfigChannel+0x84a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fd11 	bl	8002708 <LL_ADC_REG_IsConversionOngoing>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 83f3 	bne.w	80034d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f7ff fbcb 	bl	8002496 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fcff 	bl	8002708 <LL_ADC_REG_IsConversionOngoing>
 8002d0a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fd0b 	bl	800272e <LL_ADC_INJ_IsConversionOngoing>
 8002d18:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 81d9 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 81d4 	bne.w	80030d8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d38:	d10f      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7ff fbd2 	bl	80024ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fb79 	bl	800244a <LL_ADC_SetSamplingTimeCommonConfig>
 8002d58:	e00e      	b.n	8002d78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f7ff fbc1 	bl	80024ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fb69 	bl	800244a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d022      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6919      	ldr	r1, [r3, #16]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002daa:	f7ff fac3 	bl	8002334 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff fb0f 	bl	80023de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x126>
 8002dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dd4:	e000      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x128>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f7ff fb1b 	bl	8002414 <LL_ADC_SetOffsetSaturation>
 8002dde:	e17b      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fac8 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x15c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fabd 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	e01e      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x19a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fab2 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e004      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1b2>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	e018      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1e4>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002e7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e004      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d106      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fa81 	bl	80023a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fa65 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x222>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fa5a 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	0e9b      	lsrs	r3, r3, #26
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	e01e      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x260>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fa4f 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ef4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ef8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e004      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x278>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	e018      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x2aa>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e004      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d106      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fa1e 	bl	80023a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2102      	movs	r1, #2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fa02 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x2e8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff f9f7 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	f003 021f 	and.w	r2, r3, #31
 8002f96:	e01e      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x326>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f9ec 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e004      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002fca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x33e>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	0e9b      	lsrs	r3, r3, #26
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	e016      	b.n	800301c <HAL_ADC_ConfigChannel+0x36c>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003000:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003002:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003006:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e004      	b.n	800301c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003012:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800301c:	429a      	cmp	r2, r3
 800301e:	d106      	bne.n	800302e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff f9bd 	bl	80023a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2103      	movs	r1, #3
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff f9a1 	bl	800237c <LL_ADC_GetOffsetChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <HAL_ADC_ConfigChannel+0x3aa>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2103      	movs	r1, #3
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f996 	bl	800237c <LL_ADC_GetOffsetChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	e017      	b.n	800308a <HAL_ADC_ConfigChannel+0x3da>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2103      	movs	r1, #3
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff f98b 	bl	800237c <LL_ADC_GetOffsetChannel>
 8003066:	4603      	mov	r3, r0
 8003068:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003072:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003074:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x3f2>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	0e9b      	lsrs	r3, r3, #26
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	e011      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x416>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80030b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80030b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030ba:	2320      	movs	r3, #32
 80030bc:	e003      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d106      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2103      	movs	r1, #3
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f968 	bl	80023a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fad9 	bl	8002694 <LL_ADC_IsEnabled>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f040 813d 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6819      	ldr	r1, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7ff fa24 	bl	8002544 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4aa2      	ldr	r2, [pc, #648]	@ (800338c <HAL_ADC_ConfigChannel+0x6dc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	f040 812e 	bne.w	8003364 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x480>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	3301      	adds	r3, #1
 8003120:	f003 031f 	and.w	r3, r3, #31
 8003124:	2b09      	cmp	r3, #9
 8003126:	bf94      	ite	ls
 8003128:	2301      	movls	r3, #1
 800312a:	2300      	movhi	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e019      	b.n	8003164 <HAL_ADC_ConfigChannel+0x4b4>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800313e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003140:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e003      	b.n	8003154 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800314c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2b09      	cmp	r3, #9
 800315c:	bf94      	ite	ls
 800315e:	2301      	movls	r3, #1
 8003160:	2300      	movhi	r3, #0
 8003162:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003164:	2b00      	cmp	r3, #0
 8003166:	d079      	beq.n	800325c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d107      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x4d4>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003182:	e015      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x500>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800318c:	fa93 f3a3 	rbit	r3, r3
 8003190:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003194:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800319c:	2320      	movs	r3, #32
 800319e:	e003      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	3301      	adds	r3, #1
 80031aa:	069b      	lsls	r3, r3, #26
 80031ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x520>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	0e9b      	lsrs	r3, r3, #26
 80031c2:	3301      	adds	r3, #1
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2101      	movs	r1, #1
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	e017      	b.n	8003200 <HAL_ADC_ConfigChannel+0x550>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80031de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80031e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e003      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2101      	movs	r1, #1
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	ea42 0103 	orr.w	r1, r2, r3
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x576>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0e9b      	lsrs	r3, r3, #26
 8003216:	3301      	adds	r3, #1
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	051b      	lsls	r3, r3, #20
 8003224:	e018      	b.n	8003258 <HAL_ADC_ConfigChannel+0x5a8>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800323e:	2320      	movs	r3, #32
 8003240:	e003      	b.n	800324a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003258:	430b      	orrs	r3, r1
 800325a:	e07e      	b.n	800335a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003264:	2b00      	cmp	r3, #0
 8003266:	d107      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x5c8>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	3301      	adds	r3, #1
 8003270:	069b      	lsls	r3, r3, #26
 8003272:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003276:	e015      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x5f4>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003288:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	069b      	lsls	r3, r3, #26
 80032a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d109      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x614>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	3301      	adds	r3, #1
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	e017      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x644>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	61fb      	str	r3, [r7, #28]
  return result;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032dc:	2320      	movs	r3, #32
 80032de:	e003      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3301      	adds	r3, #1
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	ea42 0103 	orr.w	r1, r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x670>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0e9b      	lsrs	r3, r3, #26
 800330a:	3301      	adds	r3, #1
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	3b1e      	subs	r3, #30
 8003318:	051b      	lsls	r3, r3, #20
 800331a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800331e:	e01b      	b.n	8003358 <HAL_ADC_ConfigChannel+0x6a8>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	613b      	str	r3, [r7, #16]
  return result;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e003      	b.n	8003344 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f003 021f 	and.w	r2, r3, #31
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	3b1e      	subs	r3, #30
 8003352:	051b      	lsls	r3, r3, #20
 8003354:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003358:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800335e:	4619      	mov	r1, r3
 8003360:	f7ff f8c5 	bl	80024ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b09      	ldr	r3, [pc, #36]	@ (8003390 <HAL_ADC_ConfigChannel+0x6e0>)
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80be 	beq.w	80034ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800337a:	d004      	beq.n	8003386 <HAL_ADC_ConfigChannel+0x6d6>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a04      	ldr	r2, [pc, #16]	@ (8003394 <HAL_ADC_ConfigChannel+0x6e4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d10a      	bne.n	800339c <HAL_ADC_ConfigChannel+0x6ec>
 8003386:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <HAL_ADC_ConfigChannel+0x6e8>)
 8003388:	e009      	b.n	800339e <HAL_ADC_ConfigChannel+0x6ee>
 800338a:	bf00      	nop
 800338c:	407f0000 	.word	0x407f0000
 8003390:	80080000 	.word	0x80080000
 8003394:	50000100 	.word	0x50000100
 8003398:	50000300 	.word	0x50000300
 800339c:	4b59      	ldr	r3, [pc, #356]	@ (8003504 <HAL_ADC_ConfigChannel+0x854>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe ffba 	bl	8002318 <LL_ADC_GetCommonPathInternalCh>
 80033a4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a56      	ldr	r2, [pc, #344]	@ (8003508 <HAL_ADC_ConfigChannel+0x858>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_ADC_ConfigChannel+0x70c>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a55      	ldr	r2, [pc, #340]	@ (800350c <HAL_ADC_ConfigChannel+0x85c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d13a      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d134      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033d0:	d005      	beq.n	80033de <HAL_ADC_ConfigChannel+0x72e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a4e      	ldr	r2, [pc, #312]	@ (8003510 <HAL_ADC_ConfigChannel+0x860>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	f040 8085 	bne.w	80034e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033e6:	d004      	beq.n	80033f2 <HAL_ADC_ConfigChannel+0x742>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a49      	ldr	r2, [pc, #292]	@ (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x746>
 80033f2:	4a49      	ldr	r2, [pc, #292]	@ (8003518 <HAL_ADC_ConfigChannel+0x868>)
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x748>
 80033f6:	4a43      	ldr	r2, [pc, #268]	@ (8003504 <HAL_ADC_ConfigChannel+0x854>)
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7fe ff75 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003408:	4b44      	ldr	r3, [pc, #272]	@ (800351c <HAL_ADC_ConfigChannel+0x86c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	4a44      	ldr	r2, [pc, #272]	@ (8003520 <HAL_ADC_ConfigChannel+0x870>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	099b      	lsrs	r3, r3, #6
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003422:	e002      	b.n	800342a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3b01      	subs	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f9      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003430:	e05a      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3b      	ldr	r2, [pc, #236]	@ (8003524 <HAL_ADC_ConfigChannel+0x874>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d125      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800343c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d11f      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a31      	ldr	r2, [pc, #196]	@ (8003514 <HAL_ADC_ConfigChannel+0x864>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d104      	bne.n	800345c <HAL_ADC_ConfigChannel+0x7ac>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a34      	ldr	r2, [pc, #208]	@ (8003528 <HAL_ADC_ConfigChannel+0x878>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d047      	beq.n	80034ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003464:	d004      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x7c0>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a2a      	ldr	r2, [pc, #168]	@ (8003514 <HAL_ADC_ConfigChannel+0x864>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x7c4>
 8003470:	4a29      	ldr	r2, [pc, #164]	@ (8003518 <HAL_ADC_ConfigChannel+0x868>)
 8003472:	e000      	b.n	8003476 <HAL_ADC_ConfigChannel+0x7c6>
 8003474:	4a23      	ldr	r2, [pc, #140]	@ (8003504 <HAL_ADC_ConfigChannel+0x854>)
 8003476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f7fe ff36 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003486:	e031      	b.n	80034ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a27      	ldr	r2, [pc, #156]	@ (800352c <HAL_ADC_ConfigChannel+0x87c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d12d      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d127      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b0:	d004      	beq.n	80034bc <HAL_ADC_ConfigChannel+0x80c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a17      	ldr	r2, [pc, #92]	@ (8003514 <HAL_ADC_ConfigChannel+0x864>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x810>
 80034bc:	4a16      	ldr	r2, [pc, #88]	@ (8003518 <HAL_ADC_ConfigChannel+0x868>)
 80034be:	e000      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x812>
 80034c0:	4a10      	ldr	r2, [pc, #64]	@ (8003504 <HAL_ADC_ConfigChannel+0x854>)
 80034c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f7fe ff10 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
 80034d2:	e00c      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034e6:	e002      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	37d8      	adds	r7, #216	@ 0xd8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	50000700 	.word	0x50000700
 8003508:	c3210000 	.word	0xc3210000
 800350c:	90c00010 	.word	0x90c00010
 8003510:	50000600 	.word	0x50000600
 8003514:	50000100 	.word	0x50000100
 8003518:	50000300 	.word	0x50000300
 800351c:	2000000c 	.word	0x2000000c
 8003520:	053e2d63 	.word	0x053e2d63
 8003524:	c7520000 	.word	0xc7520000
 8003528:	50000500 	.word	0x50000500
 800352c:	cb840000 	.word	0xcb840000

08003530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff f8a7 	bl	8002694 <LL_ADC_IsEnabled>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d176      	bne.n	800363a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	4b3c      	ldr	r3, [pc, #240]	@ (8003644 <ADC_Enable+0x114>)
 8003554:	4013      	ands	r3, r2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f043 0210 	orr.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356a:	f043 0201 	orr.w	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e062      	b.n	800363c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f862 	bl	8002644 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003588:	d004      	beq.n	8003594 <ADC_Enable+0x64>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2e      	ldr	r2, [pc, #184]	@ (8003648 <ADC_Enable+0x118>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <ADC_Enable+0x68>
 8003594:	4b2d      	ldr	r3, [pc, #180]	@ (800364c <ADC_Enable+0x11c>)
 8003596:	e000      	b.n	800359a <ADC_Enable+0x6a>
 8003598:	4b2d      	ldr	r3, [pc, #180]	@ (8003650 <ADC_Enable+0x120>)
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe febc 	bl	8002318 <LL_ADC_GetCommonPathInternalCh>
 80035a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d013      	beq.n	80035d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003654 <ADC_Enable+0x124>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	4a29      	ldr	r2, [pc, #164]	@ (8003658 <ADC_Enable+0x128>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035c4:	e002      	b.n	80035cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f9      	bne.n	80035c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035d2:	f7fe fe6f 	bl	80022b4 <HAL_GetTick>
 80035d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035d8:	e028      	b.n	800362c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff f858 	bl	8002694 <LL_ADC_IsEnabled>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f828 	bl	8002644 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f4:	f7fe fe5e 	bl	80022b4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d914      	bls.n	800362c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d00d      	beq.n	800362c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003614:	f043 0210 	orr.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e007      	b.n	800363c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d1cf      	bne.n	80035da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	8000003f 	.word	0x8000003f
 8003648:	50000100 	.word	0x50000100
 800364c:	50000300 	.word	0x50000300
 8003650:	50000700 	.word	0x50000700
 8003654:	2000000c 	.word	0x2000000c
 8003658:	053e2d63 	.word	0x053e2d63

0800365c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff f826 	bl	80026ba <LL_ADC_IsDisableOngoing>
 800366e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff f80d 	bl	8002694 <LL_ADC_IsEnabled>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d047      	beq.n	8003710 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d144      	bne.n	8003710 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030d 	and.w	r3, r3, #13
 8003690:	2b01      	cmp	r3, #1
 8003692:	d10c      	bne.n	80036ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe ffe7 	bl	800266c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2203      	movs	r2, #3
 80036a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036a6:	f7fe fe05 	bl	80022b4 <HAL_GetTick>
 80036aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036ac:	e029      	b.n	8003702 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b2:	f043 0210 	orr.w	r2, r3, #16
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e023      	b.n	8003712 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036ca:	f7fe fdf3 	bl	80022b4 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d914      	bls.n	8003702 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ea:	f043 0210 	orr.w	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e007      	b.n	8003712 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1dc      	bne.n	80036ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b084      	sub	sp, #16
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003726:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003730:	2b00      	cmp	r3, #0
 8003732:	d14b      	bne.n	80037cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003738:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d021      	beq.n	8003792 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fe8c 	bl	8002470 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d032      	beq.n	80037c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d12b      	bne.n	80037c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11f      	bne.n	80037c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	f043 0201 	orr.w	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003790:	e018      	b.n	80037c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7ff fa55 	bl	8002c74 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037ca:	e00e      	b.n	80037ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fa5f 	bl	8002c9c <HAL_ADC_ErrorCallback>
}
 80037de:	e004      	b.n	80037ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff fa41 	bl	8002c88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382c:	f043 0204 	orr.w	r2, r3, #4
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7ff fa31 	bl	8002c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800383a:	bf00      	nop
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <LL_ADC_IsEnabled>:
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <LL_ADC_IsEnabled+0x18>
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <LL_ADC_IsEnabled+0x1a>
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_StartCalibration>:
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800387a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003884:	4313      	orrs	r3, r2
 8003886:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_ADC_IsCalibrationOnGoing>:
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80038aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038ae:	d101      	bne.n	80038b4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_ADC_REG_IsConversionOngoing>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d101      	bne.n	80038da <LL_ADC_REG_IsConversionOngoing+0x18>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_ADCEx_Calibration_Start+0x1c>
 8003900:	2302      	movs	r3, #2
 8003902:	e04d      	b.n	80039a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff fea5 	bl	800365c <ADC_Disable>
 8003912:	4603      	mov	r3, r0
 8003914:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d136      	bne.n	800398a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003920:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003924:	f023 0302 	bic.w	r3, r3, #2
 8003928:	f043 0202 	orr.w	r2, r3, #2
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff96 	bl	8003868 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800393c:	e014      	b.n	8003968 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3301      	adds	r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4a18      	ldr	r2, [pc, #96]	@ (80039a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d90d      	bls.n	8003968 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	f023 0312 	bic.w	r3, r3, #18
 8003954:	f043 0210 	orr.w	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e01b      	b.n	80039a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff94 	bl	800389a <LL_ADC_IsCalibrationOnGoing>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e2      	bne.n	800393e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397c:	f023 0303 	bic.w	r3, r3, #3
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003988:	e005      	b.n	8003996 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398e:	f043 0210 	orr.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	0004de01 	.word	0x0004de01

080039ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b0a1      	sub	sp, #132	@ 0x84
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0e7      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039d2:	2300      	movs	r3, #0
 80039d4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039d6:	2300      	movs	r3, #0
 80039d8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e2:	d102      	bne.n	80039ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039e4:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	e009      	b.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6e      	ldr	r2, [pc, #440]	@ (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d102      	bne.n	80039fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039f4:	4b6d      	ldr	r3, [pc, #436]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	e001      	b.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0be      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff4f 	bl	80038c2 <LL_ADC_REG_IsConversionOngoing>
 8003a24:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff49 	bl	80038c2 <LL_ADC_REG_IsConversionOngoing>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 80a0 	bne.w	8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f040 809c 	bne.w	8003b78 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a48:	d004      	beq.n	8003a54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a55      	ldr	r2, [pc, #340]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a54:	4b56      	ldr	r3, [pc, #344]	@ (8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a56:	e000      	b.n	8003a5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a58:	4b56      	ldr	r3, [pc, #344]	@ (8003bb4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a5a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d04b      	beq.n	8003afc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a76:	035b      	lsls	r3, r3, #13
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a88:	d004      	beq.n	8003a94 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a45      	ldr	r2, [pc, #276]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10f      	bne.n	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a98:	f7ff fed3 	bl	8003842 <LL_ADC_IsEnabled>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	4841      	ldr	r0, [pc, #260]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003aa0:	f7ff fecf 	bl	8003842 <LL_ADC_IsEnabled>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	4323      	orrs	r3, r4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e012      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003ab4:	483c      	ldr	r0, [pc, #240]	@ (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ab6:	f7ff fec4 	bl	8003842 <LL_ADC_IsEnabled>
 8003aba:	4604      	mov	r4, r0
 8003abc:	483b      	ldr	r0, [pc, #236]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003abe:	f7ff fec0 	bl	8003842 <LL_ADC_IsEnabled>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	431c      	orrs	r4, r3
 8003ac6:	483c      	ldr	r0, [pc, #240]	@ (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ac8:	f7ff febb 	bl	8003842 <LL_ADC_IsEnabled>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4323      	orrs	r3, r4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d056      	beq.n	8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ae6:	f023 030f 	bic.w	r3, r3, #15
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	6811      	ldr	r1, [r2, #0]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	6892      	ldr	r2, [r2, #8]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	431a      	orrs	r2, r3
 8003af6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003af8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003afa:	e047      	b.n	8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003afc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b10:	d004      	beq.n	8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a23      	ldr	r2, [pc, #140]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d10f      	bne.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003b1c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b20:	f7ff fe8f 	bl	8003842 <LL_ADC_IsEnabled>
 8003b24:	4604      	mov	r4, r0
 8003b26:	481f      	ldr	r0, [pc, #124]	@ (8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b28:	f7ff fe8b 	bl	8003842 <LL_ADC_IsEnabled>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4323      	orrs	r3, r4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e012      	b.n	8003b62 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003b3c:	481a      	ldr	r0, [pc, #104]	@ (8003ba8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b3e:	f7ff fe80 	bl	8003842 <LL_ADC_IsEnabled>
 8003b42:	4604      	mov	r4, r0
 8003b44:	4819      	ldr	r0, [pc, #100]	@ (8003bac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b46:	f7ff fe7c 	bl	8003842 <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	431c      	orrs	r4, r3
 8003b4e:	481a      	ldr	r0, [pc, #104]	@ (8003bb8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b50:	f7ff fe77 	bl	8003842 <LL_ADC_IsEnabled>
 8003b54:	4603      	mov	r3, r0
 8003b56:	4323      	orrs	r3, r4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d012      	beq.n	8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b6e:	f023 030f 	bic.w	r3, r3, #15
 8003b72:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b74:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b76:	e009      	b.n	8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7c:	f043 0220 	orr.w	r2, r3, #32
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b8a:	e000      	b.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b8c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b96:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3784      	adds	r7, #132	@ 0x84
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	50000100 	.word	0x50000100
 8003ba8:	50000400 	.word	0x50000400
 8003bac:	50000500 	.word	0x50000500
 8003bb0:	50000300 	.word	0x50000300
 8003bb4:	50000700 	.word	0x50000700
 8003bb8:	50000600 	.word	0x50000600

08003bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bee:	4a04      	ldr	r2, [pc, #16]	@ (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	60d3      	str	r3, [r2, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <__NVIC_GetPriorityGrouping+0x18>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	f003 0307 	and.w	r3, r3, #7
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db0b      	blt.n	8003c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4907      	ldr	r1, [pc, #28]	@ (8003c58 <__NVIC_EnableIRQ+0x38>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2001      	movs	r0, #1
 8003c42:	fa00 f202 	lsl.w	r2, r0, r2
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	@ (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	@ (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	@ 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3b01      	subs	r3, #1
 8003d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d28:	d301      	bcc.n	8003d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00f      	b.n	8003d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d58 <SysTick_Config+0x40>)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d36:	210f      	movs	r1, #15
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	f7ff ff8e 	bl	8003c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d40:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <SysTick_Config+0x40>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d46:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <SysTick_Config+0x40>)
 8003d48:	2207      	movs	r2, #7
 8003d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	e000e010 	.word	0xe000e010

08003d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ff29 	bl	8003bbc <__NVIC_SetPriorityGrouping>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d80:	f7ff ff40 	bl	8003c04 <__NVIC_GetPriorityGrouping>
 8003d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	6978      	ldr	r0, [r7, #20]
 8003d8c:	f7ff ff90 	bl	8003cb0 <NVIC_EncodePriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d96:	4611      	mov	r1, r2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff ff5f 	bl	8003c5c <__NVIC_SetPriority>
}
 8003d9e:	bf00      	nop
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	4603      	mov	r3, r0
 8003dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ff33 	bl	8003c20 <__NVIC_EnableIRQ>
}
 8003dba:	bf00      	nop
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ffa4 	bl	8003d18 <SysTick_Config>
 8003dd0:	4603      	mov	r3, r0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e08d      	b.n	8003f0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_DMA_Init+0x138>)
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d80f      	bhi.n	8003e1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b45      	ldr	r3, [pc, #276]	@ (8003f18 <HAL_DMA_Init+0x13c>)
 8003e02:	4413      	add	r3, r2
 8003e04:	4a45      	ldr	r2, [pc, #276]	@ (8003f1c <HAL_DMA_Init+0x140>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	009a      	lsls	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a42      	ldr	r2, [pc, #264]	@ (8003f20 <HAL_DMA_Init+0x144>)
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e18:	e00e      	b.n	8003e38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b40      	ldr	r3, [pc, #256]	@ (8003f24 <HAL_DMA_Init+0x148>)
 8003e22:	4413      	add	r3, r2
 8003e24:	4a3d      	ldr	r2, [pc, #244]	@ (8003f1c <HAL_DMA_Init+0x140>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	091b      	lsrs	r3, r3, #4
 8003e2c:	009a      	lsls	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a3c      	ldr	r2, [pc, #240]	@ (8003f28 <HAL_DMA_Init+0x14c>)
 8003e36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fa76 	bl	800437c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e98:	d102      	bne.n	8003ea0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003eb4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d010      	beq.n	8003ee0 <HAL_DMA_Init+0x104>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d80c      	bhi.n	8003ee0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa96 	bl	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	e008      	b.n	8003ef2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	40020407 	.word	0x40020407
 8003f18:	bffdfff8 	.word	0xbffdfff8
 8003f1c:	cccccccd 	.word	0xcccccccd
 8003f20:	40020000 	.word	0x40020000
 8003f24:	bffdfbf8 	.word	0xbffdfbf8
 8003f28:	40020400 	.word	0x40020400

08003f2c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_DMA_Start_IT+0x20>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e066      	b.n	800401a <HAL_DMA_Start_IT+0xee>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d155      	bne.n	800400c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f9bb 	bl	8004300 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 020e 	orr.w	r2, r2, #14
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	e00f      	b.n	8003fc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0204 	bic.w	r2, r2, #4
 8003fb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 020a 	orr.w	r2, r2, #10
 8003fc2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fe0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0201 	orr.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e005      	b.n	8004018 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004014:	2302      	movs	r3, #2
 8004016:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004018:	7dfb      	ldrb	r3, [r7, #23]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004022:	b480      	push	{r7}
 8004024:	b085      	sub	sp, #20
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d005      	beq.n	8004046 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e037      	b.n	80040b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 020e 	bic.w	r2, r2, #14
 8004054:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004064:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f003 021f 	and.w	r2, r3, #31
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	2101      	movs	r1, #1
 8004084:	fa01 f202 	lsl.w	r2, r1, r2
 8004088:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004092:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d00d      	beq.n	8004108 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2204      	movs	r2, #4
 80040f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
 8004106:	e047      	b.n	8004198 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 020e 	bic.w	r2, r2, #14
 8004116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004132:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f202 	lsl.w	r2, r1, r2
 800414a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004154:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800416c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004176:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
    }
  }
  return status;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	2204      	movs	r2, #4
 80041c4:	409a      	lsls	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d026      	beq.n	800421c <HAL_DMA_IRQHandler+0x7a>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d021      	beq.n	800421c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d107      	bne.n	80041f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0204 	bic.w	r2, r2, #4
 80041f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	f003 021f 	and.w	r2, r3, #31
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2104      	movs	r1, #4
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	2b00      	cmp	r3, #0
 8004210:	d071      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800421a:	e06c      	b.n	80042f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2202      	movs	r2, #2
 8004226:	409a      	lsls	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d02e      	beq.n	800428e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d029      	beq.n	800428e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 020a 	bic.w	r2, r2, #10
 8004256:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	2102      	movs	r1, #2
 800426e:	fa01 f202 	lsl.w	r2, r1, r2
 8004272:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d038      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800428c:	e033      	b.n	80042f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2208      	movs	r2, #8
 8004298:	409a      	lsls	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d02a      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d025      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020e 	bic.w	r2, r2, #14
 80042ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c0:	f003 021f 	and.w	r2, r3, #31
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	2101      	movs	r1, #1
 80042ca:	fa01 f202 	lsl.w	r2, r1, r2
 80042ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
}
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004316:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004328:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f003 021f 	and.w	r2, r3, #31
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	2101      	movs	r1, #1
 8004338:	fa01 f202 	lsl.w	r2, r1, r2
 800433c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b10      	cmp	r3, #16
 800434c:	d108      	bne.n	8004360 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800435e:	e007      	b.n	8004370 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	60da      	str	r2, [r3, #12]
}
 8004370:	bf00      	nop
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	4b16      	ldr	r3, [pc, #88]	@ (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800438c:	429a      	cmp	r2, r3
 800438e:	d802      	bhi.n	8004396 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004390:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e001      	b.n	800439a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004396:	4b15      	ldr	r3, [pc, #84]	@ (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004398:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3b08      	subs	r3, #8
 80043a6:	4a12      	ldr	r2, [pc, #72]	@ (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	089b      	lsrs	r3, r3, #2
 80043b6:	009a      	lsls	r2, r3, #2
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a0b      	ldr	r2, [pc, #44]	@ (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2201      	movs	r2, #1
 80043d0:	409a      	lsls	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40020407 	.word	0x40020407
 80043e8:	40020800 	.word	0x40020800
 80043ec:	40020820 	.word	0x40020820
 80043f0:	cccccccd 	.word	0xcccccccd
 80043f4:	40020880 	.word	0x40020880

080043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	461a      	mov	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a08      	ldr	r2, [pc, #32]	@ (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800441a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3b01      	subs	r3, #1
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	2201      	movs	r2, #1
 8004426:	409a      	lsls	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	1000823f 	.word	0x1000823f
 800443c:	40020940 	.word	0x40020940

08004440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800444e:	e15a      	b.n	8004706 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	fa01 f303 	lsl.w	r3, r1, r3
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 814c 	beq.w	8004700 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d005      	beq.n	8004480 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800447c:	2b02      	cmp	r3, #2
 800447e:	d130      	bne.n	80044e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	2203      	movs	r2, #3
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044b6:	2201      	movs	r2, #1
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4013      	ands	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	091b      	lsrs	r3, r3, #4
 80044cc:	f003 0201 	and.w	r2, r3, #1
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d017      	beq.n	800451e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2203      	movs	r2, #3
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d123      	bne.n	8004572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	08da      	lsrs	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3208      	adds	r2, #8
 8004532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	220f      	movs	r2, #15
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	08da      	lsrs	r2, r3, #3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3208      	adds	r2, #8
 800456c:	6939      	ldr	r1, [r7, #16]
 800456e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	2203      	movs	r2, #3
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4013      	ands	r3, r2
 8004588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0203 	and.w	r2, r3, #3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80a6 	beq.w	8004700 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004724 <HAL_GPIO_Init+0x2e4>)
 80045b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004724 <HAL_GPIO_Init+0x2e4>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6613      	str	r3, [r2, #96]	@ 0x60
 80045c0:	4b58      	ldr	r3, [pc, #352]	@ (8004724 <HAL_GPIO_Init+0x2e4>)
 80045c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045cc:	4a56      	ldr	r2, [pc, #344]	@ (8004728 <HAL_GPIO_Init+0x2e8>)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3302      	adds	r3, #2
 80045d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	220f      	movs	r2, #15
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4013      	ands	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80045f6:	d01f      	beq.n	8004638 <HAL_GPIO_Init+0x1f8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a4c      	ldr	r2, [pc, #304]	@ (800472c <HAL_GPIO_Init+0x2ec>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d019      	beq.n	8004634 <HAL_GPIO_Init+0x1f4>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a4b      	ldr	r2, [pc, #300]	@ (8004730 <HAL_GPIO_Init+0x2f0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d013      	beq.n	8004630 <HAL_GPIO_Init+0x1f0>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a4a      	ldr	r2, [pc, #296]	@ (8004734 <HAL_GPIO_Init+0x2f4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00d      	beq.n	800462c <HAL_GPIO_Init+0x1ec>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a49      	ldr	r2, [pc, #292]	@ (8004738 <HAL_GPIO_Init+0x2f8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d007      	beq.n	8004628 <HAL_GPIO_Init+0x1e8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a48      	ldr	r2, [pc, #288]	@ (800473c <HAL_GPIO_Init+0x2fc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_GPIO_Init+0x1e4>
 8004620:	2305      	movs	r3, #5
 8004622:	e00a      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004624:	2306      	movs	r3, #6
 8004626:	e008      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004628:	2304      	movs	r3, #4
 800462a:	e006      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 800462c:	2303      	movs	r3, #3
 800462e:	e004      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004630:	2302      	movs	r3, #2
 8004632:	e002      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_GPIO_Init+0x1fa>
 8004638:	2300      	movs	r3, #0
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	f002 0203 	and.w	r2, r2, #3
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	4093      	lsls	r3, r2
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800464a:	4937      	ldr	r1, [pc, #220]	@ (8004728 <HAL_GPIO_Init+0x2e8>)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	3302      	adds	r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004658:	4b39      	ldr	r3, [pc, #228]	@ (8004740 <HAL_GPIO_Init+0x300>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	43db      	mvns	r3, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4013      	ands	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800467c:	4a30      	ldr	r2, [pc, #192]	@ (8004740 <HAL_GPIO_Init+0x300>)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004682:	4b2f      	ldr	r3, [pc, #188]	@ (8004740 <HAL_GPIO_Init+0x300>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	43db      	mvns	r3, r3
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4013      	ands	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046a6:	4a26      	ldr	r2, [pc, #152]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046ac:	4b24      	ldr	r3, [pc, #144]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	43db      	mvns	r3, r3
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046fa:	4a11      	ldr	r2, [pc, #68]	@ (8004740 <HAL_GPIO_Init+0x300>)
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	3301      	adds	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	f47f ae9d 	bne.w	8004450 <HAL_GPIO_Init+0x10>
  }
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40021000 	.word	0x40021000
 8004728:	40010000 	.word	0x40010000
 800472c:	48000400 	.word	0x48000400
 8004730:	48000800 	.word	0x48000800
 8004734:	48000c00 	.word	0x48000c00
 8004738:	48001000 	.word	0x48001000
 800473c:	48001400 	.word	0x48001400
 8004740:	40010400 	.word	0x40010400

08004744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
 8004750:	4613      	mov	r3, r2
 8004752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004754:	787b      	ldrb	r3, [r7, #1]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800475a:	887a      	ldrh	r2, [r7, #2]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004760:	e002      	b.n	8004768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800477e:	4b08      	ldr	r3, [pc, #32]	@ (80047a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	4013      	ands	r3, r2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d006      	beq.n	8004798 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800478a:	4a05      	ldr	r2, [pc, #20]	@ (80047a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd fa8c 	bl	8001cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004798:	bf00      	nop
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40010400 	.word	0x40010400

080047a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d141      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047b2:	4b4b      	ldr	r3, [pc, #300]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047be:	d131      	bne.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047c0:	4b47      	ldr	r3, [pc, #284]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c6:	4a46      	ldr	r2, [pc, #280]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047d0:	4b43      	ldr	r3, [pc, #268]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047d8:	4a41      	ldr	r2, [pc, #260]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047e0:	4b40      	ldr	r3, [pc, #256]	@ (80048e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2232      	movs	r2, #50	@ 0x32
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	4a3f      	ldr	r2, [pc, #252]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	0c9b      	lsrs	r3, r3, #18
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f6:	e002      	b.n	80047fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047fe:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480a:	d102      	bne.n	8004812 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f2      	bne.n	80047f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004812:	4b33      	ldr	r3, [pc, #204]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800481e:	d158      	bne.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e057      	b.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004824:	4b2e      	ldr	r3, [pc, #184]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800482a:	4a2d      	ldr	r2, [pc, #180]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004830:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004834:	e04d      	b.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800483c:	d141      	bne.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800483e:	4b28      	ldr	r3, [pc, #160]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d131      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800484c:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004852:	4a23      	ldr	r2, [pc, #140]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004858:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800485c:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004864:	4a1e      	ldr	r2, [pc, #120]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800486c:	4b1d      	ldr	r3, [pc, #116]	@ (80048e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2232      	movs	r2, #50	@ 0x32
 8004872:	fb02 f303 	mul.w	r3, r2, r3
 8004876:	4a1c      	ldr	r2, [pc, #112]	@ (80048e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	0c9b      	lsrs	r3, r3, #18
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004882:	e002      	b.n	800488a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3b01      	subs	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800488a:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004896:	d102      	bne.n	800489e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f2      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800489e:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048aa:	d112      	bne.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e011      	b.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b6:	4a0a      	ldr	r2, [pc, #40]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048c0:	e007      	b.n	80048d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048c2:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048ca:	4a05      	ldr	r2, [pc, #20]	@ (80048e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	40007000 	.word	0x40007000
 80048e4:	2000000c 	.word	0x2000000c
 80048e8:	431bde83 	.word	0x431bde83

080048ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80048f0:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a04      	ldr	r2, [pc, #16]	@ (8004908 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80048f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048fa:	6093      	str	r3, [r2, #8]
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40007000 	.word	0x40007000

0800490c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e2fe      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d075      	beq.n	8004a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492a:	4b97      	ldr	r3, [pc, #604]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004934:	4b94      	ldr	r3, [pc, #592]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d102      	bne.n	800494a <HAL_RCC_OscConfig+0x3e>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d002      	beq.n	8004950 <HAL_RCC_OscConfig+0x44>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b8d      	ldr	r3, [pc, #564]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x108>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e2d9      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x74>
 8004972:	4b85      	ldr	r3, [pc, #532]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a84      	ldr	r2, [pc, #528]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x98>
 800498a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b7c      	ldr	r3, [pc, #496]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7b      	ldr	r2, [pc, #492]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 80049a4:	4b78      	ldr	r3, [pc, #480]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a77      	ldr	r2, [pc, #476]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b75      	ldr	r3, [pc, #468]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a74      	ldr	r2, [pc, #464]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd fc76 	bl	80022b4 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fd fc72 	bl	80022b4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	@ 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e29e      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049de:	4b6a      	ldr	r3, [pc, #424]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xc0>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd fc62 	bl	80022b4 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fd fc5e 	bl	80022b4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	@ 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e28a      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a06:	4b60      	ldr	r3, [pc, #384]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0xe8>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d075      	beq.n	8004b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a22:	4b59      	ldr	r3, [pc, #356]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a2c:	4b56      	ldr	r3, [pc, #344]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d102      	bne.n	8004a42 <HAL_RCC_OscConfig+0x136>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_OscConfig+0x13c>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11f      	bne.n	8004a88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a48:	4b4f      	ldr	r3, [pc, #316]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_OscConfig+0x154>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e25d      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a60:	4b49      	ldr	r3, [pc, #292]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	4946      	ldr	r1, [pc, #280]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a74:	4b45      	ldr	r3, [pc, #276]	@ (8004b8c <HAL_RCC_OscConfig+0x280>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fd fbcf 	bl	800221c <HAL_InitTick>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d043      	beq.n	8004b0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e249      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d023      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a90:	4b3d      	ldr	r3, [pc, #244]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a3c      	ldr	r2, [pc, #240]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fc0a 	bl	80022b4 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa4:	f7fd fc06 	bl	80022b4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e232      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab6:	4b34      	ldr	r3, [pc, #208]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	4b31      	ldr	r3, [pc, #196]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	492d      	ldr	r1, [pc, #180]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
 8004ad6:	e01a      	b.n	8004b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004ade:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fbe6 	bl	80022b4 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fd fbe2 	bl	80022b4 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e20e      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004afe:	4b22      	ldr	r3, [pc, #136]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x1e0>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d041      	beq.n	8004b9e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01c      	beq.n	8004b5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b22:	4b19      	ldr	r3, [pc, #100]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b28:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd fbbf 	bl	80022b4 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3a:	f7fd fbbb 	bl	80022b4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e1e7      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <HAL_RCC_OscConfig+0x22e>
 8004b5a:	e020      	b.n	8004b9e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b62:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <HAL_RCC_OscConfig+0x27c>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fd fba2 	bl	80022b4 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b72:	e00d      	b.n	8004b90 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fd fb9e 	bl	80022b4 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d906      	bls.n	8004b90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e1ca      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b90:	4b8c      	ldr	r3, [pc, #560]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ea      	bne.n	8004b74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80a6 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bac:	2300      	movs	r3, #0
 8004bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bb0:	4b84      	ldr	r3, [pc, #528]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x2b4>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCC_OscConfig+0x2b6>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	4b7f      	ldr	r3, [pc, #508]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bca:	4a7e      	ldr	r2, [pc, #504]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bd2:	4b7c      	ldr	r3, [pc, #496]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be2:	4b79      	ldr	r3, [pc, #484]	@ (8004dc8 <HAL_RCC_OscConfig+0x4bc>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d118      	bne.n	8004c20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bee:	4b76      	ldr	r3, [pc, #472]	@ (8004dc8 <HAL_RCC_OscConfig+0x4bc>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	@ (8004dc8 <HAL_RCC_OscConfig+0x4bc>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfa:	f7fd fb5b 	bl	80022b4 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fd fb57 	bl	80022b4 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e183      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c14:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc8 <HAL_RCC_OscConfig+0x4bc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d108      	bne.n	8004c3a <HAL_RCC_OscConfig+0x32e>
 8004c28:	4b66      	ldr	r3, [pc, #408]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	4a65      	ldr	r2, [pc, #404]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c38:	e024      	b.n	8004c84 <HAL_RCC_OscConfig+0x378>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d110      	bne.n	8004c64 <HAL_RCC_OscConfig+0x358>
 8004c42:	4b60      	ldr	r3, [pc, #384]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c48:	4a5e      	ldr	r2, [pc, #376]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c4a:	f043 0304 	orr.w	r3, r3, #4
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c52:	4b5c      	ldr	r3, [pc, #368]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c58:	4a5a      	ldr	r2, [pc, #360]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c62:	e00f      	b.n	8004c84 <HAL_RCC_OscConfig+0x378>
 8004c64:	4b57      	ldr	r3, [pc, #348]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6a:	4a56      	ldr	r2, [pc, #344]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c74:	4b53      	ldr	r3, [pc, #332]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c7a:	4a52      	ldr	r2, [pc, #328]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004c7c:	f023 0304 	bic.w	r3, r3, #4
 8004c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d016      	beq.n	8004cba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8c:	f7fd fb12 	bl	80022b4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f7fd fb0e 	bl	80022b4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e138      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004caa:	4b46      	ldr	r3, [pc, #280]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ed      	beq.n	8004c94 <HAL_RCC_OscConfig+0x388>
 8004cb8:	e015      	b.n	8004ce6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fd fafb 	bl	80022b4 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd faf7 	bl	80022b4 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e121      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1ed      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ce6:	7ffb      	ldrb	r3, [r7, #31]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cec:	4b35      	ldr	r3, [pc, #212]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf0:	4a34      	ldr	r2, [pc, #208]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d03c      	beq.n	8004d7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d12:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fd faca 	bl	80022b4 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d24:	f7fd fac6 	bl	80022b4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0f2      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d36:	4b23      	ldr	r3, [pc, #140]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ef      	beq.n	8004d24 <HAL_RCC_OscConfig+0x418>
 8004d44:	e01b      	b.n	8004d7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d46:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fd faad 	bl	80022b4 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d5e:	f7fd faa9 	bl	80022b4 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0d5      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d70:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1ef      	bne.n	8004d5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80c9 	beq.w	8004f1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d88:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	f000 8083 	beq.w	8004e9c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d15e      	bne.n	8004e5c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b09      	ldr	r3, [pc, #36]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a08      	ldr	r2, [pc, #32]	@ (8004dc4 <HAL_RCC_OscConfig+0x4b8>)
 8004da4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fd fa83 	bl	80022b4 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	e00c      	b.n	8004dcc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fd fa7f 	bl	80022b4 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d905      	bls.n	8004dcc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0ab      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dcc:	4b55      	ldr	r3, [pc, #340]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ec      	bne.n	8004db2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd8:	4b52      	ldr	r3, [pc, #328]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	4b52      	ldr	r3, [pc, #328]	@ (8004f28 <HAL_RCC_OscConfig+0x61c>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6a11      	ldr	r1, [r2, #32]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004de8:	3a01      	subs	r2, #1
 8004dea:	0112      	lsls	r2, r2, #4
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004df2:	0212      	lsls	r2, r2, #8
 8004df4:	4311      	orrs	r1, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004dfa:	0852      	lsrs	r2, r2, #1
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	0552      	lsls	r2, r2, #21
 8004e00:	4311      	orrs	r1, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e06:	0852      	lsrs	r2, r2, #1
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	0652      	lsls	r2, r2, #25
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e12:	06d2      	lsls	r2, r2, #27
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4943      	ldr	r1, [pc, #268]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b41      	ldr	r3, [pc, #260]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a40      	ldr	r2, [pc, #256]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e26:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e28:	4b3e      	ldr	r3, [pc, #248]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4a3d      	ldr	r2, [pc, #244]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e32:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fd fa3e 	bl	80022b4 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3c:	f7fd fa3a 	bl	80022b4 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e066      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e4e:	4b35      	ldr	r3, [pc, #212]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x530>
 8004e5a:	e05e      	b.n	8004f1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b31      	ldr	r3, [pc, #196]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a30      	ldr	r2, [pc, #192]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fd fa24 	bl	80022b4 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fa20 	bl	80022b4 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e04c      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e82:	4b28      	ldr	r3, [pc, #160]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e8e:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	4924      	ldr	r1, [pc, #144]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004e94:	4b25      	ldr	r3, [pc, #148]	@ (8004f2c <HAL_RCC_OscConfig+0x620>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	60cb      	str	r3, [r1, #12]
 8004e9a:	e03e      	b.n	8004f1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e039      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8004f24 <HAL_RCC_OscConfig+0x618>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0203 	and.w	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d12c      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d123      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d11b      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d113      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	3b01      	subs	r3, #1
 8004efc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d109      	bne.n	8004f16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3720      	adds	r7, #32
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000
 8004f28:	019f800c 	.word	0x019f800c
 8004f2c:	feeefffc 	.word	0xfeeefffc

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e11e      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f48:	4b91      	ldr	r3, [pc, #580]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d910      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b8e      	ldr	r3, [pc, #568]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 020f 	bic.w	r2, r3, #15
 8004f5e:	498c      	ldr	r1, [pc, #560]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b8a      	ldr	r3, [pc, #552]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e106      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d073      	beq.n	800506c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d129      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8c:	4b81      	ldr	r3, [pc, #516]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0f4      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f9c:	f000 f99e 	bl	80052dc <RCC_GetSysClockFreqFromPLLSource>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8005198 <HAL_RCC_ClockConfig+0x268>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d93f      	bls.n	800502a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004faa:	4b7a      	ldr	r3, [pc, #488]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d009      	beq.n	8004fca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d033      	beq.n	800502a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d12f      	bne.n	800502a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fca:	4b72      	ldr	r3, [pc, #456]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fd2:	4a70      	ldr	r2, [pc, #448]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fda:	2380      	movs	r3, #128	@ 0x80
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e024      	b.n	800502a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0c6      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff8:	4b66      	ldr	r3, [pc, #408]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0be      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005008:	f000 f8ce 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 800500c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4a61      	ldr	r2, [pc, #388]	@ (8005198 <HAL_RCC_ClockConfig+0x268>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d909      	bls.n	800502a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005016:	4b5f      	ldr	r3, [pc, #380]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800501e:	4a5d      	ldr	r2, [pc, #372]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005024:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005026:	2380      	movs	r3, #128	@ 0x80
 8005028:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800502a:	4b5a      	ldr	r3, [pc, #360]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f023 0203 	bic.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4957      	ldr	r1, [pc, #348]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005038:	4313      	orrs	r3, r2
 800503a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503c:	f7fd f93a 	bl	80022b4 <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	e00a      	b.n	800505a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005044:	f7fd f936 	bl	80022b4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e095      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	4b4e      	ldr	r3, [pc, #312]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 020c 	and.w	r2, r3, #12
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	429a      	cmp	r2, r3
 800506a:	d1eb      	bne.n	8005044 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d023      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d005      	beq.n	8005090 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005084:	4b43      	ldr	r3, [pc, #268]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	4a42      	ldr	r2, [pc, #264]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800508a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800508e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800509c:	4b3d      	ldr	r3, [pc, #244]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80050aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ac:	4b39      	ldr	r3, [pc, #228]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4936      	ldr	r1, [pc, #216]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
 80050be:	e008      	b.n	80050d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	2b80      	cmp	r3, #128	@ 0x80
 80050c4:	d105      	bne.n	80050d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050c6:	4b33      	ldr	r3, [pc, #204]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4a32      	ldr	r2, [pc, #200]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 80050cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d21d      	bcs.n	800511c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f023 020f 	bic.w	r2, r3, #15
 80050e8:	4929      	ldr	r1, [pc, #164]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050f0:	f7fd f8e0 	bl	80022b4 <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f8:	f7fd f8dc 	bl	80022b4 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e03b      	b.n	8005186 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800510e:	4b20      	ldr	r3, [pc, #128]	@ (8005190 <HAL_RCC_ClockConfig+0x260>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d1ed      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d008      	beq.n	800513a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005128:	4b1a      	ldr	r3, [pc, #104]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4917      	ldr	r1, [pc, #92]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005146:	4b13      	ldr	r3, [pc, #76]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	490f      	ldr	r1, [pc, #60]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800515a:	f000 f825 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 800515e:	4602      	mov	r2, r0
 8005160:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <HAL_RCC_ClockConfig+0x264>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	490c      	ldr	r1, [pc, #48]	@ (800519c <HAL_RCC_ClockConfig+0x26c>)
 800516c:	5ccb      	ldrb	r3, [r1, r3]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	4a0a      	ldr	r2, [pc, #40]	@ (80051a0 <HAL_RCC_ClockConfig+0x270>)
 8005178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800517a:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <HAL_RCC_ClockConfig+0x274>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fd f84c 	bl	800221c <HAL_InitTick>
 8005184:	4603      	mov	r3, r0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40022000 	.word	0x40022000
 8005194:	40021000 	.word	0x40021000
 8005198:	04c4b400 	.word	0x04c4b400
 800519c:	08009200 	.word	0x08009200
 80051a0:	2000000c 	.word	0x2000000c
 80051a4:	20000010 	.word	0x20000010

080051a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d102      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005264 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e047      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051c0:	4b27      	ldr	r3, [pc, #156]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 030c 	and.w	r3, r3, #12
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d102      	bne.n	80051d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051cc:	4b26      	ldr	r3, [pc, #152]	@ (8005268 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	e03e      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051d2:	4b23      	ldr	r3, [pc, #140]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d136      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051de:	4b20      	ldr	r3, [pc, #128]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	091b      	lsrs	r3, r3, #4
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	3301      	adds	r3, #1
 80051f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d10c      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	4a16      	ldr	r2, [pc, #88]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005206:	68d2      	ldr	r2, [r2, #12]
 8005208:	0a12      	lsrs	r2, r2, #8
 800520a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800520e:	fb02 f303 	mul.w	r3, r2, r3
 8005212:	617b      	str	r3, [r7, #20]
      break;
 8005214:	e00c      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005216:	4a13      	ldr	r2, [pc, #76]	@ (8005264 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	4a10      	ldr	r2, [pc, #64]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005220:	68d2      	ldr	r2, [r2, #12]
 8005222:	0a12      	lsrs	r2, r2, #8
 8005224:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
      break;
 800522e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005230:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	0e5b      	lsrs	r3, r3, #25
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	3301      	adds	r3, #1
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e001      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005250:	693b      	ldr	r3, [r7, #16]
}
 8005252:	4618      	mov	r0, r3
 8005254:	371c      	adds	r7, #28
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40021000 	.word	0x40021000
 8005264:	00f42400 	.word	0x00f42400
 8005268:	016e3600 	.word	0x016e3600

0800526c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005270:	4b03      	ldr	r3, [pc, #12]	@ (8005280 <HAL_RCC_GetHCLKFreq+0x14>)
 8005272:	681b      	ldr	r3, [r3, #0]
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2000000c 	.word	0x2000000c

08005284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005288:	f7ff fff0 	bl	800526c <HAL_RCC_GetHCLKFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4904      	ldr	r1, [pc, #16]	@ (80052ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40021000 	.word	0x40021000
 80052ac:	08009210 	.word	0x08009210

080052b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052b4:	f7ff ffda 	bl	800526c <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	0adb      	lsrs	r3, r3, #11
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4904      	ldr	r1, [pc, #16]	@ (80052d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000
 80052d8:	08009210 	.word	0x08009210

080052dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052e2:	4b1e      	ldr	r3, [pc, #120]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ec:	4b1b      	ldr	r3, [pc, #108]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d10c      	bne.n	800531a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005300:	4a17      	ldr	r2, [pc, #92]	@ (8005360 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	fbb2 f3f3 	udiv	r3, r2, r3
 8005308:	4a14      	ldr	r2, [pc, #80]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800530a:	68d2      	ldr	r2, [r2, #12]
 800530c:	0a12      	lsrs	r2, r2, #8
 800530e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	617b      	str	r3, [r7, #20]
    break;
 8005318:	e00c      	b.n	8005334 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800531a:	4a12      	ldr	r2, [pc, #72]	@ (8005364 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	4a0e      	ldr	r2, [pc, #56]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005324:	68d2      	ldr	r2, [r2, #12]
 8005326:	0a12      	lsrs	r2, r2, #8
 8005328:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800532c:	fb02 f303 	mul.w	r3, r2, r3
 8005330:	617b      	str	r3, [r7, #20]
    break;
 8005332:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005334:	4b09      	ldr	r3, [pc, #36]	@ (800535c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	0e5b      	lsrs	r3, r3, #25
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	3301      	adds	r3, #1
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800534e:	687b      	ldr	r3, [r7, #4]
}
 8005350:	4618      	mov	r0, r3
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40021000 	.word	0x40021000
 8005360:	016e3600 	.word	0x016e3600
 8005364:	00f42400 	.word	0x00f42400

08005368 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005370:	2300      	movs	r3, #0
 8005372:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005374:	2300      	movs	r3, #0
 8005376:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 8098 	beq.w	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005386:	2300      	movs	r3, #0
 8005388:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538a:	4b43      	ldr	r3, [pc, #268]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800538e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005396:	4b40      	ldr	r3, [pc, #256]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539a:	4a3f      	ldr	r2, [pc, #252]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053ae:	2301      	movs	r3, #1
 80053b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053b2:	4b3a      	ldr	r3, [pc, #232]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a39      	ldr	r2, [pc, #228]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053be:	f7fc ff79 	bl	80022b4 <HAL_GetTick>
 80053c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053c4:	e009      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c6:	f7fc ff75 	bl	80022b4 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d902      	bls.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	74fb      	strb	r3, [r7, #19]
        break;
 80053d8:	e005      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053da:	4b30      	ldr	r3, [pc, #192]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0ef      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053e6:	7cfb      	ldrb	r3, [r7, #19]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d159      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01e      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	429a      	cmp	r2, r3
 8005406:	d019      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005408:	4b23      	ldr	r3, [pc, #140]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005412:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005414:	4b20      	ldr	r3, [pc, #128]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541a:	4a1f      	ldr	r2, [pc, #124]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005424:	4b1c      	ldr	r3, [pc, #112]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542a:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005434:	4a18      	ldr	r2, [pc, #96]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005446:	f7fc ff35 	bl	80022b4 <HAL_GetTick>
 800544a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544c:	e00b      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800544e:	f7fc ff31 	bl	80022b4 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800545c:	4293      	cmp	r3, r2
 800545e:	d902      	bls.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	74fb      	strb	r3, [r7, #19]
            break;
 8005464:	e006      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ec      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547a:	4b07      	ldr	r3, [pc, #28]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005488:	4903      	ldr	r1, [pc, #12]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005490:	e008      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005492:	7cfb      	ldrb	r3, [r7, #19]
 8005494:	74bb      	strb	r3, [r7, #18]
 8005496:	e005      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005498:	40021000 	.word	0x40021000
 800549c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a4:	7c7b      	ldrb	r3, [r7, #17]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d105      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054aa:	4ba7      	ldr	r3, [pc, #668]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ae:	4aa6      	ldr	r2, [pc, #664]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054c2:	4ba1      	ldr	r3, [pc, #644]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c8:	f023 0203 	bic.w	r2, r3, #3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	499d      	ldr	r1, [pc, #628]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054e4:	4b98      	ldr	r3, [pc, #608]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ea:	f023 020c 	bic.w	r2, r3, #12
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4995      	ldr	r1, [pc, #596]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005506:	4b90      	ldr	r3, [pc, #576]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	498c      	ldr	r1, [pc, #560]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005528:	4b87      	ldr	r3, [pc, #540]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	4984      	ldr	r1, [pc, #528]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800554a:	4b7f      	ldr	r3, [pc, #508]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005550:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	497b      	ldr	r1, [pc, #492]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800556c:	4b76      	ldr	r3, [pc, #472]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005572:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	4973      	ldr	r1, [pc, #460]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800558e:	4b6e      	ldr	r3, [pc, #440]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005594:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
 800559c:	496a      	ldr	r1, [pc, #424]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00a      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055b0:	4b65      	ldr	r3, [pc, #404]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	4962      	ldr	r1, [pc, #392]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	4959      	ldr	r1, [pc, #356]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055f4:	4b54      	ldr	r3, [pc, #336]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055fa:	f023 0203 	bic.w	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	4951      	ldr	r1, [pc, #324]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005616:	4b4c      	ldr	r3, [pc, #304]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005624:	4948      	ldr	r1, [pc, #288]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005638:	4b43      	ldr	r3, [pc, #268]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005646:	4940      	ldr	r1, [pc, #256]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005656:	d105      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005658:	4b3b      	ldr	r3, [pc, #236]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a3a      	ldr	r2, [pc, #232]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005662:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566c:	2b00      	cmp	r3, #0
 800566e:	d015      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005670:	4b35      	ldr	r3, [pc, #212]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567e:	4932      	ldr	r1, [pc, #200]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800568a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005690:	4b2d      	ldr	r3, [pc, #180]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a2c      	ldr	r2, [pc, #176]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800569a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80056a8:	4b27      	ldr	r3, [pc, #156]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	4924      	ldr	r1, [pc, #144]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056c6:	d105      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056e0:	4b19      	ldr	r3, [pc, #100]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ee:	4916      	ldr	r1, [pc, #88]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056fe:	d105      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005700:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a10      	ldr	r2, [pc, #64]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d019      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005718:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	4908      	ldr	r1, [pc, #32]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005736:	d109      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005738:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a02      	ldr	r2, [pc, #8]	@ (8005748 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005742:	60d3      	str	r3, [r2, #12]
 8005744:	e002      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005746:	bf00      	nop
 8005748:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d015      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005758:	4b29      	ldr	r3, [pc, #164]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005766:	4926      	ldr	r1, [pc, #152]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005776:	d105      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005778:	4b21      	ldr	r3, [pc, #132]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4a20      	ldr	r2, [pc, #128]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800577e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005782:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d015      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005790:	4b1b      	ldr	r3, [pc, #108]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005796:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800579e:	4918      	ldr	r1, [pc, #96]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ae:	d105      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057b0:	4b13      	ldr	r3, [pc, #76]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	4a12      	ldr	r2, [pc, #72]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d015      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057d6:	490a      	ldr	r1, [pc, #40]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057e6:	d105      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e8:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4a04      	ldr	r2, [pc, #16]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40021000 	.word	0x40021000

08005804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e049      	b.n	80058aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fc fb74 	bl	8001f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3304      	adds	r3, #4
 8005840:	4619      	mov	r1, r3
 8005842:	4610      	mov	r0, r2
 8005844:	f000 fd78 	bl	8006338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d001      	beq.n	80058cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e04c      	b.n	8005966 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a26      	ldr	r2, [pc, #152]	@ (8005974 <HAL_TIM_Base_Start+0xc0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e6:	d01d      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a22      	ldr	r2, [pc, #136]	@ (8005978 <HAL_TIM_Base_Start+0xc4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a21      	ldr	r2, [pc, #132]	@ (800597c <HAL_TIM_Base_Start+0xc8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1f      	ldr	r2, [pc, #124]	@ (8005980 <HAL_TIM_Base_Start+0xcc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1e      	ldr	r2, [pc, #120]	@ (8005984 <HAL_TIM_Base_Start+0xd0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1c      	ldr	r2, [pc, #112]	@ (8005988 <HAL_TIM_Base_Start+0xd4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIM_Base_Start+0x70>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1b      	ldr	r2, [pc, #108]	@ (800598c <HAL_TIM_Base_Start+0xd8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d115      	bne.n	8005950 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	4b19      	ldr	r3, [pc, #100]	@ (8005990 <HAL_TIM_Base_Start+0xdc>)
 800592c:	4013      	ands	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2b06      	cmp	r3, #6
 8005934:	d015      	beq.n	8005962 <HAL_TIM_Base_Start+0xae>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800593c:	d011      	beq.n	8005962 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0201 	orr.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	e008      	b.n	8005962 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e000      	b.n	8005964 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40000400 	.word	0x40000400
 800597c:	40000800 	.word	0x40000800
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40013400 	.word	0x40013400
 8005988:	40014000 	.word	0x40014000
 800598c:	40015000 	.word	0x40015000
 8005990:	00010007 	.word	0x00010007

08005994 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e049      	b.n	8005a3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f841 	bl	8005a42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f000 fcb0 	bl	8006338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_TIM_PWM_Start+0x24>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	bf14      	ite	ne
 8005a74:	2301      	movne	r3, #1
 8005a76:	2300      	moveq	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	e03c      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d109      	bne.n	8005a96 <HAL_TIM_PWM_Start+0x3e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	bf14      	ite	ne
 8005a8e:	2301      	movne	r3, #1
 8005a90:	2300      	moveq	r3, #0
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	e02f      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d109      	bne.n	8005ab0 <HAL_TIM_PWM_Start+0x58>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	bf14      	ite	ne
 8005aa8:	2301      	movne	r3, #1
 8005aaa:	2300      	moveq	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e022      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b0c      	cmp	r3, #12
 8005ab4:	d109      	bne.n	8005aca <HAL_TIM_PWM_Start+0x72>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	bf14      	ite	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	2300      	moveq	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	e015      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d109      	bne.n	8005ae4 <HAL_TIM_PWM_Start+0x8c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	bf14      	ite	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	2300      	moveq	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	e008      	b.n	8005af6 <HAL_TIM_PWM_Start+0x9e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	bf14      	ite	ne
 8005af0:	2301      	movne	r3, #1
 8005af2:	2300      	moveq	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0a6      	b.n	8005c4c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <HAL_TIM_PWM_Start+0xb6>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b0c:	e023      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d104      	bne.n	8005b1e <HAL_TIM_PWM_Start+0xc6>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b1c:	e01b      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d104      	bne.n	8005b2e <HAL_TIM_PWM_Start+0xd6>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b2c:	e013      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b0c      	cmp	r3, #12
 8005b32:	d104      	bne.n	8005b3e <HAL_TIM_PWM_Start+0xe6>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b3c:	e00b      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d104      	bne.n	8005b4e <HAL_TIM_PWM_Start+0xf6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b4c:	e003      	b.n	8005b56 <HAL_TIM_PWM_Start+0xfe>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 f864 	bl	8006c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a3a      	ldr	r2, [pc, #232]	@ (8005c54 <HAL_TIM_PWM_Start+0x1fc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d018      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0x148>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a39      	ldr	r2, [pc, #228]	@ (8005c58 <HAL_TIM_PWM_Start+0x200>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d013      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0x148>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a37      	ldr	r2, [pc, #220]	@ (8005c5c <HAL_TIM_PWM_Start+0x204>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00e      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0x148>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a36      	ldr	r2, [pc, #216]	@ (8005c60 <HAL_TIM_PWM_Start+0x208>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d009      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0x148>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a34      	ldr	r2, [pc, #208]	@ (8005c64 <HAL_TIM_PWM_Start+0x20c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <HAL_TIM_PWM_Start+0x148>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a33      	ldr	r2, [pc, #204]	@ (8005c68 <HAL_TIM_PWM_Start+0x210>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d101      	bne.n	8005ba4 <HAL_TIM_PWM_Start+0x14c>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_TIM_PWM_Start+0x14e>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d007      	beq.n	8005bba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a25      	ldr	r2, [pc, #148]	@ (8005c54 <HAL_TIM_PWM_Start+0x1fc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x1b2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bcc:	d01d      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x1b2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a26      	ldr	r2, [pc, #152]	@ (8005c6c <HAL_TIM_PWM_Start+0x214>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d018      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x1b2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a24      	ldr	r2, [pc, #144]	@ (8005c70 <HAL_TIM_PWM_Start+0x218>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x1b2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a23      	ldr	r2, [pc, #140]	@ (8005c74 <HAL_TIM_PWM_Start+0x21c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d00e      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x1b2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <HAL_TIM_PWM_Start+0x200>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d009      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x1b2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <HAL_TIM_PWM_Start+0x204>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d004      	beq.n	8005c0a <HAL_TIM_PWM_Start+0x1b2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a18      	ldr	r2, [pc, #96]	@ (8005c68 <HAL_TIM_PWM_Start+0x210>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d115      	bne.n	8005c36 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <HAL_TIM_PWM_Start+0x220>)
 8005c12:	4013      	ands	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d015      	beq.n	8005c48 <HAL_TIM_PWM_Start+0x1f0>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c22:	d011      	beq.n	8005c48 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c34:	e008      	b.n	8005c48 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	e000      	b.n	8005c4a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40012c00 	.word	0x40012c00
 8005c58:	40013400 	.word	0x40013400
 8005c5c:	40014000 	.word	0x40014000
 8005c60:	40014400 	.word	0x40014400
 8005c64:	40014800 	.word	0x40014800
 8005c68:	40015000 	.word	0x40015000
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800
 8005c74:	40000c00 	.word	0x40000c00
 8005c78:	00010007 	.word	0x00010007

08005c7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e097      	b.n	8005dc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d106      	bne.n	8005caa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7fc f97f 	bl	8001fa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f000 fb31 	bl	8006338 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d1c:	f023 030c 	bic.w	r3, r3, #12
 8005d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	021b      	lsls	r3, r3, #8
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	011a      	lsls	r2, r3, #4
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	031b      	lsls	r3, r3, #12
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005de0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005de8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005df0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d110      	bne.n	8005e1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d102      	bne.n	8005e04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dfe:	7b7b      	ldrb	r3, [r7, #13]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d001      	beq.n	8005e08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e069      	b.n	8005edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e18:	e031      	b.n	8005e7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d110      	bne.n	8005e42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d102      	bne.n	8005e2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e26:	7b3b      	ldrb	r3, [r7, #12]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d001      	beq.n	8005e30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e055      	b.n	8005edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e40:	e01d      	b.n	8005e7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d108      	bne.n	8005e5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d105      	bne.n	8005e5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e4e:	7b7b      	ldrb	r3, [r7, #13]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d102      	bne.n	8005e5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e54:	7b3b      	ldrb	r3, [r7, #12]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d001      	beq.n	8005e5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e03e      	b.n	8005edc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2202      	movs	r2, #2
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_TIM_Encoder_Start+0xc4>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d008      	beq.n	8005e9c <HAL_TIM_Encoder_Start+0xd4>
 8005e8a:	e00f      	b.n	8005eac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2201      	movs	r2, #1
 8005e92:	2100      	movs	r1, #0
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fec9 	bl	8006c2c <TIM_CCxChannelCmd>
      break;
 8005e9a:	e016      	b.n	8005eca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	2104      	movs	r1, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fec1 	bl	8006c2c <TIM_CCxChannelCmd>
      break;
 8005eaa:	e00e      	b.n	8005eca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 feb9 	bl	8006c2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	2104      	movs	r1, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 feb2 	bl	8006c2c <TIM_CCxChannelCmd>
      break;
 8005ec8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d101      	bne.n	8005f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005efe:	2302      	movs	r3, #2
 8005f00:	e0ff      	b.n	8006102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b14      	cmp	r3, #20
 8005f0e:	f200 80f0 	bhi.w	80060f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f12:	a201      	add	r2, pc, #4	@ (adr r2, 8005f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	080060f3 	.word	0x080060f3
 8005f20:	080060f3 	.word	0x080060f3
 8005f24:	080060f3 	.word	0x080060f3
 8005f28:	08005fad 	.word	0x08005fad
 8005f2c:	080060f3 	.word	0x080060f3
 8005f30:	080060f3 	.word	0x080060f3
 8005f34:	080060f3 	.word	0x080060f3
 8005f38:	08005fef 	.word	0x08005fef
 8005f3c:	080060f3 	.word	0x080060f3
 8005f40:	080060f3 	.word	0x080060f3
 8005f44:	080060f3 	.word	0x080060f3
 8005f48:	0800602f 	.word	0x0800602f
 8005f4c:	080060f3 	.word	0x080060f3
 8005f50:	080060f3 	.word	0x080060f3
 8005f54:	080060f3 	.word	0x080060f3
 8005f58:	08006071 	.word	0x08006071
 8005f5c:	080060f3 	.word	0x080060f3
 8005f60:	080060f3 	.word	0x080060f3
 8005f64:	080060f3 	.word	0x080060f3
 8005f68:	080060b1 	.word	0x080060b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fa94 	bl	80064a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699a      	ldr	r2, [r3, #24]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0208 	orr.w	r2, r2, #8
 8005f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0204 	bic.w	r2, r2, #4
 8005f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6999      	ldr	r1, [r3, #24]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	619a      	str	r2, [r3, #24]
      break;
 8005faa:	e0a5      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fb0e 	bl	80065d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6999      	ldr	r1, [r3, #24]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	021a      	lsls	r2, r3, #8
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	619a      	str	r2, [r3, #24]
      break;
 8005fec:	e084      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fb81 	bl	80066fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0208 	orr.w	r2, r2, #8
 8006008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0204 	bic.w	r2, r2, #4
 8006018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69d9      	ldr	r1, [r3, #28]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	61da      	str	r2, [r3, #28]
      break;
 800602c:	e064      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68b9      	ldr	r1, [r7, #8]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 fbf3 	bl	8006820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69da      	ldr	r2, [r3, #28]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	69d9      	ldr	r1, [r3, #28]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	021a      	lsls	r2, r3, #8
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	61da      	str	r2, [r3, #28]
      break;
 800606e:	e043      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fc66 	bl	8006948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0208 	orr.w	r2, r2, #8
 800608a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0204 	bic.w	r2, r2, #4
 800609a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80060ae:	e023      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fcb0 	bl	8006a1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	021a      	lsls	r2, r3, #8
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80060f0:	e002      	b.n	80060f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
      break;
 80060f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006100:	7dfb      	ldrb	r3, [r7, #23]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop

0800610c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_TIM_ConfigClockSource+0x1c>
 8006124:	2302      	movs	r3, #2
 8006126:	e0f6      	b.n	8006316 <HAL_TIM_ConfigClockSource+0x20a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006146:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800614a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006152:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a6f      	ldr	r2, [pc, #444]	@ (8006320 <HAL_TIM_ConfigClockSource+0x214>)
 8006162:	4293      	cmp	r3, r2
 8006164:	f000 80c1 	beq.w	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 8006168:	4a6d      	ldr	r2, [pc, #436]	@ (8006320 <HAL_TIM_ConfigClockSource+0x214>)
 800616a:	4293      	cmp	r3, r2
 800616c:	f200 80c6 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006170:	4a6c      	ldr	r2, [pc, #432]	@ (8006324 <HAL_TIM_ConfigClockSource+0x218>)
 8006172:	4293      	cmp	r3, r2
 8006174:	f000 80b9 	beq.w	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 8006178:	4a6a      	ldr	r2, [pc, #424]	@ (8006324 <HAL_TIM_ConfigClockSource+0x218>)
 800617a:	4293      	cmp	r3, r2
 800617c:	f200 80be 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006180:	4a69      	ldr	r2, [pc, #420]	@ (8006328 <HAL_TIM_ConfigClockSource+0x21c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	f000 80b1 	beq.w	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 8006188:	4a67      	ldr	r2, [pc, #412]	@ (8006328 <HAL_TIM_ConfigClockSource+0x21c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	f200 80b6 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006190:	4a66      	ldr	r2, [pc, #408]	@ (800632c <HAL_TIM_ConfigClockSource+0x220>)
 8006192:	4293      	cmp	r3, r2
 8006194:	f000 80a9 	beq.w	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 8006198:	4a64      	ldr	r2, [pc, #400]	@ (800632c <HAL_TIM_ConfigClockSource+0x220>)
 800619a:	4293      	cmp	r3, r2
 800619c:	f200 80ae 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 80061a0:	4a63      	ldr	r2, [pc, #396]	@ (8006330 <HAL_TIM_ConfigClockSource+0x224>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f000 80a1 	beq.w	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 80061a8:	4a61      	ldr	r2, [pc, #388]	@ (8006330 <HAL_TIM_ConfigClockSource+0x224>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	f200 80a6 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 80061b0:	4a60      	ldr	r2, [pc, #384]	@ (8006334 <HAL_TIM_ConfigClockSource+0x228>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f000 8099 	beq.w	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 80061b8:	4a5e      	ldr	r2, [pc, #376]	@ (8006334 <HAL_TIM_ConfigClockSource+0x228>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f200 809e 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 80061c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061c4:	f000 8091 	beq.w	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 80061c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80061cc:	f200 8096 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 80061d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061d4:	f000 8089 	beq.w	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 80061d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061dc:	f200 808e 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 80061e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061e4:	d03e      	beq.n	8006264 <HAL_TIM_ConfigClockSource+0x158>
 80061e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ea:	f200 8087 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061f2:	f000 8086 	beq.w	8006302 <HAL_TIM_ConfigClockSource+0x1f6>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061fa:	d87f      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 80061fc:	2b70      	cmp	r3, #112	@ 0x70
 80061fe:	d01a      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x12a>
 8006200:	2b70      	cmp	r3, #112	@ 0x70
 8006202:	d87b      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006204:	2b60      	cmp	r3, #96	@ 0x60
 8006206:	d050      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x19e>
 8006208:	2b60      	cmp	r3, #96	@ 0x60
 800620a:	d877      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 800620c:	2b50      	cmp	r3, #80	@ 0x50
 800620e:	d03c      	beq.n	800628a <HAL_TIM_ConfigClockSource+0x17e>
 8006210:	2b50      	cmp	r3, #80	@ 0x50
 8006212:	d873      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006214:	2b40      	cmp	r3, #64	@ 0x40
 8006216:	d058      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x1be>
 8006218:	2b40      	cmp	r3, #64	@ 0x40
 800621a:	d86f      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 800621c:	2b30      	cmp	r3, #48	@ 0x30
 800621e:	d064      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 8006220:	2b30      	cmp	r3, #48	@ 0x30
 8006222:	d86b      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d060      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 8006228:	2b20      	cmp	r3, #32
 800622a:	d867      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d05c      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 8006230:	2b10      	cmp	r3, #16
 8006232:	d05a      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x1de>
 8006234:	e062      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006246:	f000 fcd1 	bl	8006bec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	609a      	str	r2, [r3, #8]
      break;
 8006262:	e04f      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006274:	f000 fcba 	bl	8006bec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006286:	609a      	str	r2, [r3, #8]
      break;
 8006288:	e03c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006296:	461a      	mov	r2, r3
 8006298:	f000 fc2c 	bl	8006af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2150      	movs	r1, #80	@ 0x50
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fc85 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 80062a8:	e02c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b6:	461a      	mov	r2, r3
 80062b8:	f000 fc4b 	bl	8006b52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2160      	movs	r1, #96	@ 0x60
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fc75 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 80062c8:	e01c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d6:	461a      	mov	r2, r3
 80062d8:	f000 fc0c 	bl	8006af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2140      	movs	r1, #64	@ 0x40
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fc65 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 80062e8:	e00c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 fc5c 	bl	8006bb2 <TIM_ITRx_SetConfig>
      break;
 80062fa:	e003      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006300:	e000      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	00100070 	.word	0x00100070
 8006324:	00100060 	.word	0x00100060
 8006328:	00100050 	.word	0x00100050
 800632c:	00100040 	.word	0x00100040
 8006330:	00100030 	.word	0x00100030
 8006334:	00100020 	.word	0x00100020

08006338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a4c      	ldr	r2, [pc, #304]	@ (800647c <TIM_Base_SetConfig+0x144>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d017      	beq.n	8006380 <TIM_Base_SetConfig+0x48>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006356:	d013      	beq.n	8006380 <TIM_Base_SetConfig+0x48>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a49      	ldr	r2, [pc, #292]	@ (8006480 <TIM_Base_SetConfig+0x148>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00f      	beq.n	8006380 <TIM_Base_SetConfig+0x48>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a48      	ldr	r2, [pc, #288]	@ (8006484 <TIM_Base_SetConfig+0x14c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_Base_SetConfig+0x48>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a47      	ldr	r2, [pc, #284]	@ (8006488 <TIM_Base_SetConfig+0x150>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_Base_SetConfig+0x48>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a46      	ldr	r2, [pc, #280]	@ (800648c <TIM_Base_SetConfig+0x154>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_Base_SetConfig+0x48>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a45      	ldr	r2, [pc, #276]	@ (8006490 <TIM_Base_SetConfig+0x158>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d108      	bne.n	8006392 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a39      	ldr	r2, [pc, #228]	@ (800647c <TIM_Base_SetConfig+0x144>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d023      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a0:	d01f      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a36      	ldr	r2, [pc, #216]	@ (8006480 <TIM_Base_SetConfig+0x148>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01b      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a35      	ldr	r2, [pc, #212]	@ (8006484 <TIM_Base_SetConfig+0x14c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d017      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a34      	ldr	r2, [pc, #208]	@ (8006488 <TIM_Base_SetConfig+0x150>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a33      	ldr	r2, [pc, #204]	@ (800648c <TIM_Base_SetConfig+0x154>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00f      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a33      	ldr	r2, [pc, #204]	@ (8006494 <TIM_Base_SetConfig+0x15c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00b      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a32      	ldr	r2, [pc, #200]	@ (8006498 <TIM_Base_SetConfig+0x160>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a31      	ldr	r2, [pc, #196]	@ (800649c <TIM_Base_SetConfig+0x164>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_Base_SetConfig+0xaa>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006490 <TIM_Base_SetConfig+0x158>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d108      	bne.n	80063f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a18      	ldr	r2, [pc, #96]	@ (800647c <TIM_Base_SetConfig+0x144>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <TIM_Base_SetConfig+0x110>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1a      	ldr	r2, [pc, #104]	@ (800648c <TIM_Base_SetConfig+0x154>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00f      	beq.n	8006448 <TIM_Base_SetConfig+0x110>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a1a      	ldr	r2, [pc, #104]	@ (8006494 <TIM_Base_SetConfig+0x15c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00b      	beq.n	8006448 <TIM_Base_SetConfig+0x110>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <TIM_Base_SetConfig+0x160>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d007      	beq.n	8006448 <TIM_Base_SetConfig+0x110>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a18      	ldr	r2, [pc, #96]	@ (800649c <TIM_Base_SetConfig+0x164>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_Base_SetConfig+0x110>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a13      	ldr	r2, [pc, #76]	@ (8006490 <TIM_Base_SetConfig+0x158>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d103      	bne.n	8006450 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b01      	cmp	r3, #1
 8006460:	d105      	bne.n	800646e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f023 0201 	bic.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	611a      	str	r2, [r3, #16]
  }
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40000400 	.word	0x40000400
 8006484:	40000800 	.word	0x40000800
 8006488:	40000c00 	.word	0x40000c00
 800648c:	40013400 	.word	0x40013400
 8006490:	40015000 	.word	0x40015000
 8006494:	40014000 	.word	0x40014000
 8006498:	40014400 	.word	0x40014400
 800649c:	40014800 	.word	0x40014800

080064a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	f023 0201 	bic.w	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f023 0302 	bic.w	r3, r3, #2
 80064ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a30      	ldr	r2, [pc, #192]	@ (80065bc <TIM_OC1_SetConfig+0x11c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d013      	beq.n	8006528 <TIM_OC1_SetConfig+0x88>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a2f      	ldr	r2, [pc, #188]	@ (80065c0 <TIM_OC1_SetConfig+0x120>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d00f      	beq.n	8006528 <TIM_OC1_SetConfig+0x88>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a2e      	ldr	r2, [pc, #184]	@ (80065c4 <TIM_OC1_SetConfig+0x124>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00b      	beq.n	8006528 <TIM_OC1_SetConfig+0x88>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a2d      	ldr	r2, [pc, #180]	@ (80065c8 <TIM_OC1_SetConfig+0x128>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d007      	beq.n	8006528 <TIM_OC1_SetConfig+0x88>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a2c      	ldr	r2, [pc, #176]	@ (80065cc <TIM_OC1_SetConfig+0x12c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_OC1_SetConfig+0x88>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a2b      	ldr	r2, [pc, #172]	@ (80065d0 <TIM_OC1_SetConfig+0x130>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10c      	bne.n	8006542 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0308 	bic.w	r3, r3, #8
 800652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 0304 	bic.w	r3, r3, #4
 8006540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a1d      	ldr	r2, [pc, #116]	@ (80065bc <TIM_OC1_SetConfig+0x11c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <TIM_OC1_SetConfig+0xd2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1c      	ldr	r2, [pc, #112]	@ (80065c0 <TIM_OC1_SetConfig+0x120>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_OC1_SetConfig+0xd2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1b      	ldr	r2, [pc, #108]	@ (80065c4 <TIM_OC1_SetConfig+0x124>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_OC1_SetConfig+0xd2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1a      	ldr	r2, [pc, #104]	@ (80065c8 <TIM_OC1_SetConfig+0x128>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_OC1_SetConfig+0xd2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a19      	ldr	r2, [pc, #100]	@ (80065cc <TIM_OC1_SetConfig+0x12c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_OC1_SetConfig+0xd2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a18      	ldr	r2, [pc, #96]	@ (80065d0 <TIM_OC1_SetConfig+0x130>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d111      	bne.n	8006596 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	bf00      	nop
 80065b2:	371c      	adds	r7, #28
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	40012c00 	.word	0x40012c00
 80065c0:	40013400 	.word	0x40013400
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800
 80065d0:	40015000 	.word	0x40015000

080065d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	f023 0210 	bic.w	r2, r3, #16
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f023 0320 	bic.w	r3, r3, #32
 8006622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2c      	ldr	r2, [pc, #176]	@ (80066e4 <TIM_OC2_SetConfig+0x110>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_OC2_SetConfig+0x74>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a2b      	ldr	r2, [pc, #172]	@ (80066e8 <TIM_OC2_SetConfig+0x114>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC2_SetConfig+0x74>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a2a      	ldr	r2, [pc, #168]	@ (80066ec <TIM_OC2_SetConfig+0x118>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10d      	bne.n	8006664 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	011b      	lsls	r3, r3, #4
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006662:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a1f      	ldr	r2, [pc, #124]	@ (80066e4 <TIM_OC2_SetConfig+0x110>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d013      	beq.n	8006694 <TIM_OC2_SetConfig+0xc0>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a1e      	ldr	r2, [pc, #120]	@ (80066e8 <TIM_OC2_SetConfig+0x114>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00f      	beq.n	8006694 <TIM_OC2_SetConfig+0xc0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a1e      	ldr	r2, [pc, #120]	@ (80066f0 <TIM_OC2_SetConfig+0x11c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00b      	beq.n	8006694 <TIM_OC2_SetConfig+0xc0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a1d      	ldr	r2, [pc, #116]	@ (80066f4 <TIM_OC2_SetConfig+0x120>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d007      	beq.n	8006694 <TIM_OC2_SetConfig+0xc0>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1c      	ldr	r2, [pc, #112]	@ (80066f8 <TIM_OC2_SetConfig+0x124>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC2_SetConfig+0xc0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a17      	ldr	r2, [pc, #92]	@ (80066ec <TIM_OC2_SetConfig+0x118>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d113      	bne.n	80066bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800669a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	695b      	ldr	r3, [r3, #20]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	621a      	str	r2, [r3, #32]
}
 80066d6:	bf00      	nop
 80066d8:	371c      	adds	r7, #28
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40013400 	.word	0x40013400
 80066ec:	40015000 	.word	0x40015000
 80066f0:	40014000 	.word	0x40014000
 80066f4:	40014400 	.word	0x40014400
 80066f8:	40014800 	.word	0x40014800

080066fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a2b      	ldr	r2, [pc, #172]	@ (8006808 <TIM_OC3_SetConfig+0x10c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d007      	beq.n	800676e <TIM_OC3_SetConfig+0x72>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a2a      	ldr	r2, [pc, #168]	@ (800680c <TIM_OC3_SetConfig+0x110>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC3_SetConfig+0x72>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a29      	ldr	r2, [pc, #164]	@ (8006810 <TIM_OC3_SetConfig+0x114>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10d      	bne.n	800678a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1e      	ldr	r2, [pc, #120]	@ (8006808 <TIM_OC3_SetConfig+0x10c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <TIM_OC3_SetConfig+0xbe>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1d      	ldr	r2, [pc, #116]	@ (800680c <TIM_OC3_SetConfig+0x110>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00f      	beq.n	80067ba <TIM_OC3_SetConfig+0xbe>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a1d      	ldr	r2, [pc, #116]	@ (8006814 <TIM_OC3_SetConfig+0x118>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00b      	beq.n	80067ba <TIM_OC3_SetConfig+0xbe>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006818 <TIM_OC3_SetConfig+0x11c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d007      	beq.n	80067ba <TIM_OC3_SetConfig+0xbe>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a1b      	ldr	r2, [pc, #108]	@ (800681c <TIM_OC3_SetConfig+0x120>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_OC3_SetConfig+0xbe>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a16      	ldr	r2, [pc, #88]	@ (8006810 <TIM_OC3_SetConfig+0x114>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d113      	bne.n	80067e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40013400 	.word	0x40013400
 8006810:	40015000 	.word	0x40015000
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800686e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	031b      	lsls	r3, r3, #12
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a2c      	ldr	r2, [pc, #176]	@ (8006930 <TIM_OC4_SetConfig+0x110>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_OC4_SetConfig+0x74>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a2b      	ldr	r2, [pc, #172]	@ (8006934 <TIM_OC4_SetConfig+0x114>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_OC4_SetConfig+0x74>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a2a      	ldr	r2, [pc, #168]	@ (8006938 <TIM_OC4_SetConfig+0x118>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d10d      	bne.n	80068b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800689a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	031b      	lsls	r3, r3, #12
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006930 <TIM_OC4_SetConfig+0x110>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <TIM_OC4_SetConfig+0xc0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006934 <TIM_OC4_SetConfig+0x114>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00f      	beq.n	80068e0 <TIM_OC4_SetConfig+0xc0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1e      	ldr	r2, [pc, #120]	@ (800693c <TIM_OC4_SetConfig+0x11c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00b      	beq.n	80068e0 <TIM_OC4_SetConfig+0xc0>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006940 <TIM_OC4_SetConfig+0x120>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <TIM_OC4_SetConfig+0xc0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006944 <TIM_OC4_SetConfig+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC4_SetConfig+0xc0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a17      	ldr	r2, [pc, #92]	@ (8006938 <TIM_OC4_SetConfig+0x118>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d113      	bne.n	8006908 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	019b      	lsls	r3, r3, #6
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	019b      	lsls	r3, r3, #6
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400
 8006938:	40015000 	.word	0x40015000
 800693c:	40014000 	.word	0x40014000
 8006940:	40014400 	.word	0x40014400
 8006944:	40014800 	.word	0x40014800

08006948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800698c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	041b      	lsls	r3, r3, #16
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a19      	ldr	r2, [pc, #100]	@ (8006a04 <TIM_OC5_SetConfig+0xbc>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <TIM_OC5_SetConfig+0x82>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a18      	ldr	r2, [pc, #96]	@ (8006a08 <TIM_OC5_SetConfig+0xc0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00f      	beq.n	80069ca <TIM_OC5_SetConfig+0x82>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a17      	ldr	r2, [pc, #92]	@ (8006a0c <TIM_OC5_SetConfig+0xc4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00b      	beq.n	80069ca <TIM_OC5_SetConfig+0x82>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a16      	ldr	r2, [pc, #88]	@ (8006a10 <TIM_OC5_SetConfig+0xc8>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <TIM_OC5_SetConfig+0x82>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <TIM_OC5_SetConfig+0xcc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_OC5_SetConfig+0x82>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a14      	ldr	r2, [pc, #80]	@ (8006a18 <TIM_OC5_SetConfig+0xd0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d109      	bne.n	80069de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	621a      	str	r2, [r3, #32]
}
 80069f8:	bf00      	nop
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	40012c00 	.word	0x40012c00
 8006a08:	40013400 	.word	0x40013400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40014400 	.word	0x40014400
 8006a14:	40014800 	.word	0x40014800
 8006a18:	40015000 	.word	0x40015000

08006a1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	051b      	lsls	r3, r3, #20
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1a      	ldr	r2, [pc, #104]	@ (8006adc <TIM_OC6_SetConfig+0xc0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d013      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x84>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a19      	ldr	r2, [pc, #100]	@ (8006ae0 <TIM_OC6_SetConfig+0xc4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d00f      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x84>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a18      	ldr	r2, [pc, #96]	@ (8006ae4 <TIM_OC6_SetConfig+0xc8>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00b      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x84>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a17      	ldr	r2, [pc, #92]	@ (8006ae8 <TIM_OC6_SetConfig+0xcc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d007      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x84>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <TIM_OC6_SetConfig+0xd0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_OC6_SetConfig+0x84>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a15      	ldr	r2, [pc, #84]	@ (8006af0 <TIM_OC6_SetConfig+0xd4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d109      	bne.n	8006ab4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	029b      	lsls	r3, r3, #10
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40012c00 	.word	0x40012c00
 8006ae0:	40013400 	.word	0x40013400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40014400 	.word	0x40014400
 8006aec:	40014800 	.word	0x40014800
 8006af0:	40015000 	.word	0x40015000

08006af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	011b      	lsls	r3, r3, #4
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f023 030a 	bic.w	r3, r3, #10
 8006b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	621a      	str	r2, [r3, #32]
}
 8006b46:	bf00      	nop
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b087      	sub	sp, #28
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	f023 0210 	bic.w	r2, r3, #16
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	031b      	lsls	r3, r3, #12
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	011b      	lsls	r3, r3, #4
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006bc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	f043 0307 	orr.w	r3, r3, #7
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	609a      	str	r2, [r3, #8]
}
 8006be0:	bf00      	nop
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	021a      	lsls	r2, r3, #8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	609a      	str	r2, [r3, #8]
}
 8006c20:	bf00      	nop
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	2201      	movs	r2, #1
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a1a      	ldr	r2, [r3, #32]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	401a      	ands	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1a      	ldr	r2, [r3, #32]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f003 031f 	and.w	r3, r3, #31
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	fa01 f303 	lsl.w	r3, r1, r3
 8006c64:	431a      	orrs	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e074      	b.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a34      	ldr	r2, [pc, #208]	@ (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a33      	ldr	r2, [pc, #204]	@ (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a31      	ldr	r2, [pc, #196]	@ (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d108      	bne.n	8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a21      	ldr	r2, [pc, #132]	@ (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d10:	d01d      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a1f      	ldr	r2, [pc, #124]	@ (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1d      	ldr	r2, [pc, #116]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a18      	ldr	r2, [pc, #96]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d10c      	bne.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	40012c00 	.word	0x40012c00
 8006d8c:	40013400 	.word	0x40013400
 8006d90:	40015000 	.word	0x40015000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40014000 	.word	0x40014000

08006da4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e078      	b.n	8006eb2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	041b      	lsls	r3, r3, #16
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1b      	ldr	r2, [pc, #108]	@ (8006ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a19      	ldr	r2, [pc, #100]	@ (8006ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d11c      	bne.n	8006ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e70:	051b      	lsls	r3, r3, #20
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40013400 	.word	0x40013400
 8006ec8:	40015000 	.word	0x40015000

08006ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e042      	b.n	8006f64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d106      	bne.n	8006ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7fa ffb1 	bl	8001e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2224      	movs	r2, #36	@ 0x24
 8006efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 ff42 	bl	8007da0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fc43 	bl	80077a8 <UART_SetConfig>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e01b      	b.n	8006f64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 ffc1 	bl	8007ee4 <UART_CheckIdleState>
 8006f62:	4603      	mov	r3, r0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	@ 0x28
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d17b      	bne.n	800707e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_UART_Transmit+0x26>
 8006f8c:	88fb      	ldrh	r3, [r7, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e074      	b.n	8007080 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2221      	movs	r2, #33	@ 0x21
 8006fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fa6:	f7fb f985 	bl	80022b4 <HAL_GetTick>
 8006faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc4:	d108      	bne.n	8006fd8 <HAL_UART_Transmit+0x6c>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d104      	bne.n	8006fd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e003      	b.n	8006fe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fe0:	e030      	b.n	8007044 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2180      	movs	r1, #128	@ 0x80
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f001 f823 	bl	8008038 <UART_WaitOnFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e03d      	b.n	8007080 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007018:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3302      	adds	r3, #2
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	e007      	b.n	8007032 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3301      	adds	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1c8      	bne.n	8006fe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2200      	movs	r2, #0
 8007058:	2140      	movs	r1, #64	@ 0x40
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 ffec 	bl	8008038 <UART_WaitOnFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e006      	b.n	8007080 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	e000      	b.n	8007080 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800707e:	2302      	movs	r3, #2
  }
}
 8007080:	4618      	mov	r0, r3
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	@ 0x28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800709c:	2b20      	cmp	r3, #32
 800709e:	d137      	bne.n	8007110 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <HAL_UART_Receive_IT+0x24>
 80070a6:	88fb      	ldrh	r3, [r7, #6]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e030      	b.n	8007112 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a18      	ldr	r2, [pc, #96]	@ (800711c <HAL_UART_Receive_IT+0x94>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d01f      	beq.n	8007100 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d018      	beq.n	8007100 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	613b      	str	r3, [r7, #16]
   return(result);
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	69f9      	ldr	r1, [r7, #28]
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e6      	bne.n	80070ce <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007100:	88fb      	ldrh	r3, [r7, #6]
 8007102:	461a      	mov	r2, r3
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f001 f804 	bl	8008114 <UART_Start_Receive_IT>
 800710c:	4603      	mov	r3, r0
 800710e:	e000      	b.n	8007112 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
  }
}
 8007112:	4618      	mov	r0, r3
 8007114:	3728      	adds	r7, #40	@ 0x28
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	40008000 	.word	0x40008000

08007120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b0ba      	sub	sp, #232	@ 0xe8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007146:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800714a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800714e:	4013      	ands	r3, r2
 8007150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d11b      	bne.n	8007194 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800715c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b00      	cmp	r3, #0
 8007166:	d015      	beq.n	8007194 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 82e3 	beq.w	8007750 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
      }
      return;
 8007192:	e2dd      	b.n	8007750 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8123 	beq.w	80073e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800719e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80071a2:	4b8d      	ldr	r3, [pc, #564]	@ (80073d8 <HAL_UART_IRQHandler+0x2b8>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d106      	bne.n	80071b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80071aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80071ae:	4b8b      	ldr	r3, [pc, #556]	@ (80073dc <HAL_UART_IRQHandler+0x2bc>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8116 	beq.w	80073e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d011      	beq.n	80071e8 <HAL_UART_IRQHandler+0xc8>
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2201      	movs	r2, #1
 80071d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071de:	f043 0201 	orr.w	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d011      	beq.n	8007218 <HAL_UART_IRQHandler+0xf8>
 80071f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00b      	beq.n	8007218 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2202      	movs	r2, #2
 8007206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720e:	f043 0204 	orr.w	r2, r3, #4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d011      	beq.n	8007248 <HAL_UART_IRQHandler+0x128>
 8007224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2204      	movs	r2, #4
 8007236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723e:	f043 0202 	orr.w	r2, r3, #2
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724c:	f003 0308 	and.w	r3, r3, #8
 8007250:	2b00      	cmp	r3, #0
 8007252:	d017      	beq.n	8007284 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d105      	bne.n	800726c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007260:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007264:	4b5c      	ldr	r3, [pc, #368]	@ (80073d8 <HAL_UART_IRQHandler+0x2b8>)
 8007266:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00b      	beq.n	8007284 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2208      	movs	r2, #8
 8007272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800727a:	f043 0208 	orr.w	r2, r3, #8
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800728c:	2b00      	cmp	r3, #0
 800728e:	d012      	beq.n	80072b6 <HAL_UART_IRQHandler+0x196>
 8007290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007294:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00c      	beq.n	80072b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80072a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ac:	f043 0220 	orr.w	r2, r3, #32
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8249 	beq.w	8007754 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d013      	beq.n	80072f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80072ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d105      	bne.n	80072e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d007      	beq.n	80072f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730a:	2b40      	cmp	r3, #64	@ 0x40
 800730c:	d005      	beq.n	800731a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800730e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007312:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007316:	2b00      	cmp	r3, #0
 8007318:	d054      	beq.n	80073c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f81c 	bl	8008358 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732a:	2b40      	cmp	r3, #64	@ 0x40
 800732c:	d146      	bne.n	80073bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3308      	adds	r3, #8
 8007334:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007344:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007348:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800734c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3308      	adds	r3, #8
 8007356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800735a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800735e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1d9      	bne.n	800732e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007380:	2b00      	cmp	r3, #0
 8007382:	d017      	beq.n	80073b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800738a:	4a15      	ldr	r2, [pc, #84]	@ (80073e0 <HAL_UART_IRQHandler+0x2c0>)
 800738c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007394:	4618      	mov	r0, r3
 8007396:	f7fc fe9d 	bl	80040d4 <HAL_DMA_Abort_IT>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d019      	beq.n	80073d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80073ae:	4610      	mov	r0, r2
 80073b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b2:	e00f      	b.n	80073d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f9e1 	bl	800777c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073ba:	e00b      	b.n	80073d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f9dd 	bl	800777c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c2:	e007      	b.n	80073d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f9d9 	bl	800777c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80073d2:	e1bf      	b.n	8007754 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	bf00      	nop
    return;
 80073d6:	e1bd      	b.n	8007754 <HAL_UART_IRQHandler+0x634>
 80073d8:	10000001 	.word	0x10000001
 80073dc:	04000120 	.word	0x04000120
 80073e0:	08008425 	.word	0x08008425

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	f040 8153 	bne.w	8007694 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 814c 	beq.w	8007694 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80073fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007400:	f003 0310 	and.w	r3, r3, #16
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8145 	beq.w	8007694 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2210      	movs	r2, #16
 8007410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741c:	2b40      	cmp	r3, #64	@ 0x40
 800741e:	f040 80bb 	bne.w	8007598 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007430:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 818f 	beq.w	8007758 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007440:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007444:	429a      	cmp	r2, r3
 8007446:	f080 8187 	bcs.w	8007758 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007450:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 8087 	bne.w	8007576 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800747c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007496:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800749e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1da      	bne.n	8007468 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3308      	adds	r3, #8
 80074b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3308      	adds	r3, #8
 80074d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80074d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80074da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80074de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80074e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e1      	bne.n	80074b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3308      	adds	r3, #8
 80074f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007512:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007514:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007518:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007520:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e3      	bne.n	80074ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007544:	f023 0310 	bic.w	r3, r3, #16
 8007548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007556:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007558:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800755c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e4      	bne.n	8007534 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007570:	4618      	mov	r0, r3
 8007572:	f7fc fd56 	bl	8004022 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007588:	b29b      	uxth	r3, r3
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	b29b      	uxth	r3, r3
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f8fd 	bl	8007790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007596:	e0df      	b.n	8007758 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80d1 	beq.w	800775c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80075ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 80cc 	beq.w	800775c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80075e8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e4      	bne.n	80075c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	623b      	str	r3, [r7, #32]
   return(result);
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007610:	f023 0301 	bic.w	r3, r3, #1
 8007614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3308      	adds	r3, #8
 800761e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007622:	633a      	str	r2, [r7, #48]	@ 0x30
 8007624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e1      	bne.n	80075fa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	e853 3f00 	ldrex	r3, [r3]
 8007656:	60fb      	str	r3, [r7, #12]
   return(result);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0310 	bic.w	r3, r3, #16
 800765e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	461a      	mov	r2, r3
 8007668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800766c:	61fb      	str	r3, [r7, #28]
 800766e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007670:	69b9      	ldr	r1, [r7, #24]
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	e841 2300 	strex	r3, r2, [r1]
 8007678:	617b      	str	r3, [r7, #20]
   return(result);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1e4      	bne.n	800764a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f87f 	bl	8007790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007692:	e063      	b.n	800775c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007698:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00e      	beq.n	80076be <HAL_UART_IRQHandler+0x59e>
 80076a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80076b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fc12 	bl	8008ee0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076bc:	e051      	b.n	8007762 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80076be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d014      	beq.n	80076f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d105      	bne.n	80076e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d008      	beq.n	80076f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d03a      	beq.n	8007760 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
    }
    return;
 80076f2:	e035      	b.n	8007760 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <HAL_UART_IRQHandler+0x5f4>
 8007700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fe9f 	bl	8008450 <UART_EndTransmit_IT>
    return;
 8007712:	e026      	b.n	8007762 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <HAL_UART_IRQHandler+0x614>
 8007720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007724:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fbeb 	bl	8008f08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007732:	e016      	b.n	8007762 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d010      	beq.n	8007762 <HAL_UART_IRQHandler+0x642>
 8007740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007744:	2b00      	cmp	r3, #0
 8007746:	da0c      	bge.n	8007762 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 fbd3 	bl	8008ef4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800774e:	e008      	b.n	8007762 <HAL_UART_IRQHandler+0x642>
      return;
 8007750:	bf00      	nop
 8007752:	e006      	b.n	8007762 <HAL_UART_IRQHandler+0x642>
    return;
 8007754:	bf00      	nop
 8007756:	e004      	b.n	8007762 <HAL_UART_IRQHandler+0x642>
      return;
 8007758:	bf00      	nop
 800775a:	e002      	b.n	8007762 <HAL_UART_IRQHandler+0x642>
      return;
 800775c:	bf00      	nop
 800775e:	e000      	b.n	8007762 <HAL_UART_IRQHandler+0x642>
    return;
 8007760:	bf00      	nop
  }
}
 8007762:	37e8      	adds	r7, #232	@ 0xe8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077ac:	b08c      	sub	sp, #48	@ 0x30
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	431a      	orrs	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	4baa      	ldr	r3, [pc, #680]	@ (8007a80 <UART_SetConfig+0x2d8>)
 80077d8:	4013      	ands	r3, r2
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077e0:	430b      	orrs	r3, r1
 80077e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a9f      	ldr	r2, [pc, #636]	@ (8007a84 <UART_SetConfig+0x2dc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d004      	beq.n	8007814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007810:	4313      	orrs	r3, r2
 8007812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800781e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007828:	430b      	orrs	r3, r1
 800782a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007832:	f023 010f 	bic.w	r1, r3, #15
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a90      	ldr	r2, [pc, #576]	@ (8007a88 <UART_SetConfig+0x2e0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d125      	bne.n	8007898 <UART_SetConfig+0xf0>
 800784c:	4b8f      	ldr	r3, [pc, #572]	@ (8007a8c <UART_SetConfig+0x2e4>)
 800784e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d81a      	bhi.n	8007890 <UART_SetConfig+0xe8>
 800785a:	a201      	add	r2, pc, #4	@ (adr r2, 8007860 <UART_SetConfig+0xb8>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007871 	.word	0x08007871
 8007864:	08007881 	.word	0x08007881
 8007868:	08007879 	.word	0x08007879
 800786c:	08007889 	.word	0x08007889
 8007870:	2301      	movs	r3, #1
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007876:	e116      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007878:	2302      	movs	r3, #2
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e112      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007886:	e10e      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788e:	e10a      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007896:	e106      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a7c      	ldr	r2, [pc, #496]	@ (8007a90 <UART_SetConfig+0x2e8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d138      	bne.n	8007914 <UART_SetConfig+0x16c>
 80078a2:	4b7a      	ldr	r3, [pc, #488]	@ (8007a8c <UART_SetConfig+0x2e4>)
 80078a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a8:	f003 030c 	and.w	r3, r3, #12
 80078ac:	2b0c      	cmp	r3, #12
 80078ae:	d82d      	bhi.n	800790c <UART_SetConfig+0x164>
 80078b0:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <UART_SetConfig+0x110>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078ed 	.word	0x080078ed
 80078bc:	0800790d 	.word	0x0800790d
 80078c0:	0800790d 	.word	0x0800790d
 80078c4:	0800790d 	.word	0x0800790d
 80078c8:	080078fd 	.word	0x080078fd
 80078cc:	0800790d 	.word	0x0800790d
 80078d0:	0800790d 	.word	0x0800790d
 80078d4:	0800790d 	.word	0x0800790d
 80078d8:	080078f5 	.word	0x080078f5
 80078dc:	0800790d 	.word	0x0800790d
 80078e0:	0800790d 	.word	0x0800790d
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	08007905 	.word	0x08007905
 80078ec:	2300      	movs	r3, #0
 80078ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f2:	e0d8      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 80078f4:	2302      	movs	r3, #2
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078fa:	e0d4      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 80078fc:	2304      	movs	r3, #4
 80078fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007902:	e0d0      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007904:	2308      	movs	r3, #8
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800790a:	e0cc      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 800790c:	2310      	movs	r3, #16
 800790e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007912:	e0c8      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a5e      	ldr	r2, [pc, #376]	@ (8007a94 <UART_SetConfig+0x2ec>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d125      	bne.n	800796a <UART_SetConfig+0x1c2>
 800791e:	4b5b      	ldr	r3, [pc, #364]	@ (8007a8c <UART_SetConfig+0x2e4>)
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007924:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007928:	2b30      	cmp	r3, #48	@ 0x30
 800792a:	d016      	beq.n	800795a <UART_SetConfig+0x1b2>
 800792c:	2b30      	cmp	r3, #48	@ 0x30
 800792e:	d818      	bhi.n	8007962 <UART_SetConfig+0x1ba>
 8007930:	2b20      	cmp	r3, #32
 8007932:	d00a      	beq.n	800794a <UART_SetConfig+0x1a2>
 8007934:	2b20      	cmp	r3, #32
 8007936:	d814      	bhi.n	8007962 <UART_SetConfig+0x1ba>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <UART_SetConfig+0x19a>
 800793c:	2b10      	cmp	r3, #16
 800793e:	d008      	beq.n	8007952 <UART_SetConfig+0x1aa>
 8007940:	e00f      	b.n	8007962 <UART_SetConfig+0x1ba>
 8007942:	2300      	movs	r3, #0
 8007944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007948:	e0ad      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 800794a:	2302      	movs	r3, #2
 800794c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007950:	e0a9      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007952:	2304      	movs	r3, #4
 8007954:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007958:	e0a5      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 800795a:	2308      	movs	r3, #8
 800795c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007960:	e0a1      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007962:	2310      	movs	r3, #16
 8007964:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007968:	e09d      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a4a      	ldr	r2, [pc, #296]	@ (8007a98 <UART_SetConfig+0x2f0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d125      	bne.n	80079c0 <UART_SetConfig+0x218>
 8007974:	4b45      	ldr	r3, [pc, #276]	@ (8007a8c <UART_SetConfig+0x2e4>)
 8007976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800797a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800797e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007980:	d016      	beq.n	80079b0 <UART_SetConfig+0x208>
 8007982:	2bc0      	cmp	r3, #192	@ 0xc0
 8007984:	d818      	bhi.n	80079b8 <UART_SetConfig+0x210>
 8007986:	2b80      	cmp	r3, #128	@ 0x80
 8007988:	d00a      	beq.n	80079a0 <UART_SetConfig+0x1f8>
 800798a:	2b80      	cmp	r3, #128	@ 0x80
 800798c:	d814      	bhi.n	80079b8 <UART_SetConfig+0x210>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <UART_SetConfig+0x1f0>
 8007992:	2b40      	cmp	r3, #64	@ 0x40
 8007994:	d008      	beq.n	80079a8 <UART_SetConfig+0x200>
 8007996:	e00f      	b.n	80079b8 <UART_SetConfig+0x210>
 8007998:	2300      	movs	r3, #0
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e082      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 80079a0:	2302      	movs	r3, #2
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e07e      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 80079a8:	2304      	movs	r3, #4
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ae:	e07a      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 80079b0:	2308      	movs	r3, #8
 80079b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079b6:	e076      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 80079b8:	2310      	movs	r3, #16
 80079ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079be:	e072      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a35      	ldr	r2, [pc, #212]	@ (8007a9c <UART_SetConfig+0x2f4>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d12a      	bne.n	8007a20 <UART_SetConfig+0x278>
 80079ca:	4b30      	ldr	r3, [pc, #192]	@ (8007a8c <UART_SetConfig+0x2e4>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079d8:	d01a      	beq.n	8007a10 <UART_SetConfig+0x268>
 80079da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079de:	d81b      	bhi.n	8007a18 <UART_SetConfig+0x270>
 80079e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e4:	d00c      	beq.n	8007a00 <UART_SetConfig+0x258>
 80079e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ea:	d815      	bhi.n	8007a18 <UART_SetConfig+0x270>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <UART_SetConfig+0x250>
 80079f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079f4:	d008      	beq.n	8007a08 <UART_SetConfig+0x260>
 80079f6:	e00f      	b.n	8007a18 <UART_SetConfig+0x270>
 80079f8:	2300      	movs	r3, #0
 80079fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079fe:	e052      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a00:	2302      	movs	r3, #2
 8007a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a06:	e04e      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a0e:	e04a      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a10:	2308      	movs	r3, #8
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a16:	e046      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a18:	2310      	movs	r3, #16
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a1e:	e042      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a17      	ldr	r2, [pc, #92]	@ (8007a84 <UART_SetConfig+0x2dc>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d13a      	bne.n	8007aa0 <UART_SetConfig+0x2f8>
 8007a2a:	4b18      	ldr	r3, [pc, #96]	@ (8007a8c <UART_SetConfig+0x2e4>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007a34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a38:	d01a      	beq.n	8007a70 <UART_SetConfig+0x2c8>
 8007a3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007a3e:	d81b      	bhi.n	8007a78 <UART_SetConfig+0x2d0>
 8007a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a44:	d00c      	beq.n	8007a60 <UART_SetConfig+0x2b8>
 8007a46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a4a:	d815      	bhi.n	8007a78 <UART_SetConfig+0x2d0>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <UART_SetConfig+0x2b0>
 8007a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a54:	d008      	beq.n	8007a68 <UART_SetConfig+0x2c0>
 8007a56:	e00f      	b.n	8007a78 <UART_SetConfig+0x2d0>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a5e:	e022      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a60:	2302      	movs	r3, #2
 8007a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a66:	e01e      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a68:	2304      	movs	r3, #4
 8007a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a6e:	e01a      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a70:	2308      	movs	r3, #8
 8007a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a76:	e016      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a78:	2310      	movs	r3, #16
 8007a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a7e:	e012      	b.n	8007aa6 <UART_SetConfig+0x2fe>
 8007a80:	cfff69f3 	.word	0xcfff69f3
 8007a84:	40008000 	.word	0x40008000
 8007a88:	40013800 	.word	0x40013800
 8007a8c:	40021000 	.word	0x40021000
 8007a90:	40004400 	.word	0x40004400
 8007a94:	40004800 	.word	0x40004800
 8007a98:	40004c00 	.word	0x40004c00
 8007a9c:	40005000 	.word	0x40005000
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4aae      	ldr	r2, [pc, #696]	@ (8007d64 <UART_SetConfig+0x5bc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	f040 8097 	bne.w	8007be0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ab2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ab6:	2b08      	cmp	r3, #8
 8007ab8:	d823      	bhi.n	8007b02 <UART_SetConfig+0x35a>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <UART_SetConfig+0x318>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ae5 	.word	0x08007ae5
 8007ac4:	08007b03 	.word	0x08007b03
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007b03 	.word	0x08007b03
 8007ad0:	08007af3 	.word	0x08007af3
 8007ad4:	08007b03 	.word	0x08007b03
 8007ad8:	08007b03 	.word	0x08007b03
 8007adc:	08007b03 	.word	0x08007b03
 8007ae0:	08007afb 	.word	0x08007afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae4:	f7fd fbce 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 8007ae8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007aea:	e010      	b.n	8007b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aec:	4b9e      	ldr	r3, [pc, #632]	@ (8007d68 <UART_SetConfig+0x5c0>)
 8007aee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007af0:	e00d      	b.n	8007b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af2:	f7fd fb59 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8007af6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007af8:	e009      	b.n	8007b0e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007afe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b00:	e005      	b.n	8007b0e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8130 	beq.w	8007d76 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1a:	4a94      	ldr	r2, [pc, #592]	@ (8007d6c <UART_SetConfig+0x5c4>)
 8007b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b20:	461a      	mov	r2, r3
 8007b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b28:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	4413      	add	r3, r2
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d305      	bcc.n	8007b46 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d903      	bls.n	8007b4e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b4c:	e113      	b.n	8007d76 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b50:	2200      	movs	r2, #0
 8007b52:	60bb      	str	r3, [r7, #8]
 8007b54:	60fa      	str	r2, [r7, #12]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5a:	4a84      	ldr	r2, [pc, #528]	@ (8007d6c <UART_SetConfig+0x5c4>)
 8007b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	2200      	movs	r2, #0
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b70:	f7f8 ff90 	bl	8000a94 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	020b      	lsls	r3, r1, #8
 8007b86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b8a:	0202      	lsls	r2, r0, #8
 8007b8c:	6979      	ldr	r1, [r7, #20]
 8007b8e:	6849      	ldr	r1, [r1, #4]
 8007b90:	0849      	lsrs	r1, r1, #1
 8007b92:	2000      	movs	r0, #0
 8007b94:	460c      	mov	r4, r1
 8007b96:	4605      	mov	r5, r0
 8007b98:	eb12 0804 	adds.w	r8, r2, r4
 8007b9c:	eb43 0905 	adc.w	r9, r3, r5
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	469a      	mov	sl, r3
 8007ba8:	4693      	mov	fp, r2
 8007baa:	4652      	mov	r2, sl
 8007bac:	465b      	mov	r3, fp
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	f7f8 ff6f 	bl	8000a94 <__aeabi_uldivmod>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4613      	mov	r3, r2
 8007bbc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bc4:	d308      	bcc.n	8007bd8 <UART_SetConfig+0x430>
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bcc:	d204      	bcs.n	8007bd8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	60da      	str	r2, [r3, #12]
 8007bd6:	e0ce      	b.n	8007d76 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007bde:	e0ca      	b.n	8007d76 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007be8:	d166      	bne.n	8007cb8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007bea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bee:	2b08      	cmp	r3, #8
 8007bf0:	d827      	bhi.n	8007c42 <UART_SetConfig+0x49a>
 8007bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf8 <UART_SetConfig+0x450>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c25 	.word	0x08007c25
 8007c00:	08007c2d 	.word	0x08007c2d
 8007c04:	08007c43 	.word	0x08007c43
 8007c08:	08007c33 	.word	0x08007c33
 8007c0c:	08007c43 	.word	0x08007c43
 8007c10:	08007c43 	.word	0x08007c43
 8007c14:	08007c43 	.word	0x08007c43
 8007c18:	08007c3b 	.word	0x08007c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c1c:	f7fd fb32 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 8007c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c22:	e014      	b.n	8007c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c24:	f7fd fb44 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 8007c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c2a:	e010      	b.n	8007c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8007d68 <UART_SetConfig+0x5c0>)
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c30:	e00d      	b.n	8007c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c32:	f7fd fab9 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8007c36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c38:	e009      	b.n	8007c4e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c40:	e005      	b.n	8007c4e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007c42:	2300      	movs	r3, #0
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8090 	beq.w	8007d76 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5a:	4a44      	ldr	r2, [pc, #272]	@ (8007d6c <UART_SetConfig+0x5c4>)
 8007c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c60:	461a      	mov	r2, r3
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c68:	005a      	lsls	r2, r3, #1
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	085b      	lsrs	r3, r3, #1
 8007c70:	441a      	add	r2, r3
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	2b0f      	cmp	r3, #15
 8007c80:	d916      	bls.n	8007cb0 <UART_SetConfig+0x508>
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c88:	d212      	bcs.n	8007cb0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	f023 030f 	bic.w	r3, r3, #15
 8007c92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	8bfb      	ldrh	r3, [r7, #30]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	8bfa      	ldrh	r2, [r7, #30]
 8007cac:	60da      	str	r2, [r3, #12]
 8007cae:	e062      	b.n	8007d76 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007cb6:	e05e      	b.n	8007d76 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d828      	bhi.n	8007d12 <UART_SetConfig+0x56a>
 8007cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cc8 <UART_SetConfig+0x520>)
 8007cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc6:	bf00      	nop
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cfd 	.word	0x08007cfd
 8007cd4:	08007d13 	.word	0x08007d13
 8007cd8:	08007d03 	.word	0x08007d03
 8007cdc:	08007d13 	.word	0x08007d13
 8007ce0:	08007d13 	.word	0x08007d13
 8007ce4:	08007d13 	.word	0x08007d13
 8007ce8:	08007d0b 	.word	0x08007d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fd faca 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 8007cf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cf2:	e014      	b.n	8007d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf4:	f7fd fadc 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 8007cf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cfa:	e010      	b.n	8007d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d68 <UART_SetConfig+0x5c0>)
 8007cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d00:	e00d      	b.n	8007d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d02:	f7fd fa51 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8007d06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d08:	e009      	b.n	8007d1e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d10:	e005      	b.n	8007d1e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d028      	beq.n	8007d76 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d28:	4a10      	ldr	r2, [pc, #64]	@ (8007d6c <UART_SetConfig+0x5c4>)
 8007d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	441a      	add	r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	2b0f      	cmp	r3, #15
 8007d4c:	d910      	bls.n	8007d70 <UART_SetConfig+0x5c8>
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d54:	d20c      	bcs.n	8007d70 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60da      	str	r2, [r3, #12]
 8007d60:	e009      	b.n	8007d76 <UART_SetConfig+0x5ce>
 8007d62:	bf00      	nop
 8007d64:	40008000 	.word	0x40008000
 8007d68:	00f42400 	.word	0x00f42400
 8007d6c:	08009218 	.word	0x08009218
      }
      else
      {
        ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3730      	adds	r7, #48	@ 0x30
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01a      	beq.n	8007eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e9e:	d10a      	bne.n	8007eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
  }
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b098      	sub	sp, #96	@ 0x60
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ef4:	f7fa f9de 	bl	80022b4 <HAL_GetTick>
 8007ef8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d12f      	bne.n	8007f68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f10:	2200      	movs	r2, #0
 8007f12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f88e 	bl	8008038 <UART_WaitOnFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d022      	beq.n	8007f68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e6      	bne.n	8007f22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2220      	movs	r2, #32
 8007f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e063      	b.n	8008030 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0304 	and.w	r3, r3, #4
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	d149      	bne.n	800800a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f857 	bl	8008038 <UART_WaitOnFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d03c      	beq.n	800800a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fae:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e6      	bne.n	8007f90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3308      	adds	r3, #8
 8007fc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	e853 3f00 	ldrex	r3, [r3]
 8007fd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3308      	adds	r3, #8
 8007fe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fe2:	61fa      	str	r2, [r7, #28]
 8007fe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	69b9      	ldr	r1, [r7, #24]
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	617b      	str	r3, [r7, #20]
   return(result);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e5      	bne.n	8007fc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e012      	b.n	8008030 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2220      	movs	r2, #32
 800800e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3758      	adds	r7, #88	@ 0x58
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	4613      	mov	r3, r2
 8008046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008048:	e04f      	b.n	80080ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008050:	d04b      	beq.n	80080ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008052:	f7fa f92f 	bl	80022b4 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	429a      	cmp	r2, r3
 8008060:	d302      	bcc.n	8008068 <UART_WaitOnFlagUntilTimeout+0x30>
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e04e      	b.n	800810a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d037      	beq.n	80080ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2b80      	cmp	r3, #128	@ 0x80
 800807e:	d034      	beq.n	80080ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b40      	cmp	r3, #64	@ 0x40
 8008084:	d031      	beq.n	80080ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b08      	cmp	r3, #8
 8008092:	d110      	bne.n	80080b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2208      	movs	r2, #8
 800809a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 f95b 	bl	8008358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2208      	movs	r2, #8
 80080a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e029      	b.n	800810a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080c4:	d111      	bne.n	80080ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f941 	bl	8008358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e00f      	b.n	800810a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69da      	ldr	r2, [r3, #28]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4013      	ands	r3, r2
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	bf0c      	ite	eq
 80080fa:	2301      	moveq	r3, #1
 80080fc:	2300      	movne	r3, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	429a      	cmp	r2, r3
 8008106:	d0a0      	beq.n	800804a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008114:	b480      	push	{r7}
 8008116:	b0a3      	sub	sp, #140	@ 0x8c
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4613      	mov	r3, r2
 8008120:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008146:	d10e      	bne.n	8008166 <UART_Start_Receive_IT+0x52>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d105      	bne.n	800815c <UART_Start_Receive_IT+0x48>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008156:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800815a:	e02d      	b.n	80081b8 <UART_Start_Receive_IT+0xa4>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	22ff      	movs	r2, #255	@ 0xff
 8008160:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008164:	e028      	b.n	80081b8 <UART_Start_Receive_IT+0xa4>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10d      	bne.n	800818a <UART_Start_Receive_IT+0x76>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d104      	bne.n	8008180 <UART_Start_Receive_IT+0x6c>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	22ff      	movs	r2, #255	@ 0xff
 800817a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800817e:	e01b      	b.n	80081b8 <UART_Start_Receive_IT+0xa4>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	227f      	movs	r2, #127	@ 0x7f
 8008184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008188:	e016      	b.n	80081b8 <UART_Start_Receive_IT+0xa4>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008192:	d10d      	bne.n	80081b0 <UART_Start_Receive_IT+0x9c>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d104      	bne.n	80081a6 <UART_Start_Receive_IT+0x92>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	227f      	movs	r2, #127	@ 0x7f
 80081a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081a4:	e008      	b.n	80081b8 <UART_Start_Receive_IT+0xa4>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	223f      	movs	r2, #63	@ 0x3f
 80081aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80081ae:	e003      	b.n	80081b8 <UART_Start_Receive_IT+0xa4>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2222      	movs	r2, #34	@ 0x22
 80081c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80081d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081da:	f043 0301 	orr.w	r3, r3, #1
 80081de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80081ec:	673a      	str	r2, [r7, #112]	@ 0x70
 80081ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80081f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80081fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e3      	bne.n	80081c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008208:	d14f      	bne.n	80082aa <UART_Start_Receive_IT+0x196>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008210:	88fa      	ldrh	r2, [r7, #6]
 8008212:	429a      	cmp	r2, r3
 8008214:	d349      	bcc.n	80082aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821e:	d107      	bne.n	8008230 <UART_Start_Receive_IT+0x11c>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d103      	bne.n	8008230 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4a47      	ldr	r2, [pc, #284]	@ (8008348 <UART_Start_Receive_IT+0x234>)
 800822c:	675a      	str	r2, [r3, #116]	@ 0x74
 800822e:	e002      	b.n	8008236 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4a46      	ldr	r2, [pc, #280]	@ (800834c <UART_Start_Receive_IT+0x238>)
 8008234:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01a      	beq.n	8008274 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008246:	e853 3f00 	ldrex	r3, [r3]
 800824a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800824c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800824e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008252:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008262:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008264:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008266:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008268:	e841 2300 	strex	r3, r2, [r1]
 800826c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800826e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1e4      	bne.n	800823e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800828a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3308      	adds	r3, #8
 8008292:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008294:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008296:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800829a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80082a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e5      	bne.n	8008274 <UART_Start_Receive_IT+0x160>
 80082a8:	e046      	b.n	8008338 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082b2:	d107      	bne.n	80082c4 <UART_Start_Receive_IT+0x1b0>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d103      	bne.n	80082c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4a24      	ldr	r2, [pc, #144]	@ (8008350 <UART_Start_Receive_IT+0x23c>)
 80082c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80082c2:	e002      	b.n	80082ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4a23      	ldr	r2, [pc, #140]	@ (8008354 <UART_Start_Receive_IT+0x240>)
 80082c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d019      	beq.n	8008306 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80082e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80082fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e6      	bne.n	80082d2 <UART_Start_Receive_IT+0x1be>
 8008304:	e018      	b.n	8008338 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	613b      	str	r3, [r7, #16]
   return(result);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f043 0320 	orr.w	r3, r3, #32
 800831a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008324:	623b      	str	r3, [r7, #32]
 8008326:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	6a3a      	ldr	r2, [r7, #32]
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	61bb      	str	r3, [r7, #24]
   return(result);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e6      	bne.n	8008306 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	378c      	adds	r7, #140	@ 0x8c
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	08008b79 	.word	0x08008b79
 800834c:	08008819 	.word	0x08008819
 8008350:	08008661 	.word	0x08008661
 8008354:	080084a9 	.word	0x080084a9

08008358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008358:	b480      	push	{r7}
 800835a:	b095      	sub	sp, #84	@ 0x54
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800836e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800837e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008380:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800838c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e6      	bne.n	8008360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3308      	adds	r3, #8
 8008398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083a8:	f023 0301 	bic.w	r3, r3, #1
 80083ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3308      	adds	r3, #8
 80083b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083be:	e841 2300 	strex	r3, r2, [r1]
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1e3      	bne.n	8008392 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d118      	bne.n	8008404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	e853 3f00 	ldrex	r3, [r3]
 80083de:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	f023 0310 	bic.w	r3, r3, #16
 80083e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f0:	61bb      	str	r3, [r7, #24]
 80083f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	6979      	ldr	r1, [r7, #20]
 80083f6:	69ba      	ldr	r2, [r7, #24]
 80083f8:	e841 2300 	strex	r3, r2, [r1]
 80083fc:	613b      	str	r3, [r7, #16]
   return(result);
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1e6      	bne.n	80083d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008418:	bf00      	nop
 800841a:	3754      	adds	r7, #84	@ 0x54
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f7ff f99a 	bl	800777c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	60bb      	str	r3, [r7, #8]
   return(result);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800846c:	61fb      	str	r3, [r7, #28]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	61bb      	str	r3, [r7, #24]
 8008478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6979      	ldr	r1, [r7, #20]
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	613b      	str	r3, [r7, #16]
   return(result);
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e6      	bne.n	8008458 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2220      	movs	r2, #32
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff f965 	bl	8007768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800849e:	bf00      	nop
 80084a0:	3720      	adds	r7, #32
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
	...

080084a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b09c      	sub	sp, #112	@ 0x70
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80084b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084c0:	2b22      	cmp	r3, #34	@ 0x22
 80084c2:	f040 80be 	bne.w	8008642 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80084d4:	b2d9      	uxtb	r1, r3
 80084d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084e0:	400a      	ands	r2, r1
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008508:	b29b      	uxth	r3, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 80a1 	bne.w	8008652 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800851e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800852e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008530:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008534:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800853c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e6      	bne.n	8008510 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	667b      	str	r3, [r7, #100]	@ 0x64
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008562:	647a      	str	r2, [r7, #68]	@ 0x44
 8008564:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e5      	bne.n	8008542 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2220      	movs	r2, #32
 800857a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a33      	ldr	r2, [pc, #204]	@ (800865c <UART_RxISR_8BIT+0x1b4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d01f      	beq.n	80085d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d018      	beq.n	80085d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	623b      	str	r3, [r7, #32]
   return(result);
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80085c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e6      	bne.n	80085a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d12e      	bne.n	800863a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0310 	bic.w	r3, r3, #16
 80085f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008600:	61fb      	str	r3, [r7, #28]
 8008602:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	69b9      	ldr	r1, [r7, #24]
 8008606:	69fa      	ldr	r2, [r7, #28]
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	617b      	str	r3, [r7, #20]
   return(result);
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e6      	bne.n	80085e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f003 0310 	and.w	r3, r3, #16
 800861e:	2b10      	cmp	r3, #16
 8008620:	d103      	bne.n	800862a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2210      	movs	r2, #16
 8008628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff f8ac 	bl	8007790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008638:	e00b      	b.n	8008652 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7f9 fb20 	bl	8001c80 <HAL_UART_RxCpltCallback>
}
 8008640:	e007      	b.n	8008652 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	699a      	ldr	r2, [r3, #24]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f042 0208 	orr.w	r2, r2, #8
 8008650:	619a      	str	r2, [r3, #24]
}
 8008652:	bf00      	nop
 8008654:	3770      	adds	r7, #112	@ 0x70
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40008000 	.word	0x40008000

08008660 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b09c      	sub	sp, #112	@ 0x70
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800866e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008678:	2b22      	cmp	r3, #34	@ 0x22
 800867a:	f040 80be 	bne.w	80087fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008684:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800868e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008692:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008696:	4013      	ands	r3, r2
 8008698:	b29a      	uxth	r2, r3
 800869a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800869c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086a2:	1c9a      	adds	r2, r3, #2
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	f040 80a1 	bne.w	800880a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80086e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80086ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80086f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e6      	bne.n	80086c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008704:	e853 3f00 	ldrex	r3, [r3]
 8008708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800870a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870c:	f023 0301 	bic.w	r3, r3, #1
 8008710:	663b      	str	r3, [r7, #96]	@ 0x60
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3308      	adds	r3, #8
 8008718:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800871a:	643a      	str	r2, [r7, #64]	@ 0x40
 800871c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008722:	e841 2300 	strex	r3, r2, [r1]
 8008726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1e5      	bne.n	80086fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2220      	movs	r2, #32
 8008732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a33      	ldr	r2, [pc, #204]	@ (8008814 <UART_RxISR_16BIT+0x1b4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d01f      	beq.n	800878c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d018      	beq.n	800878c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	61fb      	str	r3, [r7, #28]
   return(result);
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800876e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800877a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800877e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e6      	bne.n	800875a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008790:	2b01      	cmp	r3, #1
 8008792:	d12e      	bne.n	80087f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	e853 3f00 	ldrex	r3, [r3]
 80087a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f023 0310 	bic.w	r3, r3, #16
 80087ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087bc:	6979      	ldr	r1, [r7, #20]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	e841 2300 	strex	r3, r2, [r1]
 80087c4:	613b      	str	r3, [r7, #16]
   return(result);
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e6      	bne.n	800879a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	69db      	ldr	r3, [r3, #28]
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d103      	bne.n	80087e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2210      	movs	r2, #16
 80087e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7fe ffd0 	bl	8007790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087f0:	e00b      	b.n	800880a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7f9 fa44 	bl	8001c80 <HAL_UART_RxCpltCallback>
}
 80087f8:	e007      	b.n	800880a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f042 0208 	orr.w	r2, r2, #8
 8008808:	619a      	str	r2, [r3, #24]
}
 800880a:	bf00      	nop
 800880c:	3770      	adds	r7, #112	@ 0x70
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	40008000 	.word	0x40008000

08008818 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b0ac      	sub	sp, #176	@ 0xb0
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008826:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800884e:	2b22      	cmp	r3, #34	@ 0x22
 8008850:	f040 8182 	bne.w	8008b58 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800885a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800885e:	e125      	b.n	8008aac <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008866:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800886a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800886e:	b2d9      	uxtb	r1, r3
 8008870:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008874:	b2da      	uxtb	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800887a:	400a      	ands	r2, r1
 800887c:	b2d2      	uxtb	r2, r2
 800887e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008890:	b29b      	uxth	r3, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80088a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088aa:	f003 0307 	and.w	r3, r3, #7
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d053      	beq.n	800895a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d011      	beq.n	80088e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80088be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80088c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00b      	beq.n	80088e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2201      	movs	r2, #1
 80088d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088d8:	f043 0201 	orr.w	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d011      	beq.n	8008912 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80088ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00b      	beq.n	8008912 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2202      	movs	r2, #2
 8008900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008908:	f043 0204 	orr.w	r2, r3, #4
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008916:	f003 0304 	and.w	r3, r3, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	d011      	beq.n	8008942 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800891e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00b      	beq.n	8008942 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2204      	movs	r2, #4
 8008930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008938:	f043 0202 	orr.w	r2, r3, #2
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008948:	2b00      	cmp	r3, #0
 800894a:	d006      	beq.n	800895a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe ff15 	bl	800777c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008960:	b29b      	uxth	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	f040 80a2 	bne.w	8008aac <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008970:	e853 3f00 	ldrex	r3, [r3]
 8008974:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800897c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800898a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800898c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008990:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008998:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e4      	bne.n	8008968 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3308      	adds	r3, #8
 80089a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a8:	e853 3f00 	ldrex	r3, [r3]
 80089ac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80089ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089b4:	f023 0301 	bic.w	r3, r3, #1
 80089b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3308      	adds	r3, #8
 80089c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089c6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80089c8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80089cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80089d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e1      	bne.n	800899e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a5f      	ldr	r2, [pc, #380]	@ (8008b70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d021      	beq.n	8008a3c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01a      	beq.n	8008a3c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a2a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e4      	bne.n	8008a06 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d130      	bne.n	8008aa6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	f023 0310 	bic.w	r3, r3, #16
 8008a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	461a      	mov	r2, r3
 8008a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e4      	bne.n	8008a4a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	f003 0310 	and.w	r3, r3, #16
 8008a8a:	2b10      	cmp	r3, #16
 8008a8c:	d103      	bne.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2210      	movs	r2, #16
 8008a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f7fe fe76 	bl	8007790 <HAL_UARTEx_RxEventCallback>
 8008aa4:	e002      	b.n	8008aac <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7f9 f8ea 	bl	8001c80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008aac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d006      	beq.n	8008ac2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f47f aecf 	bne.w	8008860 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ac8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008acc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d049      	beq.n	8008b68 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ada:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d242      	bcs.n	8008b68 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3308      	adds	r3, #8
 8008b02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e3      	bne.n	8008ae2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a15      	ldr	r2, [pc, #84]	@ (8008b74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008b1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f043 0320 	orr.w	r3, r3, #32
 8008b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	6979      	ldr	r1, [r7, #20]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e4      	bne.n	8008b20 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b56:	e007      	b.n	8008b68 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699a      	ldr	r2, [r3, #24]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0208 	orr.w	r2, r2, #8
 8008b66:	619a      	str	r2, [r3, #24]
}
 8008b68:	bf00      	nop
 8008b6a:	37b0      	adds	r7, #176	@ 0xb0
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	40008000 	.word	0x40008000
 8008b74:	080084a9 	.word	0x080084a9

08008b78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b0ae      	sub	sp, #184	@ 0xb8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b86:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bae:	2b22      	cmp	r3, #34	@ 0x22
 8008bb0:	f040 8186 	bne.w	8008ec0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bbe:	e129      	b.n	8008e14 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bc6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008bd2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008bd6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008bda:	4013      	ands	r3, r2
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008be2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be8:	1c9a      	adds	r2, r3, #2
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d053      	beq.n	8008cbe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d011      	beq.n	8008c46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00b      	beq.n	8008c46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2201      	movs	r2, #1
 8008c34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3c:	f043 0201 	orr.w	r2, r3, #1
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d011      	beq.n	8008c76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2202      	movs	r2, #2
 8008c64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c6c:	f043 0204 	orr.w	r2, r3, #4
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c7a:	f003 0304 	and.w	r3, r3, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d011      	beq.n	8008ca6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2204      	movs	r2, #4
 8008c94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9c:	f043 0202 	orr.w	r2, r3, #2
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d006      	beq.n	8008cbe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7fe fd63 	bl	800777c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 80a4 	bne.w	8008e14 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008cf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008cfa:	e841 2300 	strex	r3, r2, [r1]
 8008cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1e2      	bne.n	8008ccc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008d2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e1      	bne.n	8008d06 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a5f      	ldr	r2, [pc, #380]	@ (8008ed8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d021      	beq.n	8008da4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d01a      	beq.n	8008da4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e4      	bne.n	8008d6e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d130      	bne.n	8008e0e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc2:	f023 0310 	bic.w	r3, r3, #16
 8008dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e4      	bne.n	8008db2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	f003 0310 	and.w	r3, r3, #16
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d103      	bne.n	8008dfe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2210      	movs	r2, #16
 8008dfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7fe fcc2 	bl	8007790 <HAL_UARTEx_RxEventCallback>
 8008e0c:	e002      	b.n	8008e14 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7f8 ff36 	bl	8001c80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d006      	beq.n	8008e2a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f47f aecb 	bne.w	8008bc0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e30:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d049      	beq.n	8008ed0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d242      	bcs.n	8008ed0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	623b      	str	r3, [r7, #32]
   return(result);
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008e6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e3      	bne.n	8008e4a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a15      	ldr	r2, [pc, #84]	@ (8008edc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008e86:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f043 0320 	orr.w	r3, r3, #32
 8008e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eae:	69b9      	ldr	r1, [r7, #24]
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	e841 2300 	strex	r3, r2, [r1]
 8008eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1e4      	bne.n	8008e88 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ebe:	e007      	b.n	8008ed0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699a      	ldr	r2, [r3, #24]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0208 	orr.w	r2, r2, #8
 8008ece:	619a      	str	r2, [r3, #24]
}
 8008ed0:	bf00      	nop
 8008ed2:	37b8      	adds	r7, #184	@ 0xb8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40008000 	.word	0x40008000
 8008edc:	08008661 	.word	0x08008661

08008ee0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d101      	bne.n	8008f32 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e027      	b.n	8008f82 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2224      	movs	r2, #36	@ 0x24
 8008f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0201 	bic.w	r2, r2, #1
 8008f58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2220      	movs	r2, #32
 8008f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e02d      	b.n	8009002 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2224      	movs	r2, #36	@ 0x24
 8008fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0201 	bic.w	r2, r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	683a      	ldr	r2, [r7, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f850 	bl	8009088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800901e:	2302      	movs	r3, #2
 8009020:	e02d      	b.n	800907e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2224      	movs	r2, #36	@ 0x24
 800902e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0201 	bic.w	r2, r2, #1
 8009048:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	430a      	orrs	r2, r1
 800905c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f812 	bl	8009088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2220      	movs	r2, #32
 8009070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009094:	2b00      	cmp	r3, #0
 8009096:	d108      	bne.n	80090aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090a8:	e031      	b.n	800910e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090aa:	2308      	movs	r3, #8
 80090ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090ae:	2308      	movs	r3, #8
 80090b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	0e5b      	lsrs	r3, r3, #25
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	f003 0307 	and.w	r3, r3, #7
 80090c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	0f5b      	lsrs	r3, r3, #29
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f003 0307 	and.w	r3, r3, #7
 80090d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090d2:	7bbb      	ldrb	r3, [r7, #14]
 80090d4:	7b3a      	ldrb	r2, [r7, #12]
 80090d6:	4911      	ldr	r1, [pc, #68]	@ (800911c <UARTEx_SetNbDataToProcess+0x94>)
 80090d8:	5c8a      	ldrb	r2, [r1, r2]
 80090da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090de:	7b3a      	ldrb	r2, [r7, #12]
 80090e0:	490f      	ldr	r1, [pc, #60]	@ (8009120 <UARTEx_SetNbDataToProcess+0x98>)
 80090e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	7b7a      	ldrb	r2, [r7, #13]
 80090f4:	4909      	ldr	r1, [pc, #36]	@ (800911c <UARTEx_SetNbDataToProcess+0x94>)
 80090f6:	5c8a      	ldrb	r2, [r1, r2]
 80090f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090fc:	7b7a      	ldrb	r2, [r7, #13]
 80090fe:	4908      	ldr	r1, [pc, #32]	@ (8009120 <UARTEx_SetNbDataToProcess+0x98>)
 8009100:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009102:	fb93 f3f2 	sdiv	r3, r3, r2
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	08009230 	.word	0x08009230
 8009120:	08009238 	.word	0x08009238

08009124 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	ed93 7a06 	vldr	s14, [r3, #24]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	edd3 7a07 	vldr	s15, [r3, #28]
 800913a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	edd3 7a08 	vldr	s15, [r3, #32]
 8009144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	edd3 7a06 	vldr	s15, [r3, #24]
 8009154:	eeb1 7a67 	vneg.f32	s14, s15
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	edd3 7a08 	vldr	s15, [r3, #32]
 800915e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1a      	ldr	r2, [r3, #32]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d006      	beq.n	8009188 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	330c      	adds	r3, #12
 800917e:	220c      	movs	r2, #12
 8009180:	2100      	movs	r1, #0
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f804 	bl	8009190 <memset>
  }

}
 8009188:	bf00      	nop
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <memset>:
 8009190:	4402      	add	r2, r0
 8009192:	4603      	mov	r3, r0
 8009194:	4293      	cmp	r3, r2
 8009196:	d100      	bne.n	800919a <memset+0xa>
 8009198:	4770      	bx	lr
 800919a:	f803 1b01 	strb.w	r1, [r3], #1
 800919e:	e7f9      	b.n	8009194 <memset+0x4>

080091a0 <__libc_init_array>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	4d0d      	ldr	r5, [pc, #52]	@ (80091d8 <__libc_init_array+0x38>)
 80091a4:	4c0d      	ldr	r4, [pc, #52]	@ (80091dc <__libc_init_array+0x3c>)
 80091a6:	1b64      	subs	r4, r4, r5
 80091a8:	10a4      	asrs	r4, r4, #2
 80091aa:	2600      	movs	r6, #0
 80091ac:	42a6      	cmp	r6, r4
 80091ae:	d109      	bne.n	80091c4 <__libc_init_array+0x24>
 80091b0:	4d0b      	ldr	r5, [pc, #44]	@ (80091e0 <__libc_init_array+0x40>)
 80091b2:	4c0c      	ldr	r4, [pc, #48]	@ (80091e4 <__libc_init_array+0x44>)
 80091b4:	f000 f818 	bl	80091e8 <_init>
 80091b8:	1b64      	subs	r4, r4, r5
 80091ba:	10a4      	asrs	r4, r4, #2
 80091bc:	2600      	movs	r6, #0
 80091be:	42a6      	cmp	r6, r4
 80091c0:	d105      	bne.n	80091ce <__libc_init_array+0x2e>
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c8:	4798      	blx	r3
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7ee      	b.n	80091ac <__libc_init_array+0xc>
 80091ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d2:	4798      	blx	r3
 80091d4:	3601      	adds	r6, #1
 80091d6:	e7f2      	b.n	80091be <__libc_init_array+0x1e>
 80091d8:	08009248 	.word	0x08009248
 80091dc:	08009248 	.word	0x08009248
 80091e0:	08009248 	.word	0x08009248
 80091e4:	0800924c 	.word	0x0800924c

080091e8 <_init>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	bf00      	nop
 80091ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ee:	bc08      	pop	{r3}
 80091f0:	469e      	mov	lr, r3
 80091f2:	4770      	bx	lr

080091f4 <_fini>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	bf00      	nop
 80091f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fa:	bc08      	pop	{r3}
 80091fc:	469e      	mov	lr, r3
 80091fe:	4770      	bx	lr
