
LAB2-Firmware-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009208  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080093e0  080093e0  0000a3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009420  08009420  0000b018  2**0
                  CONTENTS
  4 .ARM          00000008  08009420  08009420  0000a420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009428  08009428  0000b018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009428  08009428  0000a428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800942c  0800942c  0000a42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009430  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000018  08009448  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08009448  0000b388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001824c  00000000  00000000  0000b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9f  00000000  00000000  00023294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00025f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001092  00000000  00000000  00027468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dd6  00000000  00000000  000284fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b96  00000000  00000000  000512d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114245  00000000  00000000  00069e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e0ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d5c  00000000  00000000  0017e0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00183e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080093c8 	.word	0x080093c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080093c8 	.word	0x080093c8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b96a 	b.w	8000d80 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	460c      	mov	r4, r1
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d14e      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	458c      	cmp	ip, r1
 8000ad4:	4686      	mov	lr, r0
 8000ad6:	fab2 f282 	clz	r2, r2
 8000ada:	d962      	bls.n	8000ba2 <__udivmoddi4+0xde>
 8000adc:	b14a      	cbz	r2, 8000af2 <__udivmoddi4+0x2e>
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	4091      	lsls	r1, r2
 8000ae4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	4319      	orrs	r1, r3
 8000aee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af6:	fa1f f68c 	uxth.w	r6, ip
 8000afa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000afe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b02:	fb07 1114 	mls	r1, r7, r4, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb04 f106 	mul.w	r1, r4, r6
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b1a:	f080 8112 	bcs.w	8000d42 <__udivmoddi4+0x27e>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 810f 	bls.w	8000d42 <__udivmoddi4+0x27e>
 8000b24:	3c02      	subs	r4, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a59      	subs	r1, r3, r1
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b32:	fb07 1110 	mls	r1, r7, r0, r1
 8000b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3a:	fb00 f606 	mul.w	r6, r0, r6
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x94>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b4a:	f080 80fc 	bcs.w	8000d46 <__udivmoddi4+0x282>
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	f240 80f9 	bls.w	8000d46 <__udivmoddi4+0x282>
 8000b54:	4463      	add	r3, ip
 8000b56:	3802      	subs	r0, #2
 8000b58:	1b9b      	subs	r3, r3, r6
 8000b5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b5e:	2100      	movs	r1, #0
 8000b60:	b11d      	cbz	r5, 8000b6a <__udivmoddi4+0xa6>
 8000b62:	40d3      	lsrs	r3, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d905      	bls.n	8000b7e <__udivmoddi4+0xba>
 8000b72:	b10d      	cbz	r5, 8000b78 <__udivmoddi4+0xb4>
 8000b74:	e9c5 0100 	strd	r0, r1, [r5]
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e7f5      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000b7e:	fab3 f183 	clz	r1, r3
 8000b82:	2900      	cmp	r1, #0
 8000b84:	d146      	bne.n	8000c14 <__udivmoddi4+0x150>
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xcc>
 8000b8a:	4290      	cmp	r0, r2
 8000b8c:	f0c0 80f0 	bcc.w	8000d70 <__udivmoddi4+0x2ac>
 8000b90:	1a86      	subs	r6, r0, r2
 8000b92:	eb64 0303 	sbc.w	r3, r4, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	2d00      	cmp	r5, #0
 8000b9a:	d0e6      	beq.n	8000b6a <__udivmoddi4+0xa6>
 8000b9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba0:	e7e3      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	f040 8090 	bne.w	8000cc8 <__udivmoddi4+0x204>
 8000ba8:	eba1 040c 	sub.w	r4, r1, ip
 8000bac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb0:	fa1f f78c 	uxth.w	r7, ip
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc6:	fb07 f006 	mul.w	r0, r7, r6
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d908      	bls.n	8000be0 <__udivmoddi4+0x11c>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x11a>
 8000bd8:	4298      	cmp	r0, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2b4>
 8000bde:	4626      	mov	r6, r4
 8000be0:	1a1c      	subs	r4, r3, r0
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bea:	fb08 4410 	mls	r4, r8, r0, r4
 8000bee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf2:	fb00 f707 	mul.w	r7, r0, r7
 8000bf6:	429f      	cmp	r7, r3
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x148>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x146>
 8000c04:	429f      	cmp	r7, r3
 8000c06:	f200 80b0 	bhi.w	8000d6a <__udivmoddi4+0x2a6>
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	1bdb      	subs	r3, r3, r7
 8000c0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c12:	e7a5      	b.n	8000b60 <__udivmoddi4+0x9c>
 8000c14:	f1c1 0620 	rsb	r6, r1, #32
 8000c18:	408b      	lsls	r3, r1
 8000c1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c24:	fa04 f301 	lsl.w	r3, r4, r1
 8000c28:	ea43 030c 	orr.w	r3, r3, ip
 8000c2c:	40f4      	lsrs	r4, r6
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	0c38      	lsrs	r0, r7, #16
 8000c34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c38:	fbb4 fef0 	udiv	lr, r4, r0
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fb00 441e 	mls	r4, r0, lr, r4
 8000c44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c48:	fb0e f90c 	mul.w	r9, lr, ip
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x1a6>
 8000c54:	193c      	adds	r4, r7, r4
 8000c56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c5a:	f080 8084 	bcs.w	8000d66 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8081 	bls.w	8000d66 <__udivmoddi4+0x2a2>
 8000c64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	eba4 0409 	sub.w	r4, r4, r9
 8000c6e:	fa1f f983 	uxth.w	r9, r3
 8000c72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c76:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0x1d2>
 8000c86:	193c      	adds	r4, r7, r4
 8000c88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c8c:	d267      	bcs.n	8000d5e <__udivmoddi4+0x29a>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	d965      	bls.n	8000d5e <__udivmoddi4+0x29a>
 8000c92:	3b02      	subs	r3, #2
 8000c94:	443c      	add	r4, r7
 8000c96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ca2:	429c      	cmp	r4, r3
 8000ca4:	46ce      	mov	lr, r9
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	d351      	bcc.n	8000d4e <__udivmoddi4+0x28a>
 8000caa:	d04e      	beq.n	8000d4a <__udivmoddi4+0x286>
 8000cac:	b155      	cbz	r5, 8000cc4 <__udivmoddi4+0x200>
 8000cae:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cba:	40cb      	lsrs	r3, r1
 8000cbc:	431e      	orrs	r6, r3
 8000cbe:	40cc      	lsrs	r4, r1
 8000cc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	e750      	b.n	8000b6a <__udivmoddi4+0xa6>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd8:	4094      	lsls	r4, r2
 8000cda:	430c      	orrs	r4, r1
 8000cdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cec:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf0:	0c23      	lsrs	r3, r4, #16
 8000cf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf6:	fb00 f107 	mul.w	r1, r0, r7
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x24c>
 8000cfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000d02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d06:	d22c      	bcs.n	8000d62 <__udivmoddi4+0x29e>
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d92a      	bls.n	8000d62 <__udivmoddi4+0x29e>
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	4463      	add	r3, ip
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d18:	fb08 3311 	mls	r3, r8, r1, r3
 8000d1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d20:	fb01 f307 	mul.w	r3, r1, r7
 8000d24:	42a3      	cmp	r3, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x276>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d30:	d213      	bcs.n	8000d5a <__udivmoddi4+0x296>
 8000d32:	42a3      	cmp	r3, r4
 8000d34:	d911      	bls.n	8000d5a <__udivmoddi4+0x296>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4464      	add	r4, ip
 8000d3a:	1ae4      	subs	r4, r4, r3
 8000d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d40:	e739      	b.n	8000bb6 <__udivmoddi4+0xf2>
 8000d42:	4604      	mov	r4, r0
 8000d44:	e6f0      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e706      	b.n	8000b58 <__udivmoddi4+0x94>
 8000d4a:	45c8      	cmp	r8, r9
 8000d4c:	d2ae      	bcs.n	8000cac <__udivmoddi4+0x1e8>
 8000d4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d56:	3801      	subs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <__udivmoddi4+0x1e8>
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e7ed      	b.n	8000d3a <__udivmoddi4+0x276>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	e799      	b.n	8000c96 <__udivmoddi4+0x1d2>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e7d4      	b.n	8000d10 <__udivmoddi4+0x24c>
 8000d66:	46d6      	mov	lr, sl
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1a6>
 8000d6a:	4463      	add	r3, ip
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	e74d      	b.n	8000c0c <__udivmoddi4+0x148>
 8000d70:	4606      	mov	r6, r0
 8000d72:	4623      	mov	r3, r4
 8000d74:	4608      	mov	r0, r1
 8000d76:	e70f      	b.n	8000b98 <__udivmoddi4+0xd4>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	e730      	b.n	8000be0 <__udivmoddi4+0x11c>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f001 fb04 	bl	8002396 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 f945 	bl	800101c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f000 fc37 	bl	8001604 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d96:	f000 fc0b 	bl	80015b0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d9a:	f000 fa05 	bl	80011a8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d9e:	f000 f989 	bl	80010b4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000da2:	f000 fa4b 	bl	800123c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000da6:	f000 fb3b 	bl	8001420 <MX_TIM8_Init>
  MX_TIM4_Init();
 8000daa:	f000 fa95 	bl	80012d8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000dae:	f000 fae9 	bl	8001384 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000db2:	4880      	ldr	r0, [pc, #512]	@ (8000fb4 <main+0x230>)
 8000db4:	f004 fe6e 	bl	8005a94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8000db8:	487f      	ldr	r0, [pc, #508]	@ (8000fb8 <main+0x234>)
 8000dba:	f004 fe6b 	bl	8005a94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000dbe:	487f      	ldr	r0, [pc, #508]	@ (8000fbc <main+0x238>)
 8000dc0:	f004 fe68 	bl	8005a94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8000dc4:	487e      	ldr	r0, [pc, #504]	@ (8000fc0 <main+0x23c>)
 8000dc6:	f004 fe65 	bl	8005a94 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	487a      	ldr	r0, [pc, #488]	@ (8000fb8 <main+0x234>)
 8000dce:	f004 ff33 	bl	8005c38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	4878      	ldr	r0, [pc, #480]	@ (8000fb8 <main+0x234>)
 8000dd6:	f004 ff2f 	bl	8005c38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000dda:	2108      	movs	r1, #8
 8000ddc:	4876      	ldr	r0, [pc, #472]	@ (8000fb8 <main+0x234>)
 8000dde:	f004 ff2b 	bl	8005c38 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 8000de2:	213c      	movs	r1, #60	@ 0x3c
 8000de4:	4875      	ldr	r0, [pc, #468]	@ (8000fbc <main+0x238>)
 8000de6:	f005 f8df 	bl	8005fa8 <HAL_TIM_Encoder_Start>

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dea:	217f      	movs	r1, #127	@ 0x7f
 8000dec:	4875      	ldr	r0, [pc, #468]	@ (8000fc4 <main+0x240>)
 8000dee:	f002 fe51 	bl	8003a94 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADCBuffer, 10);
 8000df2:	220a      	movs	r2, #10
 8000df4:	4974      	ldr	r1, [pc, #464]	@ (8000fc8 <main+0x244>)
 8000df6:	4873      	ldr	r0, [pc, #460]	@ (8000fc4 <main+0x240>)
 8000df8:	f001 ff3e 	bl	8002c78 <HAL_ADC_Start_DMA>

  PID.Kp = 0.18;
 8000dfc:	4b73      	ldr	r3, [pc, #460]	@ (8000fcc <main+0x248>)
 8000dfe:	4a74      	ldr	r2, [pc, #464]	@ (8000fd0 <main+0x24c>)
 8000e00:	619a      	str	r2, [r3, #24]
  PID.Ki = 0.00000;;
 8000e02:	4b72      	ldr	r3, [pc, #456]	@ (8000fcc <main+0x248>)
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.3;
 8000e0a:	4b70      	ldr	r3, [pc, #448]	@ (8000fcc <main+0x248>)
 8000e0c:	4a71      	ldr	r2, [pc, #452]	@ (8000fd4 <main+0x250>)
 8000e0e:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	486e      	ldr	r0, [pc, #440]	@ (8000fcc <main+0x248>)
 8000e14:	f008 fa76 	bl	8009304 <arm_pid_init_f32>

  PID2.Kp = 0.18;
 8000e18:	4b6f      	ldr	r3, [pc, #444]	@ (8000fd8 <main+0x254>)
 8000e1a:	4a6d      	ldr	r2, [pc, #436]	@ (8000fd0 <main+0x24c>)
 8000e1c:	619a      	str	r2, [r3, #24]
  PID2.Ki = 0.00000;;
 8000e1e:	4b6e      	ldr	r3, [pc, #440]	@ (8000fd8 <main+0x254>)
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  PID2.Kd = 0.3;
 8000e26:	4b6c      	ldr	r3, [pc, #432]	@ (8000fd8 <main+0x254>)
 8000e28:	4a6a      	ldr	r2, [pc, #424]	@ (8000fd4 <main+0x250>)
 8000e2a:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID2, 0);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	486a      	ldr	r0, [pc, #424]	@ (8000fd8 <main+0x254>)
 8000e30:	f008 fa68 	bl	8009304 <arm_pid_init_f32>

  UARTInterruptConfig();
 8000e34:	f000 ffec 	bl	8001e10 <UARTInterruptConfig>
  _micros = 0;
 8000e38:	4968      	ldr	r1, [pc, #416]	@ (8000fdc <main+0x258>)
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	e9c1 2300 	strd	r2, r3, [r1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (state == 0)
 8000e46:	4b66      	ldr	r3, [pc, #408]	@ (8000fe0 <main+0x25c>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d115      	bne.n	8000e7a <main+0xf6>
	  {
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 8000e4e:	f001 fb07 	bl	8002460 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	4b63      	ldr	r3, [pc, #396]	@ (8000fe4 <main+0x260>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d9f4      	bls.n	8000e46 <main+0xc2>
		  {
			  timestamp = HAL_GetTick() + 1;
 8000e5c:	f001 fb00 	bl	8002460 <HAL_GetTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a5f      	ldr	r2, [pc, #380]	@ (8000fe4 <main+0x260>)
 8000e66:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2120      	movs	r1, #32
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e70:	f003 fd3e 	bl	80048f0 <HAL_GPIO_WritePin>
			  MotorControl();
 8000e74:	f000 fc8c 	bl	8001790 <MotorControl>
 8000e78:	e7e5      	b.n	8000e46 <main+0xc2>
		  }
	  }

	  else if (state == 1)
 8000e7a:	4b59      	ldr	r3, [pc, #356]	@ (8000fe0 <main+0x25c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d115      	bne.n	8000eae <main+0x12a>
	  {
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 8000e82:	f001 faed 	bl	8002460 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	4b57      	ldr	r3, [pc, #348]	@ (8000fe8 <main+0x264>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d9da      	bls.n	8000e46 <main+0xc2>
		  {
			  timestamp = HAL_GetTick() + 1;
 8000e90:	f001 fae6 	bl	8002460 <HAL_GetTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	3301      	adds	r3, #1
 8000e98:	4a53      	ldr	r2, [pc, #332]	@ (8000fe8 <main+0x264>)
 8000e9a:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f003 fd24 	bl	80048f0 <HAL_GPIO_WritePin>
			  MotorControl2();
 8000ea8:	f000 fdba 	bl	8001a20 <MotorControl2>
 8000eac:	e7cb      	b.n	8000e46 <main+0xc2>
		  }
	  }

	  else if (state == 2)
 8000eae:	4b4c      	ldr	r3, [pc, #304]	@ (8000fe0 <main+0x25c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d1c7      	bne.n	8000e46 <main+0xc2>
	  {
		  static uint32_t timestamp2 = 0;
		  static uint32_t timestampLED = 0;

		  currentTime = micros();
 8000eb6:	f000 ff91 	bl	8001ddc <micros>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	494b      	ldr	r1, [pc, #300]	@ (8000fec <main+0x268>)
 8000ec0:	e9c1 2300 	strd	r2, r3, [r1]
		  currentTimeLED = micros();
 8000ec4:	f000 ff8a 	bl	8001ddc <micros>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4948      	ldr	r1, [pc, #288]	@ (8000ff0 <main+0x26c>)
 8000ece:	e9c1 2300 	strd	r2, r3, [r1]

		  PWMDrive = (int16_t)(Rx[2]<< 8)+Rx[1];
 8000ed2:	4b48      	ldr	r3, [pc, #288]	@ (8000ff4 <main+0x270>)
 8000ed4:	789b      	ldrb	r3, [r3, #2]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b45      	ldr	r3, [pc, #276]	@ (8000ff4 <main+0x270>)
 8000ede:	785b      	ldrb	r3, [r3, #1]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a45      	ldr	r2, [pc, #276]	@ (8000ff8 <main+0x274>)
 8000ee4:	6013      	str	r3, [r2, #0]

		  if(currentTime > timestamp2)
 8000ee6:	4b45      	ldr	r3, [pc, #276]	@ (8000ffc <main+0x278>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	461c      	mov	r4, r3
 8000eee:	4615      	mov	r5, r2
 8000ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <main+0x268>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	4294      	cmp	r4, r2
 8000ef8:	eb75 0303 	sbcs.w	r3, r5, r3
 8000efc:	d22c      	bcs.n	8000f58 <main+0x1d4>
		  {
			  timestamp2 = currentTime + 500;//us
 8000efe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <main+0x268>)
 8000f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000f0a:	4a3c      	ldr	r2, [pc, #240]	@ (8000ffc <main+0x278>)
 8000f0c:	6013      	str	r3, [r2, #0]

			  if(timestamp2 > 4294967296) timestamp2 = 0;

			  dataSend = fabs(Degrees_Position);
 8000f0e:	4b3c      	ldr	r3, [pc, #240]	@ (8001000 <main+0x27c>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	eef0 7ae7 	vabs.f32	s15, s15
 8000f18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1c:	ee17 3a90 	vmov	r3, s15
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b38      	ldr	r3, [pc, #224]	@ (8001004 <main+0x280>)
 8000f24:	801a      	strh	r2, [r3, #0]

			  dataBytes[0] = header; // Header byte
 8000f26:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <main+0x284>)
 8000f28:	781a      	ldrb	r2, [r3, #0]
 8000f2a:	4b38      	ldr	r3, [pc, #224]	@ (800100c <main+0x288>)
 8000f2c:	701a      	strb	r2, [r3, #0]
			  dataBytes[1] = (uint8_t)(dataSend & 0xFF); // Lower byte
 8000f2e:	4b35      	ldr	r3, [pc, #212]	@ (8001004 <main+0x280>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b35      	ldr	r3, [pc, #212]	@ (800100c <main+0x288>)
 8000f36:	705a      	strb	r2, [r3, #1]
			  dataBytes[2] = (uint8_t)((dataSend >> 8) & 0xFF); // Upper byte
 8000f38:	4b32      	ldr	r3, [pc, #200]	@ (8001004 <main+0x280>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b32      	ldr	r3, [pc, #200]	@ (800100c <main+0x288>)
 8000f44:	709a      	strb	r2, [r3, #2]
			  dataBytes[3] = 0x0A;
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <main+0x288>)
 8000f48:	220a      	movs	r2, #10
 8000f4a:	70da      	strb	r2, [r3, #3]

			  HAL_UART_Transmit(&hlpuart1, dataBytes, sizeof(dataBytes), 10);
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	2204      	movs	r2, #4
 8000f50:	492e      	ldr	r1, [pc, #184]	@ (800100c <main+0x288>)
 8000f52:	482f      	ldr	r0, [pc, #188]	@ (8001010 <main+0x28c>)
 8000f54:	f006 f8fa 	bl	800714c <HAL_UART_Transmit>
		  }
		  static uint32_t timestamp = 0;
		  if(timestamp < HAL_GetTick())
 8000f58:	f001 fa82 	bl	8002460 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <main+0x290>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d909      	bls.n	8000f7a <main+0x1f6>
		  {
			  timestamp = HAL_GetTick() + 1;
 8000f66:	f001 fa7b 	bl	8002460 <HAL_GetTick>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	4a29      	ldr	r2, [pc, #164]	@ (8001014 <main+0x290>)
 8000f70:	6013      	str	r3, [r2, #0]
			  ADC_Averaged();
 8000f72:	f000 fbb9 	bl	80016e8 <ADC_Averaged>
			  MotorControl3();
 8000f76:	f000 fe9b 	bl	8001cb0 <MotorControl3>
		  }


		  if(currentTimeLED > timestampLED)
 8000f7a:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <main+0x294>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4698      	mov	r8, r3
 8000f82:	4691      	mov	r9, r2
 8000f84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff0 <main+0x26c>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	4590      	cmp	r8, r2
 8000f8c:	eb79 0303 	sbcs.w	r3, r9, r3
 8000f90:	f4bf af59 	bcs.w	8000e46 <main+0xc2>
		  {
			  timestampLED = currentTime + 500000;//us
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <main+0x268>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 8000fa0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <main+0x294>)
 8000fa6:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fa8:	2120      	movs	r1, #32
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fae:	f003 fcb7 	bl	8004920 <HAL_GPIO_TogglePin>
	  if (state == 0)
 8000fb2:	e748      	b.n	8000e46 <main+0xc2>
 8000fb4:	20000194 	.word	0x20000194
 8000fb8:	20000278 	.word	0x20000278
 8000fbc:	200001e0 	.word	0x200001e0
 8000fc0:	2000022c 	.word	0x2000022c
 8000fc4:	20000034 	.word	0x20000034
 8000fc8:	200002d8 	.word	0x200002d8
 8000fcc:	20000304 	.word	0x20000304
 8000fd0:	3e3851ec 	.word	0x3e3851ec
 8000fd4:	3e99999a 	.word	0x3e99999a
 8000fd8:	20000328 	.word	0x20000328
 8000fdc:	20000368 	.word	0x20000368
 8000fe0:	200002c4 	.word	0x200002c4
 8000fe4:	20000370 	.word	0x20000370
 8000fe8:	20000374 	.word	0x20000374
 8000fec:	200002c8 	.word	0x200002c8
 8000ff0:	200002d0 	.word	0x200002d0
 8000ff4:	20000358 	.word	0x20000358
 8000ff8:	20000360 	.word	0x20000360
 8000ffc:	20000378 	.word	0x20000378
 8001000:	200002f4 	.word	0x200002f4
 8001004:	2000000a 	.word	0x2000000a
 8001008:	20000008 	.word	0x20000008
 800100c:	20000364 	.word	0x20000364
 8001010:	20000100 	.word	0x20000100
 8001014:	2000037c 	.word	0x2000037c
 8001018:	20000380 	.word	0x20000380

0800101c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b094      	sub	sp, #80	@ 0x50
 8001020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	2238      	movs	r2, #56	@ 0x38
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f008 f9a0 	bl	8009370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800103e:	2000      	movs	r0, #0
 8001040:	f003 fca0 	bl	8004984 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104e:	2340      	movs	r3, #64	@ 0x40
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800105a:	2304      	movs	r3, #4
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800105e:	2355      	movs	r3, #85	@ 0x55
 8001060:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001066:	2302      	movs	r3, #2
 8001068:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800106a:	2302      	movs	r3, #2
 800106c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0318 	add.w	r3, r7, #24
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fd3a 	bl	8004aec <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800107e:	f000 ff15 	bl	8001eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2303      	movs	r3, #3
 8001088:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2104      	movs	r1, #4
 800109a:	4618      	mov	r0, r3
 800109c:	f004 f838 	bl	8005110 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010a6:	f000 ff01 	bl	8001eac <Error_Handler>
  }
}
 80010aa:	bf00      	nop
 80010ac:	3750      	adds	r7, #80	@ 0x50
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	@ 0x30
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2220      	movs	r2, #32
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f008 f94f 	bl	8009370 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d2:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <MX_ADC1_Init+0xec>)
 80010d4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010da:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <MX_ADC1_Init+0xec>)
 80010dc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <MX_ADC1_Init+0xec>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <MX_ADC1_Init+0xec>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010ee:	4b2c      	ldr	r3, [pc, #176]	@ (80011a0 <MX_ADC1_Init+0xec>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <MX_ADC1_Init+0xec>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <MX_ADC1_Init+0xec>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001100:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <MX_ADC1_Init+0xec>)
 8001102:	2200      	movs	r2, #0
 8001104:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <MX_ADC1_Init+0xec>)
 8001108:	2200      	movs	r2, #0
 800110a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <MX_ADC1_Init+0xec>)
 800110e:	2201      	movs	r2, #1
 8001110:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <MX_ADC1_Init+0xec>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800111a:	4b21      	ldr	r3, [pc, #132]	@ (80011a0 <MX_ADC1_Init+0xec>)
 800111c:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001120:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001122:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <MX_ADC1_Init+0xec>)
 8001124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001128:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_ADC1_Init+0xec>)
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001132:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <MX_ADC1_Init+0xec>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <MX_ADC1_Init+0xec>)
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001140:	4817      	ldr	r0, [pc, #92]	@ (80011a0 <MX_ADC1_Init+0xec>)
 8001142:	f001 fbdd 	bl	8002900 <HAL_ADC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800114c:	f000 feae 	bl	8001eac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <MX_ADC1_Init+0xec>)
 800115c:	f002 fcfc 	bl	8003b58 <HAL_ADCEx_MultiModeConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001166:	f000 fea1 	bl	8001eac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_ADC1_Init+0xf0>)
 800116c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116e:	2306      	movs	r3, #6
 8001170:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001172:	2307      	movs	r3, #7
 8001174:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001176:	237f      	movs	r3, #127	@ 0x7f
 8001178:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800117a:	2304      	movs	r3, #4
 800117c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	@ (80011a0 <MX_ADC1_Init+0xec>)
 8001188:	f001 fe68 	bl	8002e5c <HAL_ADC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001192:	f000 fe8b 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3730      	adds	r7, #48	@ 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000034 	.word	0x20000034
 80011a4:	04300002 	.word	0x04300002

080011a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011ac:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011ae:	4a22      	ldr	r2, [pc, #136]	@ (8001238 <MX_LPUART1_UART_Init+0x90>)
 80011b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011ea:	4812      	ldr	r0, [pc, #72]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011ec:	f005 ff5e 	bl	80070ac <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011f6:	f000 fe59 	bl	8001eac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	480d      	ldr	r0, [pc, #52]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 80011fe:	f007 ffb6 	bl	800916e <HAL_UARTEx_SetTxFifoThreshold>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001208:	f000 fe50 	bl	8001eac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	4809      	ldr	r0, [pc, #36]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 8001210:	f007 ffeb 	bl	80091ea <HAL_UARTEx_SetRxFifoThreshold>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800121a:	f000 fe47 	bl	8001eac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_LPUART1_UART_Init+0x8c>)
 8001220:	f007 ff6c 	bl	80090fc <HAL_UARTEx_DisableFifoMode>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800122a:	f000 fe3f 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000100 	.word	0x20000100
 8001238:	40008000 	.word	0x40008000

0800123c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <MX_TIM3_Init+0x94>)
 800125c:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <MX_TIM3_Init+0x98>)
 800125e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_TIM3_Init+0x94>)
 8001262:	22a9      	movs	r2, #169	@ 0xa9
 8001264:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_TIM3_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_TIM3_Init+0x94>)
 800126e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001272:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_TIM3_Init+0x94>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_TIM3_Init+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001280:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <MX_TIM3_Init+0x94>)
 8001282:	f004 fbaf 	bl	80059e4 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800128c:	f000 fe0e 	bl	8001eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001294:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <MX_TIM3_Init+0x94>)
 800129e:	f005 f825 	bl	80062ec <HAL_TIM_ConfigClockSource>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012a8:	f000 fe00 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ac:	2320      	movs	r3, #32
 80012ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_TIM3_Init+0x94>)
 80012ba:	f005 fdcd 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012c4:	f000 fdf2 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000194 	.word	0x20000194
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	@ 0x30
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2224      	movs	r2, #36	@ 0x24
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f008 f842 	bl	8009370 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <MX_TIM4_Init+0xa4>)
 80012f8:	4a21      	ldr	r2, [pc, #132]	@ (8001380 <MX_TIM4_Init+0xa8>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <MX_TIM4_Init+0xa4>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <MX_TIM4_Init+0xa4>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3071;
 8001308:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <MX_TIM4_Init+0xa4>)
 800130a:	f640 32ff 	movw	r2, #3071	@ 0xbff
 800130e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <MX_TIM4_Init+0xa4>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <MX_TIM4_Init+0xa4>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800131c:	2303      	movs	r3, #3
 800131e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001324:	2301      	movs	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001334:	2301      	movs	r3, #1
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4619      	mov	r1, r3
 8001346:	480d      	ldr	r0, [pc, #52]	@ (800137c <MX_TIM4_Init+0xa4>)
 8001348:	f004 fd88 	bl	8005e5c <HAL_TIM_Encoder_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001352:	f000 fdab 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800135e:	463b      	mov	r3, r7
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	@ (800137c <MX_TIM4_Init+0xa4>)
 8001364:	f005 fd78 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800136e:	f000 fd9d 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3730      	adds	r7, #48	@ 0x30
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001e0 	.word	0x200001e0
 8001380:	40000800 	.word	0x40000800

08001384 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <MX_TIM5_Init+0x94>)
 80013a4:	4a1d      	ldr	r2, [pc, #116]	@ (800141c <MX_TIM5_Init+0x98>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <MX_TIM5_Init+0x94>)
 80013aa:	22a9      	movs	r2, #169	@ 0xa9
 80013ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <MX_TIM5_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <MX_TIM5_Init+0x94>)
 80013b6:	f04f 32ff 	mov.w	r2, #4294967295
 80013ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b16      	ldr	r3, [pc, #88]	@ (8001418 <MX_TIM5_Init+0x94>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <MX_TIM5_Init+0x94>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013c8:	4813      	ldr	r0, [pc, #76]	@ (8001418 <MX_TIM5_Init+0x94>)
 80013ca:	f004 fb0b 	bl	80059e4 <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013d4:	f000 fd6a 	bl	8001eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	4619      	mov	r1, r3
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <MX_TIM5_Init+0x94>)
 80013e6:	f004 ff81 	bl	80062ec <HAL_TIM_ConfigClockSource>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80013f0:	f000 fd5c 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_TIM5_Init+0x94>)
 8001402:	f005 fd29 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800140c:	f000 fd4e 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000022c 	.word	0x2000022c
 800141c:	40000c00 	.word	0x40000c00

08001420 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b09c      	sub	sp, #112	@ 0x70
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001440:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	615a      	str	r2, [r3, #20]
 8001452:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2234      	movs	r2, #52	@ 0x34
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f007 ff88 	bl	8009370 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001460:	4b51      	ldr	r3, [pc, #324]	@ (80015a8 <MX_TIM8_Init+0x188>)
 8001462:	4a52      	ldr	r2, [pc, #328]	@ (80015ac <MX_TIM8_Init+0x18c>)
 8001464:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16;
 8001466:	4b50      	ldr	r3, [pc, #320]	@ (80015a8 <MX_TIM8_Init+0x188>)
 8001468:	2210      	movs	r2, #16
 800146a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b4e      	ldr	r3, [pc, #312]	@ (80015a8 <MX_TIM8_Init+0x188>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4999;
 8001472:	4b4d      	ldr	r3, [pc, #308]	@ (80015a8 <MX_TIM8_Init+0x188>)
 8001474:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001478:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147a:	4b4b      	ldr	r3, [pc, #300]	@ (80015a8 <MX_TIM8_Init+0x188>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001480:	4b49      	ldr	r3, [pc, #292]	@ (80015a8 <MX_TIM8_Init+0x188>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001486:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <MX_TIM8_Init+0x188>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800148c:	4846      	ldr	r0, [pc, #280]	@ (80015a8 <MX_TIM8_Init+0x188>)
 800148e:	f004 faa9 	bl	80059e4 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001498:	f000 fd08 	bl	8001eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014a6:	4619      	mov	r1, r3
 80014a8:	483f      	ldr	r0, [pc, #252]	@ (80015a8 <MX_TIM8_Init+0x188>)
 80014aa:	f004 ff1f 	bl	80062ec <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80014b4:	f000 fcfa 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014b8:	483b      	ldr	r0, [pc, #236]	@ (80015a8 <MX_TIM8_Init+0x188>)
 80014ba:	f004 fb5b 	bl	8005b74 <HAL_TIM_PWM_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80014c4:	f000 fcf2 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014d8:	4619      	mov	r1, r3
 80014da:	4833      	ldr	r0, [pc, #204]	@ (80015a8 <MX_TIM8_Init+0x188>)
 80014dc:	f005 fcbc 	bl	8006e58 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80014e6:	f000 fce1 	bl	8001eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ea:	2360      	movs	r3, #96	@ 0x60
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f2:	2300      	movs	r3, #0
 80014f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f6:	2300      	movs	r3, #0
 80014f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001506:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800150a:	2200      	movs	r2, #0
 800150c:	4619      	mov	r1, r3
 800150e:	4826      	ldr	r0, [pc, #152]	@ (80015a8 <MX_TIM8_Init+0x188>)
 8001510:	f004 fdd8 	bl	80060c4 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800151a:	f000 fcc7 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800151e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001522:	2204      	movs	r2, #4
 8001524:	4619      	mov	r1, r3
 8001526:	4820      	ldr	r0, [pc, #128]	@ (80015a8 <MX_TIM8_Init+0x188>)
 8001528:	f004 fdcc 	bl	80060c4 <HAL_TIM_PWM_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001532:	f000 fcbb 	bl	8001eac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001536:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800153a:	2208      	movs	r2, #8
 800153c:	4619      	mov	r1, r3
 800153e:	481a      	ldr	r0, [pc, #104]	@ (80015a8 <MX_TIM8_Init+0x188>)
 8001540:	f004 fdc0 	bl	80060c4 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800154a:	f000 fcaf 	bl	8001eac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001562:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001566:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001574:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <MX_TIM8_Init+0x188>)
 800158c:	f005 fcfa 	bl	8006f84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8001596:	f000 fc89 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800159a:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MX_TIM8_Init+0x188>)
 800159c:	f000 fe1e 	bl	80021dc <HAL_TIM_MspPostInit>

}
 80015a0:	bf00      	nop
 80015a2:	3770      	adds	r7, #112	@ 0x70
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000278 	.word	0x20000278
 80015ac:	40013400 	.word	0x40013400

080015b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <MX_DMA_Init+0x50>)
 80015b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ba:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <MX_DMA_Init+0x50>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001600 <MX_DMA_Init+0x50>)
 80015c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001600 <MX_DMA_Init+0x50>)
 80015d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001600 <MX_DMA_Init+0x50>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <MX_DMA_Init+0x50>)
 80015dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f002 fc97 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f002 fcae 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <MX_GPIO_Init+0xd8>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	4a2f      	ldr	r2, [pc, #188]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001626:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001632:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4a29      	ldr	r2, [pc, #164]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0320 	and.w	r3, r3, #32
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <MX_GPIO_Init+0xd8>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4a23      	ldr	r2, [pc, #140]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800166e:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <MX_GPIO_Init+0xd8>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f003 f934 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001688:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4810      	ldr	r0, [pc, #64]	@ (80016e0 <MX_GPIO_Init+0xdc>)
 80016a0:	f002 ffa4 	bl	80045ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 80016a4:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f002 ff94 	bl	80045ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2100      	movs	r1, #0
 80016c8:	2028      	movs	r0, #40	@ 0x28
 80016ca:	f002 fc28 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ce:	2028      	movs	r0, #40	@ 0x28
 80016d0:	f002 fc3f 	bl	8003f52 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d4:	bf00      	nop
 80016d6:	3728      	adds	r7, #40	@ 0x28
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000800 	.word	0x48000800
 80016e4:	00000000 	.word	0x00000000

080016e8 <ADC_Averaged>:

/* USER CODE BEGIN 4 */
void ADC_Averaged()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	e00c      	b.n	800170e <ADC_Averaged+0x26>
	{
		ADC_SumAPot += ADCBuffer[i];
 80016f4:	4a20      	ldr	r2, [pc, #128]	@ (8001778 <ADC_Averaged+0x90>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016fc:	461a      	mov	r2, r3
 80016fe:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <ADC_Averaged+0x94>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4413      	add	r3, r2
 8001704:	4a1d      	ldr	r2, [pc, #116]	@ (800177c <ADC_Averaged+0x94>)
 8001706:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b09      	cmp	r3, #9
 8001712:	ddef      	ble.n	80016f4 <ADC_Averaged+0xc>
	}

	ADC_Average = ADC_SumAPot / 10;
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <ADC_Averaged+0x94>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a19      	ldr	r2, [pc, #100]	@ (8001780 <ADC_Averaged+0x98>)
 800171a:	fb82 1203 	smull	r1, r2, r2, r3
 800171e:	1092      	asrs	r2, r2, #2
 8001720:	17db      	asrs	r3, r3, #31
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <ADC_Averaged+0x9c>)
 8001726:	6013      	str	r3, [r2, #0]
	ADC_SumAPot = 0;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <ADC_Averaged+0x94>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
	Degrees_Position = (ADC_Average * 360.00) / 4095.00;
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <ADC_Averaged+0x9c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fec2 	bl	80004bc <__aeabi_i2d>
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <ADC_Averaged+0xa0>)
 800173e:	f7fe ff27 	bl	8000590 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a309      	add	r3, pc, #36	@ (adr r3, 8001770 <ADC_Averaged+0x88>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f848 	bl	80007e4 <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f94a 	bl	80009f4 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	4a0a      	ldr	r2, [pc, #40]	@ (800178c <ADC_Averaged+0xa4>)
 8001764:	6013      	str	r3, [r2, #0]
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	00000000 	.word	0x00000000
 8001774:	40affe00 	.word	0x40affe00
 8001778:	200002d8 	.word	0x200002d8
 800177c:	200002f0 	.word	0x200002f0
 8001780:	66666667 	.word	0x66666667
 8001784:	200002ec 	.word	0x200002ec
 8001788:	40768000 	.word	0x40768000
 800178c:	200002f4 	.word	0x200002f4

08001790 <MotorControl>:

void MotorControl()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
	ADC_Averaged();
 8001796:	f7ff ffa7 	bl	80016e8 <ADC_Averaged>
	Vfeedback = arm_pid_f32(&PID2, setposition - Degrees_Position);
 800179a:	4b8f      	ldr	r3, [pc, #572]	@ (80019d8 <MotorControl+0x248>)
 800179c:	ed93 7a00 	vldr	s14, [r3]
 80017a0:	4b8e      	ldr	r3, [pc, #568]	@ (80019dc <MotorControl+0x24c>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017aa:	4b8d      	ldr	r3, [pc, #564]	@ (80019e0 <MotorControl+0x250>)
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	edc7 7a02 	vstr	s15, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017bc:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	edd3 6a01 	vldr	s13, [r3, #4]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80017cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80017d0:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80017e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	edc7 7a01 	vstr	s15, [r7, #4]

    /* Update state */
    S->state[1] = S->state[0];
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68ba      	ldr	r2, [r7, #8]
 8001802:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a75      	ldr	r2, [pc, #468]	@ (80019e4 <MotorControl+0x254>)
 800180e:	6013      	str	r3, [r2, #0]

	if (Vfeedback >= 0)
 8001810:	4b74      	ldr	r3, [pc, #464]	@ (80019e4 <MotorControl+0x254>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	db69      	blt.n	80018f4 <MotorControl+0x164>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f003 f861 	bl	80048f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f003 f85a 	bl	80048f0 <HAL_GPIO_WritePin>
		DutyCycle = ((Vfeedback * 4899.00) / 40.00) + 100;
 800183c:	4b69      	ldr	r3, [pc, #420]	@ (80019e4 <MotorControl+0x254>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe4d 	bl	80004e0 <__aeabi_f2d>
 8001846:	a362      	add	r3, pc, #392	@ (adr r3, 80019d0 <MotorControl+0x240>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fea0 	bl	8000590 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b62      	ldr	r3, [pc, #392]	@ (80019e8 <MotorControl+0x258>)
 800185e:	f7fe ffc1 	bl	80007e4 <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	4b5f      	ldr	r3, [pc, #380]	@ (80019ec <MotorControl+0x25c>)
 8001870:	f7fe fcd8 	bl	8000224 <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f8ba 	bl	80009f4 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	4a5b      	ldr	r2, [pc, #364]	@ (80019f0 <MotorControl+0x260>)
 8001884:	6013      	str	r3, [r2, #0]
		if (DutyCycle > 4999) DutyCycle = 4999;
 8001886:	4b5a      	ldr	r3, [pc, #360]	@ (80019f0 <MotorControl+0x260>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80019f4 <MotorControl+0x264>
 8001890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	dd03      	ble.n	80018a2 <MotorControl+0x112>
 800189a:	4b55      	ldr	r3, [pc, #340]	@ (80019f0 <MotorControl+0x260>)
 800189c:	4a56      	ldr	r2, [pc, #344]	@ (80019f8 <MotorControl+0x268>)
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e01b      	b.n	80018da <MotorControl+0x14a>
		else if (DutyCycle < 2500) DutyCycle = 0;
 80018a2:	4b53      	ldr	r3, [pc, #332]	@ (80019f0 <MotorControl+0x260>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80019fc <MotorControl+0x26c>
 80018ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	d504      	bpl.n	80018c0 <MotorControl+0x130>
 80018b6:	4b4e      	ldr	r3, [pc, #312]	@ (80019f0 <MotorControl+0x260>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e00c      	b.n	80018da <MotorControl+0x14a>
		else if (DutyCycle < 2600) DutyCycle = 2600;
 80018c0:	4b4b      	ldr	r3, [pc, #300]	@ (80019f0 <MotorControl+0x260>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001a00 <MotorControl+0x270>
 80018ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	d502      	bpl.n	80018da <MotorControl+0x14a>
 80018d4:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <MotorControl+0x260>)
 80018d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001a04 <MotorControl+0x274>)
 80018d8:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
 80018da:	4b45      	ldr	r3, [pc, #276]	@ (80019f0 <MotorControl+0x260>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	eef0 7ae7 	vabs.f32	s15, s15
 80018e4:	4b48      	ldr	r3, [pc, #288]	@ (8001a08 <MotorControl+0x278>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ec:	ee17 2a90 	vmov	r2, s15
 80018f0:	635a      	str	r2, [r3, #52]	@ 0x34
		if (DutyCycle < -4999) DutyCycle = -4999;
		else if (DutyCycle > -2500) DutyCycle = 0;
		else if (DutyCycle > -2600) DutyCycle = -2600;
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
	}
}
 80018f2:	e068      	b.n	80019c6 <MotorControl+0x236>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fe:	f002 fff7 	bl	80048f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800190c:	f002 fff0 	bl	80048f0 <HAL_GPIO_WritePin>
		DutyCycle = ((Vfeedback * 4899.00) / 40.00) - 100;
 8001910:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <MotorControl+0x254>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fde3 	bl	80004e0 <__aeabi_f2d>
 800191a:	a32d      	add	r3, pc, #180	@ (adr r3, 80019d0 <MotorControl+0x240>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe36 	bl	8000590 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <MotorControl+0x258>)
 8001932:	f7fe ff57 	bl	80007e4 <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b2a      	ldr	r3, [pc, #168]	@ (80019ec <MotorControl+0x25c>)
 8001944:	f7fe fc6c 	bl	8000220 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f850 	bl	80009f4 <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4a26      	ldr	r2, [pc, #152]	@ (80019f0 <MotorControl+0x260>)
 8001958:	6013      	str	r3, [r2, #0]
		if (DutyCycle < -4999) DutyCycle = -4999;
 800195a:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <MotorControl+0x260>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001a0c <MotorControl+0x27c>
 8001964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	d503      	bpl.n	8001976 <MotorControl+0x1e6>
 800196e:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <MotorControl+0x260>)
 8001970:	4a27      	ldr	r2, [pc, #156]	@ (8001a10 <MotorControl+0x280>)
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e01b      	b.n	80019ae <MotorControl+0x21e>
		else if (DutyCycle > -2500) DutyCycle = 0;
 8001976:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <MotorControl+0x260>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001a14 <MotorControl+0x284>
 8001980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001988:	dd04      	ble.n	8001994 <MotorControl+0x204>
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <MotorControl+0x260>)
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e00c      	b.n	80019ae <MotorControl+0x21e>
		else if (DutyCycle > -2600) DutyCycle = -2600;
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <MotorControl+0x260>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001a18 <MotorControl+0x288>
 800199e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	dd02      	ble.n	80019ae <MotorControl+0x21e>
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <MotorControl+0x260>)
 80019aa:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <MotorControl+0x28c>)
 80019ac:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(DutyCycle));
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <MotorControl+0x260>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	eef0 7ae7 	vabs.f32	s15, s15
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <MotorControl+0x278>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c0:	ee17 2a90 	vmov	r2, s15
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	00000000 	.word	0x00000000
 80019d4:	40b32300 	.word	0x40b32300
 80019d8:	20000000 	.word	0x20000000
 80019dc:	200002f4 	.word	0x200002f4
 80019e0:	20000328 	.word	0x20000328
 80019e4:	2000034c 	.word	0x2000034c
 80019e8:	40440000 	.word	0x40440000
 80019ec:	40590000 	.word	0x40590000
 80019f0:	200002fc 	.word	0x200002fc
 80019f4:	459c3800 	.word	0x459c3800
 80019f8:	459c3800 	.word	0x459c3800
 80019fc:	451c4000 	.word	0x451c4000
 8001a00:	45228000 	.word	0x45228000
 8001a04:	45228000 	.word	0x45228000
 8001a08:	20000278 	.word	0x20000278
 8001a0c:	c59c3800 	.word	0xc59c3800
 8001a10:	c59c3800 	.word	0xc59c3800
 8001a14:	c51c4000 	.word	0xc51c4000
 8001a18:	c5228000 	.word	0xc5228000
 8001a1c:	c5228000 	.word	0xc5228000

08001a20 <MotorControl2>:

void MotorControl2()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
	QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
 8001a26:	4b92      	ldr	r3, [pc, #584]	@ (8001c70 <MotorControl2+0x250>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2c:	4a91      	ldr	r2, [pc, #580]	@ (8001c74 <MotorControl2+0x254>)
 8001a2e:	6013      	str	r3, [r2, #0]
	Degrees_Position2 = (QEIReadRaw * 360.00) / 3072.00;
 8001a30:	4b90      	ldr	r3, [pc, #576]	@ (8001c74 <MotorControl2+0x254>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd31 	bl	800049c <__aeabi_ui2d>
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b8e      	ldr	r3, [pc, #568]	@ (8001c78 <MotorControl2+0x258>)
 8001a40:	f7fe fda6 	bl	8000590 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b8a      	ldr	r3, [pc, #552]	@ (8001c7c <MotorControl2+0x25c>)
 8001a52:	f7fe fec7 	bl	80007e4 <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7fe ffc9 	bl	80009f4 <__aeabi_d2f>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a86      	ldr	r2, [pc, #536]	@ (8001c80 <MotorControl2+0x260>)
 8001a66:	6013      	str	r3, [r2, #0]

	Vfeedback2 = arm_pid_f32(&PID, setposition2 - Degrees_Position2);
 8001a68:	4b86      	ldr	r3, [pc, #536]	@ (8001c84 <MotorControl2+0x264>)
 8001a6a:	ed93 7a00 	vldr	s14, [r3]
 8001a6e:	4b84      	ldr	r3, [pc, #528]	@ (8001c80 <MotorControl2+0x260>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	4b83      	ldr	r3, [pc, #524]	@ (8001c88 <MotorControl2+0x268>)
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	edc7 7a02 	vstr	s15, [r7, #8]
    out = (S->A0 * in) +
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	ed93 7a00 	vldr	s14, [r3]
 8001a86:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001a9e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001abc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac0:	edc7 7a01 	vstr	s15, [r7, #4]
    S->state[1] = S->state[0];
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	615a      	str	r2, [r3, #20]
    return (out);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a6c      	ldr	r2, [pc, #432]	@ (8001c8c <MotorControl2+0x26c>)
 8001adc:	6013      	str	r3, [r2, #0]

	if (Vfeedback2 >= 0)
 8001ade:	4b6b      	ldr	r3, [pc, #428]	@ (8001c8c <MotorControl2+0x26c>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	db5e      	blt.n	8001bac <MotorControl2+0x18c>
	{
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8001aee:	4b68      	ldr	r3, [pc, #416]	@ (8001c90 <MotorControl2+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2200      	movs	r2, #0
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001af6:	2201      	movs	r2, #1
 8001af8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b00:	f002 fef6 	bl	80048f0 <HAL_GPIO_WritePin>
		DutyCycle2 = ((Vfeedback2 * 4799.00) / 20.00) + 200;
 8001b04:	4b61      	ldr	r3, [pc, #388]	@ (8001c8c <MotorControl2+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fce9 	bl	80004e0 <__aeabi_f2d>
 8001b0e:	a356      	add	r3, pc, #344	@ (adr r3, 8001c68 <MotorControl2+0x248>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd3c 	bl	8000590 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b5b      	ldr	r3, [pc, #364]	@ (8001c94 <MotorControl2+0x274>)
 8001b26:	f7fe fe5d 	bl	80007e4 <__aeabi_ddiv>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4610      	mov	r0, r2
 8001b30:	4619      	mov	r1, r3
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4b58      	ldr	r3, [pc, #352]	@ (8001c98 <MotorControl2+0x278>)
 8001b38:	f7fe fb74 	bl	8000224 <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7fe ff56 	bl	80009f4 <__aeabi_d2f>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a54      	ldr	r2, [pc, #336]	@ (8001c9c <MotorControl2+0x27c>)
 8001b4c:	6013      	str	r3, [r2, #0]
		if (DutyCycle2 > 4999) DutyCycle2 = 4999;
 8001b4e:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <MotorControl2+0x27c>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001ca0 <MotorControl2+0x280>
 8001b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	dd02      	ble.n	8001b68 <MotorControl2+0x148>
 8001b62:	4b4e      	ldr	r3, [pc, #312]	@ (8001c9c <MotorControl2+0x27c>)
 8001b64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca4 <MotorControl2+0x284>)
 8001b66:	601a      	str	r2, [r3, #0]

		if (fabs(setposition2 - Degrees_Position2) <= 0.5) DutyCycle2 = 0;
 8001b68:	4b46      	ldr	r3, [pc, #280]	@ (8001c84 <MotorControl2+0x264>)
 8001b6a:	ed93 7a00 	vldr	s14, [r3]
 8001b6e:	4b44      	ldr	r3, [pc, #272]	@ (8001c80 <MotorControl2+0x260>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	eef0 7ae7 	vabs.f32	s15, s15
 8001b7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	d803      	bhi.n	8001b92 <MotorControl2+0x172>
 8001b8a:	4b44      	ldr	r3, [pc, #272]	@ (8001c9c <MotorControl2+0x27c>)
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, fabs(DutyCycle2));
 8001b92:	4b42      	ldr	r3, [pc, #264]	@ (8001c9c <MotorControl2+0x27c>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eef0 7ae7 	vabs.f32	s15, s15
 8001b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c90 <MotorControl2+0x270>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ba4:	ee17 2a90 	vmov	r2, s15
 8001ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

		if (fabs(setposition2 - Degrees_Position2) <= 0.5) DutyCycle2 = 0;

		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, fabs(DutyCycle2));
	}
}
 8001baa:	e056      	b.n	8001c5a <MotorControl2+0x23a>
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8001bac:	4b38      	ldr	r3, [pc, #224]	@ (8001c90 <MotorControl2+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
		DutyCycle2 = ((Vfeedback2 * 4799.00) / 20.00) - 200;
 8001bb4:	4b35      	ldr	r3, [pc, #212]	@ (8001c8c <MotorControl2+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fc91 	bl	80004e0 <__aeabi_f2d>
 8001bbe:	a32a      	add	r3, pc, #168	@ (adr r3, 8001c68 <MotorControl2+0x248>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fce4 	bl	8000590 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <MotorControl2+0x274>)
 8001bd6:	f7fe fe05 	bl	80007e4 <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <MotorControl2+0x278>)
 8001be8:	f7fe fb1a 	bl	8000220 <__aeabi_dsub>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe fefe 	bl	80009f4 <__aeabi_d2f>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4a28      	ldr	r2, [pc, #160]	@ (8001c9c <MotorControl2+0x27c>)
 8001bfc:	6013      	str	r3, [r2, #0]
		if (DutyCycle2 < -4999) DutyCycle2 = -4999;
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <MotorControl2+0x27c>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001ca8 <MotorControl2+0x288>
 8001c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d502      	bpl.n	8001c18 <MotorControl2+0x1f8>
 8001c12:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <MotorControl2+0x27c>)
 8001c14:	4a25      	ldr	r2, [pc, #148]	@ (8001cac <MotorControl2+0x28c>)
 8001c16:	601a      	str	r2, [r3, #0]
		if (fabs(setposition2 - Degrees_Position2) <= 0.5) DutyCycle2 = 0;
 8001c18:	4b1a      	ldr	r3, [pc, #104]	@ (8001c84 <MotorControl2+0x264>)
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	4b18      	ldr	r3, [pc, #96]	@ (8001c80 <MotorControl2+0x260>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c28:	eef0 7ae7 	vabs.f32	s15, s15
 8001c2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c38:	d803      	bhi.n	8001c42 <MotorControl2+0x222>
 8001c3a:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MotorControl2+0x27c>)
 8001c3c:	f04f 0200 	mov.w	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, fabs(DutyCycle2));
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <MotorControl2+0x27c>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eef0 7ae7 	vabs.f32	s15, s15
 8001c4c:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <MotorControl2+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c54:	ee17 2a90 	vmov	r2, s15
 8001c58:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	f3af 8000 	nop.w
 8001c68:	00000000 	.word	0x00000000
 8001c6c:	40b2bf00 	.word	0x40b2bf00
 8001c70:	200001e0 	.word	0x200001e0
 8001c74:	20000354 	.word	0x20000354
 8001c78:	40768000 	.word	0x40768000
 8001c7c:	40a80000 	.word	0x40a80000
 8001c80:	200002f8 	.word	0x200002f8
 8001c84:	20000004 	.word	0x20000004
 8001c88:	20000304 	.word	0x20000304
 8001c8c:	20000350 	.word	0x20000350
 8001c90:	20000278 	.word	0x20000278
 8001c94:	40340000 	.word	0x40340000
 8001c98:	40690000 	.word	0x40690000
 8001c9c:	20000300 	.word	0x20000300
 8001ca0:	459c3800 	.word	0x459c3800
 8001ca4:	459c3800 	.word	0x459c3800
 8001ca8:	c59c3800 	.word	0xc59c3800
 8001cac:	c59c3800 	.word	0xc59c3800

08001cb0 <MotorControl3>:

void MotorControl3()
{
 8001cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cb4:	af00      	add	r7, sp, #0
	if (PWMDrive >= 0)
 8001cb6:	4b42      	ldr	r3, [pc, #264]	@ (8001dc0 <MotorControl3+0x110>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db4f      	blt.n	8001d5e <MotorControl3+0xae>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc8:	f002 fe12 	bl	80048f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd6:	f002 fe0b 	bl	80048f0 <HAL_GPIO_WritePin>
		DutyCycle = ((Vfeedback * 4899.00) / 40.00) + 100;
 8001cda:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <MotorControl3+0x114>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fbfe 	bl	80004e0 <__aeabi_f2d>
 8001ce4:	a334      	add	r3, pc, #208	@ (adr r3, 8001db8 <MotorControl3+0x108>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f7fe fc51 	bl	8000590 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b33      	ldr	r3, [pc, #204]	@ (8001dc8 <MotorControl3+0x118>)
 8001cfc:	f7fe fd72 	bl	80007e4 <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <MotorControl3+0x11c>)
 8001d0e:	f7fe fa89 	bl	8000224 <__adddf3>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe fe6b 	bl	80009f4 <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd0 <MotorControl3+0x120>)
 8001d22:	6013      	str	r3, [r2, #0]
		if (PWMDrive > 4999) PWMDrive = 4999;
 8001d24:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <MotorControl3+0x110>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	dd03      	ble.n	8001d38 <MotorControl3+0x88>
 8001d30:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <MotorControl3+0x110>)
 8001d32:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001d36:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(PWMDrive));
 8001d38:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <MotorControl3+0x110>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fbbd 	bl	80004bc <__aeabi_i2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4690      	mov	r8, r2
 8001d48:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001d4c:	4b21      	ldr	r3, [pc, #132]	@ (8001dd4 <MotorControl3+0x124>)
 8001d4e:	681c      	ldr	r4, [r3, #0]
 8001d50:	4640      	mov	r0, r8
 8001d52:	4649      	mov	r1, r9
 8001d54:	f7fe fe2e 	bl	80009b4 <__aeabi_d2uiz>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	6363      	str	r3, [r4, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
		if (PWMDrive < -4999) PWMDrive = -4999;
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(PWMDrive));
	}
}
 8001d5c:	e027      	b.n	8001dae <MotorControl3+0xfe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d68:	f002 fdc2 	bl	80048f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d76:	f002 fdbb 	bl	80048f0 <HAL_GPIO_WritePin>
		if (PWMDrive < -4999) PWMDrive = -4999;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <MotorControl3+0x110>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	@ (8001dd8 <MotorControl3+0x128>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	da02      	bge.n	8001d8a <MotorControl3+0xda>
 8001d84:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <MotorControl3+0x110>)
 8001d86:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <MotorControl3+0x128>)
 8001d88:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, fabs(PWMDrive));
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <MotorControl3+0x110>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fb94 	bl	80004bc <__aeabi_i2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4614      	mov	r4, r2
 8001d9a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <MotorControl3+0x124>)
 8001da0:	681e      	ldr	r6, [r3, #0]
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fe05 	bl	80009b4 <__aeabi_d2uiz>
 8001daa:	4603      	mov	r3, r0
 8001dac:	6373      	str	r3, [r6, #52]	@ 0x34
}
 8001dae:	bf00      	nop
 8001db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001db4:	f3af 8000 	nop.w
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40b32300 	.word	0x40b32300
 8001dc0:	20000360 	.word	0x20000360
 8001dc4:	2000034c 	.word	0x2000034c
 8001dc8:	40440000 	.word	0x40440000
 8001dcc:	40590000 	.word	0x40590000
 8001dd0:	200002fc 	.word	0x200002fc
 8001dd4:	20000278 	.word	0x20000278
 8001dd8:	ffffec79 	.word	0xffffec79

08001ddc <micros>:
		_micros += UINT32_MAX;
	}
}

uint64_t micros()
{
 8001ddc:	b4b0      	push	{r4, r5, r7}
 8001dde:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5) + _micros;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <micros+0x2c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	2200      	movs	r2, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	4611      	mov	r1, r2
 8001dec:	4b07      	ldr	r3, [pc, #28]	@ (8001e0c <micros+0x30>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	1884      	adds	r4, r0, r2
 8001df4:	eb41 0503 	adc.w	r5, r1, r3
 8001df8:	4622      	mov	r2, r4
 8001dfa:	462b      	mov	r3, r5
}
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bcb0      	pop	{r4, r5, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	2000022c 	.word	0x2000022c
 8001e0c:	20000368 	.word	0x20000368

08001e10 <UARTInterruptConfig>:
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
	QEIdata.TimeStamp[OLD]= QEIdata.TimeStamp[NEW];
}

void UARTInterruptConfig()
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Rx,4);
 8001e14:	2204      	movs	r2, #4
 8001e16:	4903      	ldr	r1, [pc, #12]	@ (8001e24 <UARTInterruptConfig+0x14>)
 8001e18:	4803      	ldr	r0, [pc, #12]	@ (8001e28 <UARTInterruptConfig+0x18>)
 8001e1a:	f005 fa25 	bl	8007268 <HAL_UART_Receive_IT>
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000358 	.word	0x20000358
 8001e28:	20000100 	.word	0x20000100

08001e2c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a07      	ldr	r2, [pc, #28]	@ (8001e54 <HAL_UART_RxCpltCallback+0x28>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d107      	bne.n	8001e4c <HAL_UART_RxCpltCallback+0x20>
	{
		Rx[4] = '\0';
 8001e3c:	4b06      	ldr	r3, [pc, #24]	@ (8001e58 <HAL_UART_RxCpltCallback+0x2c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, Rx, 4);
 8001e42:	2204      	movs	r2, #4
 8001e44:	4904      	ldr	r1, [pc, #16]	@ (8001e58 <HAL_UART_RxCpltCallback+0x2c>)
 8001e46:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <HAL_UART_RxCpltCallback+0x28>)
 8001e48:	f005 fa0e 	bl	8007268 <HAL_UART_Receive_IT>
	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000100 	.word	0x20000100
 8001e58:	20000358 	.word	0x20000358

08001e5c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e6c:	d116      	bne.n	8001e9c <HAL_GPIO_EXTI_Callback+0x40>
	{
		switch (state)
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d00e      	beq.n	8001e94 <HAL_GPIO_EXTI_Callback+0x38>
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	dc10      	bgt.n	8001e9c <HAL_GPIO_EXTI_Callback+0x40>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_GPIO_EXTI_Callback+0x28>
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d004      	beq.n	8001e8c <HAL_GPIO_EXTI_Callback+0x30>
		case 2:
			state = 0;
			break;
		}
	}
}
 8001e82:	e00b      	b.n	8001e9c <HAL_GPIO_EXTI_Callback+0x40>
			state = 1;
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
			break;
 8001e8a:	e007      	b.n	8001e9c <HAL_GPIO_EXTI_Callback+0x40>
			state = 2;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
			break;
 8001e92:	e003      	b.n	8001e9c <HAL_GPIO_EXTI_Callback+0x40>
			state = 0;
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
			break;
 8001e9a:	bf00      	nop
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	200002c4 	.word	0x200002c4

08001eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <Error_Handler+0x8>

08001eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <HAL_MspInit+0x44>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <HAL_MspInit+0x44>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eca:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <HAL_MspInit+0x44>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_MspInit+0x44>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <HAL_MspInit+0x44>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_MspInit+0x44>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001eee:	f002 fded 	bl	8004acc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b09e      	sub	sp, #120	@ 0x78
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	2254      	movs	r2, #84	@ 0x54
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f007 fa25 	bl	8009370 <memset>
  if(hadc->Instance==ADC1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f2e:	d15f      	bne.n	8001ff0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f36:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f3a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 fb01 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001f4c:	f7ff ffae 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f50:	4b29      	ldr	r3, [pc, #164]	@ (8001ff8 <HAL_ADC_MspInit+0xf8>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	4a28      	ldr	r2, [pc, #160]	@ (8001ff8 <HAL_ADC_MspInit+0xf8>)
 8001f56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5c:	4b26      	ldr	r3, [pc, #152]	@ (8001ff8 <HAL_ADC_MspInit+0xf8>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	4b23      	ldr	r3, [pc, #140]	@ (8001ff8 <HAL_ADC_MspInit+0xf8>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6c:	4a22      	ldr	r2, [pc, #136]	@ (8001ff8 <HAL_ADC_MspInit+0xf8>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f74:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <HAL_ADC_MspInit+0xf8>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f80:	2301      	movs	r3, #1
 8001f82:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f84:	2303      	movs	r3, #3
 8001f86:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f96:	f002 fb29 	bl	80045ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001f9c:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <HAL_ADC_MspInit+0x100>)
 8001f9e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fa2:	2205      	movs	r2, #5
 8001fa4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fb4:	2280      	movs	r2, #128	@ 0x80
 8001fb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fca:	2220      	movs	r2, #32
 8001fcc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fd4:	4809      	ldr	r0, [pc, #36]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fd6:	f001 ffd7 	bl	8003f88 <HAL_DMA_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001fe0:	f7ff ff64 	bl	8001eac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fe8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fea:	4a04      	ldr	r2, [pc, #16]	@ (8001ffc <HAL_ADC_MspInit+0xfc>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3778      	adds	r7, #120	@ 0x78
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	200000a0 	.word	0x200000a0
 8002000:	40020008 	.word	0x40020008

08002004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b09e      	sub	sp, #120	@ 0x78
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800201c:	f107 0310 	add.w	r3, r7, #16
 8002020:	2254      	movs	r2, #84	@ 0x54
 8002022:	2100      	movs	r1, #0
 8002024:	4618      	mov	r0, r3
 8002026:	f007 f9a3 	bl	8009370 <memset>
  if(huart->Instance==LPUART1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a23      	ldr	r2, [pc, #140]	@ (80020bc <HAL_UART_MspInit+0xb8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d13e      	bne.n	80020b2 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002034:	2320      	movs	r3, #32
 8002036:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002038:	2300      	movs	r3, #0
 800203a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fa81 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800204c:	f7ff ff2e 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <HAL_UART_MspInit+0xbc>)
 8002052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002054:	4a1a      	ldr	r2, [pc, #104]	@ (80020c0 <HAL_UART_MspInit+0xbc>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800205c:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <HAL_UART_MspInit+0xbc>)
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	4b15      	ldr	r3, [pc, #84]	@ (80020c0 <HAL_UART_MspInit+0xbc>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <HAL_UART_MspInit+0xbc>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_UART_MspInit+0xbc>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002080:	230c      	movs	r3, #12
 8002082:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002090:	230c      	movs	r3, #12
 8002092:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002098:	4619      	mov	r1, r3
 800209a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800209e:	f002 faa5 	bl	80045ec <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	205b      	movs	r0, #91	@ 0x5b
 80020a8:	f001 ff39 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80020ac:	205b      	movs	r0, #91	@ 0x5b
 80020ae:	f001 ff50 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3778      	adds	r7, #120	@ 0x78
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40008000 	.word	0x40008000
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <HAL_TIM_Base_MspInit+0x80>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10c      	bne.n	80020f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e2:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020ee:	e022      	b.n	8002136 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a15      	ldr	r2, [pc, #84]	@ (800214c <HAL_TIM_Base_MspInit+0x88>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d10c      	bne.n	8002114 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020fa:	4b13      	ldr	r3, [pc, #76]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fe:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 8002100:	f043 0308 	orr.w	r3, r3, #8
 8002104:	6593      	str	r3, [r2, #88]	@ 0x58
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
}
 8002112:	e010      	b.n	8002136 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_TIM_Base_MspInit+0x8c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10b      	bne.n	8002136 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 8002124:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002128:	6613      	str	r3, [r2, #96]	@ 0x60
 800212a:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <HAL_TIM_Base_MspInit+0x84>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40000400 	.word	0x40000400
 8002148:	40021000 	.word	0x40021000
 800214c:	40000c00 	.word	0x40000c00
 8002150:	40013400 	.word	0x40013400

08002154 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	@ 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a17      	ldr	r2, [pc, #92]	@ (80021d0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d127      	bne.n	80021c6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002176:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217a:	4a16      	ldr	r2, [pc, #88]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6593      	str	r3, [r2, #88]	@ 0x58
 8002182:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	4a10      	ldr	r2, [pc, #64]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021a6:	23c0      	movs	r3, #192	@ 0xc0
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021b6:	2302      	movs	r3, #2
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <HAL_TIM_Encoder_MspInit+0x84>)
 80021c2:	f002 fa13 	bl	80045ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	@ 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40000800 	.word	0x40000800
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48000400 	.word	0x48000400

080021dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002278 <HAL_TIM_MspPostInit+0x9c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d138      	bne.n	8002270 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_TIM_MspPostInit+0xa0>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <HAL_TIM_MspPostInit+0xa0>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b1c      	ldr	r3, [pc, #112]	@ (800227c <HAL_TIM_MspPostInit+0xa0>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	4b19      	ldr	r3, [pc, #100]	@ (800227c <HAL_TIM_MspPostInit+0xa0>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a18      	ldr	r2, [pc, #96]	@ (800227c <HAL_TIM_MspPostInit+0xa0>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <HAL_TIM_MspPostInit+0xa0>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800222e:	23c0      	movs	r3, #192	@ 0xc0
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800223e:	2304      	movs	r3, #4
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	480d      	ldr	r0, [pc, #52]	@ (8002280 <HAL_TIM_MspPostInit+0xa4>)
 800224a:	f002 f9cf 	bl	80045ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800224e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002260:	230a      	movs	r3, #10
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4806      	ldr	r0, [pc, #24]	@ (8002284 <HAL_TIM_MspPostInit+0xa8>)
 800226c:	f002 f9be 	bl	80045ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	@ 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40013400 	.word	0x40013400
 800227c:	40021000 	.word	0x40021000
 8002280:	48000800 	.word	0x48000800
 8002284:	48000400 	.word	0x48000400

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <NMI_Handler+0x4>

08002290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <MemManage_Handler+0x4>

080022a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <BusFault_Handler+0x4>

080022a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <UsageFault_Handler+0x4>

080022b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022de:	f000 f8ad 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <DMA1_Channel1_IRQHandler+0x10>)
 80022ee:	f002 f82e 	bl	800434e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200000a0 	.word	0x200000a0

080022fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002300:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002304:	f002 fb26 	bl	8004954 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002310:	4802      	ldr	r0, [pc, #8]	@ (800231c <LPUART1_IRQHandler+0x10>)
 8002312:	f004 fff5 	bl	8007300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000100 	.word	0x20000100

08002320 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002324:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <SystemInit+0x20>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <SystemInit+0x20>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002344:	480d      	ldr	r0, [pc, #52]	@ (800237c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002346:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002348:	f7ff ffea 	bl	8002320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800234c:	480c      	ldr	r0, [pc, #48]	@ (8002380 <LoopForever+0x6>)
  ldr r1, =_edata
 800234e:	490d      	ldr	r1, [pc, #52]	@ (8002384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002350:	4a0d      	ldr	r2, [pc, #52]	@ (8002388 <LoopForever+0xe>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002354:	e002      	b.n	800235c <LoopCopyDataInit>

08002356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235a:	3304      	adds	r3, #4

0800235c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800235c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002360:	d3f9      	bcc.n	8002356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002364:	4c0a      	ldr	r4, [pc, #40]	@ (8002390 <LoopForever+0x16>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002368:	e001      	b.n	800236e <LoopFillZerobss>

0800236a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800236c:	3204      	adds	r2, #4

0800236e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002370:	d3fb      	bcc.n	800236a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002372:	f007 f805 	bl	8009380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002376:	f7fe fd05 	bl	8000d84 <main>

0800237a <LoopForever>:

LoopForever:
    b LoopForever
 800237a:	e7fe      	b.n	800237a <LoopForever>
  ldr   r0, =_estack
 800237c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002388:	08009430 	.word	0x08009430
  ldr r2, =_sbss
 800238c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002390:	20000388 	.word	0x20000388

08002394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC1_2_IRQHandler>

08002396 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a0:	2003      	movs	r0, #3
 80023a2:	f001 fdb1 	bl	8003f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f80e 	bl	80023c8 <HAL_InitTick>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
 80023b6:	e001      	b.n	80023bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b8:	f7ff fd7e 	bl	8001eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023bc:	79fb      	ldrb	r3, [r7, #7]

}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023d4:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <HAL_InitTick+0x68>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d022      	beq.n	8002422 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_InitTick+0x6c>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <HAL_InitTick+0x68>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 fdbc 	bl	8003f6e <HAL_SYSTICK_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	d809      	bhi.n	8002416 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002402:	2200      	movs	r2, #0
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	f04f 30ff 	mov.w	r0, #4294967295
 800240a:	f001 fd88 	bl	8003f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <HAL_InitTick+0x70>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e007      	b.n	8002426 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e004      	b.n	8002426 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
 8002420:	e001      	b.n	8002426 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000014 	.word	0x20000014
 8002434:	2000000c 	.word	0x2000000c
 8002438:	20000010 	.word	0x20000010

0800243c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_IncTick+0x1c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_IncTick+0x20>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4413      	add	r3, r2
 800244a:	4a03      	ldr	r2, [pc, #12]	@ (8002458 <HAL_IncTick+0x1c>)
 800244c:	6013      	str	r3, [r2, #0]
}
 800244e:	bf00      	nop
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	20000384 	.word	0x20000384
 800245c:	20000014 	.word	0x20000014

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000384 	.word	0x20000384

08002478 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	609a      	str	r2, [r3, #8]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3360      	adds	r3, #96	@ 0x60
 80024f2:	461a      	mov	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <LL_ADC_SetOffset+0x44>)
 8002502:	4013      	ands	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	4313      	orrs	r3, r2
 8002510:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	03fff000 	.word	0x03fff000

08002528 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3360      	adds	r3, #96	@ 0x60
 8002536:	461a      	mov	r2, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	3360      	adds	r3, #96	@ 0x60
 8002564:	461a      	mov	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	431a      	orrs	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800258a:	b480      	push	{r7}
 800258c:	b087      	sub	sp, #28
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3360      	adds	r3, #96	@ 0x60
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3360      	adds	r3, #96	@ 0x60
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	615a      	str	r2, [r3, #20]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002642:	b480      	push	{r7}
 8002644:	b087      	sub	sp, #28
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3330      	adds	r3, #48	@ 0x30
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	4413      	add	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	211f      	movs	r1, #31
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	401a      	ands	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 011f 	and.w	r1, r3, #31
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	431a      	orrs	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800269a:	b480      	push	{r7}
 800269c:	b087      	sub	sp, #28
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3314      	adds	r3, #20
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	0e5b      	lsrs	r3, r3, #25
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	0d1b      	lsrs	r3, r3, #20
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2107      	movs	r1, #7
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	401a      	ands	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	0d1b      	lsrs	r3, r3, #20
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	431a      	orrs	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026e4:	bf00      	nop
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	43db      	mvns	r3, r3
 800270a:	401a      	ands	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0318 	and.w	r3, r3, #24
 8002712:	4908      	ldr	r1, [pc, #32]	@ (8002734 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002714:	40d9      	lsrs	r1, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	400b      	ands	r3, r1
 800271a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271e:	431a      	orrs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	0007ffff 	.word	0x0007ffff

08002738 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 031f 	and.w	r3, r3, #31
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002764:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6093      	str	r3, [r2, #8]
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800278c:	d101      	bne.n	8002792 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027dc:	d101      	bne.n	80027e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002800:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002804:	f043 0201 	orr.w	r2, r3, #1
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002828:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800282c:	f043 0202 	orr.w	r2, r3, #2
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <LL_ADC_IsEnabled+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_IsEnabled+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d101      	bne.n	800287e <LL_ADC_IsDisableOngoing+0x18>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <LL_ADC_IsDisableOngoing+0x1a>
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800289c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d101      	bne.n	80028cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d101      	bne.n	80028f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b089      	sub	sp, #36	@ 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e1a9      	b.n	8002c6e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fae9 	bl	8001f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff19 	bl	8002778 <LL_ADC_IsDeepPowerDownEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff feff 	bl	8002754 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff34 	bl	80027c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d115      	bne.n	8002992 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff18 	bl	80027a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002970:	4b9c      	ldr	r3, [pc, #624]	@ (8002be4 <HAL_ADC_Init+0x2e4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	4a9c      	ldr	r2, [pc, #624]	@ (8002be8 <HAL_ADC_Init+0x2e8>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002984:	e002      	b.n	800298c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3b01      	subs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f9      	bne.n	8002986 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff16 	bl	80027c8 <LL_ADC_IsInternalRegulatorEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a6:	f043 0210 	orr.w	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff76 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 80029c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ce:	f003 0310 	and.w	r3, r3, #16
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 8142 	bne.w	8002c5c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 813e 	bne.w	8002c5c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029e8:	f043 0202 	orr.w	r2, r3, #2
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff23 	bl	8002840 <LL_ADC_IsEnabled>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d141      	bne.n	8002a84 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a08:	d004      	beq.n	8002a14 <HAL_ADC_Init+0x114>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a77      	ldr	r2, [pc, #476]	@ (8002bec <HAL_ADC_Init+0x2ec>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d10f      	bne.n	8002a34 <HAL_ADC_Init+0x134>
 8002a14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a18:	f7ff ff12 	bl	8002840 <LL_ADC_IsEnabled>
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	4873      	ldr	r0, [pc, #460]	@ (8002bec <HAL_ADC_Init+0x2ec>)
 8002a20:	f7ff ff0e 	bl	8002840 <LL_ADC_IsEnabled>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4323      	orrs	r3, r4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf0c      	ite	eq
 8002a2c:	2301      	moveq	r3, #1
 8002a2e:	2300      	movne	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	e012      	b.n	8002a5a <HAL_ADC_Init+0x15a>
 8002a34:	486e      	ldr	r0, [pc, #440]	@ (8002bf0 <HAL_ADC_Init+0x2f0>)
 8002a36:	f7ff ff03 	bl	8002840 <LL_ADC_IsEnabled>
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	486d      	ldr	r0, [pc, #436]	@ (8002bf4 <HAL_ADC_Init+0x2f4>)
 8002a3e:	f7ff feff 	bl	8002840 <LL_ADC_IsEnabled>
 8002a42:	4603      	mov	r3, r0
 8002a44:	431c      	orrs	r4, r3
 8002a46:	486c      	ldr	r0, [pc, #432]	@ (8002bf8 <HAL_ADC_Init+0x2f8>)
 8002a48:	f7ff fefa 	bl	8002840 <LL_ADC_IsEnabled>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4323      	orrs	r3, r4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_Init+0x172>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5f      	ldr	r2, [pc, #380]	@ (8002bec <HAL_ADC_Init+0x2ec>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_Init+0x176>
 8002a72:	4a62      	ldr	r2, [pc, #392]	@ (8002bfc <HAL_ADC_Init+0x2fc>)
 8002a74:	e000      	b.n	8002a78 <HAL_ADC_Init+0x178>
 8002a76:	4a62      	ldr	r2, [pc, #392]	@ (8002c00 <HAL_ADC_Init+0x300>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f7ff fcfa 	bl	8002478 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7f5b      	ldrb	r3, [r3, #29]
 8002a88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002a94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002a9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aa2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d106      	bne.n	8002ac0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	045b      	lsls	r3, r3, #17
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	4b48      	ldr	r3, [pc, #288]	@ (8002c04 <HAL_ADC_Init+0x304>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	69b9      	ldr	r1, [r7, #24]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fee5 	bl	80028da <LL_ADC_INJ_IsConversionOngoing>
 8002b10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d17f      	bne.n	8002c18 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d17c      	bne.n	8002c18 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b3a:	f023 0302 	bic.w	r3, r3, #2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d017      	beq.n	8002b80 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002b5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6911      	ldr	r1, [r2, #16]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b7e:	e013      	b.n	8002ba8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ba4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d12a      	bne.n	8002c08 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bc8:	4311      	orrs	r1, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002bce:	4311      	orrs	r1, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	e019      	b.n	8002c18 <HAL_ADC_Init+0x318>
 8002be4:	2000000c 	.word	0x2000000c
 8002be8:	053e2d63 	.word	0x053e2d63
 8002bec:	50000100 	.word	0x50000100
 8002bf0:	50000400 	.word	0x50000400
 8002bf4:	50000500 	.word	0x50000500
 8002bf8:	50000600 	.word	0x50000600
 8002bfc:	50000300 	.word	0x50000300
 8002c00:	50000700 	.word	0x50000700
 8002c04:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691a      	ldr	r2, [r3, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10c      	bne.n	8002c3a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f023 010f 	bic.w	r1, r3, #15
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	1e5a      	subs	r2, r3, #1
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c38:	e007      	b.n	8002c4a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 020f 	bic.w	r2, r2, #15
 8002c48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c5a:	e007      	b.n	8002c6c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3724      	adds	r7, #36	@ 0x24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	bf00      	nop

08002c78 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c8c:	d004      	beq.n	8002c98 <HAL_ADC_Start_DMA+0x20>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5a      	ldr	r2, [pc, #360]	@ (8002dfc <HAL_ADC_Start_DMA+0x184>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_Start_DMA+0x24>
 8002c98:	4b59      	ldr	r3, [pc, #356]	@ (8002e00 <HAL_ADC_Start_DMA+0x188>)
 8002c9a:	e000      	b.n	8002c9e <HAL_ADC_Start_DMA+0x26>
 8002c9c:	4b59      	ldr	r3, [pc, #356]	@ (8002e04 <HAL_ADC_Start_DMA+0x18c>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fd4a 	bl	8002738 <LL_ADC_GetMultimode>
 8002ca4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fe02 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 809b 	bne.w	8002dee <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Start_DMA+0x4e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e096      	b.n	8002df4 <HAL_ADC_Start_DMA+0x17c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a4d      	ldr	r2, [pc, #308]	@ (8002e08 <HAL_ADC_Start_DMA+0x190>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d008      	beq.n	8002cea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d002      	beq.n	8002cea <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b09      	cmp	r3, #9
 8002ce8:	d17a      	bne.n	8002de0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fcf6 	bl	80036dc <ADC_Enable>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d16d      	bne.n	8002dd6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a3a      	ldr	r2, [pc, #232]	@ (8002dfc <HAL_ADC_Start_DMA+0x184>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d009      	beq.n	8002d2c <HAL_ADC_Start_DMA+0xb4>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e0c <HAL_ADC_Start_DMA+0x194>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d002      	beq.n	8002d28 <HAL_ADC_Start_DMA+0xb0>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	e003      	b.n	8002d30 <HAL_ADC_Start_DMA+0xb8>
 8002d28:	4b39      	ldr	r3, [pc, #228]	@ (8002e10 <HAL_ADC_Start_DMA+0x198>)
 8002d2a:	e001      	b.n	8002d30 <HAL_ADC_Start_DMA+0xb8>
 8002d2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d002      	beq.n	8002d3e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	f023 0206 	bic.w	r2, r3, #6
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d62:	e002      	b.n	8002d6a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6e:	4a29      	ldr	r2, [pc, #164]	@ (8002e14 <HAL_ADC_Start_DMA+0x19c>)
 8002d70:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d76:	4a28      	ldr	r2, [pc, #160]	@ (8002e18 <HAL_ADC_Start_DMA+0x1a0>)
 8002d78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <HAL_ADC_Start_DMA+0x1a4>)
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	221c      	movs	r2, #28
 8002d88:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0210 	orr.w	r2, r2, #16
 8002da0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3340      	adds	r3, #64	@ 0x40
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f001 f989 	bl	80040d8 <HAL_DMA_Start_IT>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fd5c 	bl	800288c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002dd4:	e00d      	b.n	8002df2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002dde:	e008      	b.n	8002df2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002dec:	e001      	b.n	8002df2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
 8002df0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	50000100 	.word	0x50000100
 8002e00:	50000300 	.word	0x50000300
 8002e04:	50000700 	.word	0x50000700
 8002e08:	50000600 	.word	0x50000600
 8002e0c:	50000500 	.word	0x50000500
 8002e10:	50000400 	.word	0x50000400
 8002e14:	080038c7 	.word	0x080038c7
 8002e18:	0800399f 	.word	0x0800399f
 8002e1c:	080039bb 	.word	0x080039bb

08002e20 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b0b6      	sub	sp, #216	@ 0xd8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x24>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	f000 bc13 	b.w	80036a6 <HAL_ADC_ConfigChannel+0x84a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fd11 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f040 83f3 	bne.w	8003680 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f7ff fbcb 	bl	8002642 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fcff 	bl	80028b4 <LL_ADC_REG_IsConversionOngoing>
 8002eb6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fd0b 	bl	80028da <LL_ADC_INJ_IsConversionOngoing>
 8002ec4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ec8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f040 81d9 	bne.w	8003284 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ed2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f040 81d4 	bne.w	8003284 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ee4:	d10f      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f7ff fbd2 	bl	800269a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fb79 	bl	80025f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f04:	e00e      	b.n	8002f24 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f7ff fbc1 	bl	800269a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fb69 	bl	80025f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	08db      	lsrs	r3, r3, #3
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d022      	beq.n	8002f8c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6919      	ldr	r1, [r3, #16]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f56:	f7ff fac3 	bl	80024e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6919      	ldr	r1, [r3, #16]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f7ff fb0f 	bl	800258a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x126>
 8002f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f80:	e000      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x128>
 8002f82:	2300      	movs	r3, #0
 8002f84:	461a      	mov	r2, r3
 8002f86:	f7ff fb1b 	bl	80025c0 <LL_ADC_SetOffsetSaturation>
 8002f8a:	e17b      	b.n	8003284 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fac8 	bl	8002528 <LL_ADC_GetOffsetChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x15c>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fabd 	bl	8002528 <LL_ADC_GetOffsetChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	f003 021f 	and.w	r2, r3, #31
 8002fb6:	e01e      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x19a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fab2 	bl	8002528 <LL_ADC_GetOffsetChannel>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e004      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <HAL_ADC_ConfigChannel+0x1b2>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	e018      	b.n	8003040 <HAL_ADC_ConfigChannel+0x1e4>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800302a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003032:	2320      	movs	r3, #32
 8003034:	e004      	b.n	8003040 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003036:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003040:	429a      	cmp	r2, r3
 8003042:	d106      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2200      	movs	r2, #0
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fa81 	bl	8002554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2101      	movs	r1, #1
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fa65 	bl	8002528 <LL_ADC_GetOffsetChannel>
 800305e:	4603      	mov	r3, r0
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <HAL_ADC_ConfigChannel+0x222>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fa5a 	bl	8002528 <LL_ADC_GetOffsetChannel>
 8003074:	4603      	mov	r3, r0
 8003076:	0e9b      	lsrs	r3, r3, #26
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	e01e      	b.n	80030bc <HAL_ADC_ConfigChannel+0x260>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2101      	movs	r1, #1
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fa4f 	bl	8002528 <LL_ADC_GetOffsetChannel>
 800308a:	4603      	mov	r3, r0
 800308c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800309c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80030a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80030ac:	2320      	movs	r3, #32
 80030ae:	e004      	b.n	80030ba <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80030b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x278>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0e9b      	lsrs	r3, r3, #26
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	e018      	b.n	8003106 <HAL_ADC_ConfigChannel+0x2aa>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80030e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80030f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	e004      	b.n	8003106 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80030fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003100:	fab3 f383 	clz	r3, r3
 8003104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003106:	429a      	cmp	r2, r3
 8003108:	d106      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	2101      	movs	r1, #1
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fa1e 	bl	8002554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2102      	movs	r1, #2
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fa02 	bl	8002528 <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x2e8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2102      	movs	r1, #2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f9f7 	bl	8002528 <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	0e9b      	lsrs	r3, r3, #26
 800313e:	f003 021f 	and.w	r2, r3, #31
 8003142:	e01e      	b.n	8003182 <HAL_ADC_ConfigChannel+0x326>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff f9ec 	bl	8002528 <LL_ADC_GetOffsetChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003162:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003166:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800316a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003172:	2320      	movs	r3, #32
 8003174:	e004      	b.n	8003180 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003176:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <HAL_ADC_ConfigChannel+0x33e>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	e016      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x36c>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80031ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80031b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e004      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80031be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d106      	bne.n	80031da <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2200      	movs	r2, #0
 80031d2:	2102      	movs	r1, #2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff f9bd 	bl	8002554 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2103      	movs	r1, #3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f9a1 	bl	8002528 <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x3aa>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2103      	movs	r1, #3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f996 	bl	8002528 <LL_ADC_GetOffsetChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	0e9b      	lsrs	r3, r3, #26
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	e017      	b.n	8003236 <HAL_ADC_ConfigChannel+0x3da>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2103      	movs	r1, #3
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f98b 	bl	8002528 <LL_ADC_GetOffsetChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800321e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003220:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003222:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e003      	b.n	8003234 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800322c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323e:	2b00      	cmp	r3, #0
 8003240:	d105      	bne.n	800324e <HAL_ADC_ConfigChannel+0x3f2>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	0e9b      	lsrs	r3, r3, #26
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	e011      	b.n	8003272 <HAL_ADC_ConfigChannel+0x416>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003256:	fa93 f3a3 	rbit	r3, r3
 800325a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800325c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800325e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003266:	2320      	movs	r3, #32
 8003268:	e003      	b.n	8003272 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800326a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003272:	429a      	cmp	r2, r3
 8003274:	d106      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	2103      	movs	r1, #3
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff f968 	bl	8002554 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fad9 	bl	8002840 <LL_ADC_IsEnabled>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 813d 	bne.w	8003510 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f7ff fa24 	bl	80026f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4aa2      	ldr	r2, [pc, #648]	@ (8003538 <HAL_ADC_ConfigChannel+0x6dc>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f040 812e 	bne.w	8003510 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x480>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	3301      	adds	r3, #1
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	bf94      	ite	ls
 80032d4:	2301      	movls	r3, #1
 80032d6:	2300      	movhi	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e019      	b.n	8003310 <HAL_ADC_ConfigChannel+0x4b4>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80032ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032ec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80032ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80032f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	2b09      	cmp	r3, #9
 8003308:	bf94      	ite	ls
 800330a:	2301      	movls	r3, #1
 800330c:	2300      	movhi	r3, #0
 800330e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003310:	2b00      	cmp	r3, #0
 8003312:	d079      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800331c:	2b00      	cmp	r3, #0
 800331e:	d107      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x4d4>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	0e9b      	lsrs	r3, r3, #26
 8003326:	3301      	adds	r3, #1
 8003328:	069b      	lsls	r3, r3, #26
 800332a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800332e:	e015      	b.n	800335c <HAL_ADC_ConfigChannel+0x500>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800333e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003340:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003348:	2320      	movs	r3, #32
 800334a:	e003      	b.n	8003354 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	069b      	lsls	r3, r3, #26
 8003358:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <HAL_ADC_ConfigChannel+0x520>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	3301      	adds	r3, #1
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	2101      	movs	r1, #1
 8003376:	fa01 f303 	lsl.w	r3, r1, r3
 800337a:	e017      	b.n	80033ac <HAL_ADC_ConfigChannel+0x550>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800338a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800338c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800338e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e003      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2101      	movs	r1, #1
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	ea42 0103 	orr.w	r1, r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <HAL_ADC_ConfigChannel+0x576>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0e9b      	lsrs	r3, r3, #26
 80033c2:	3301      	adds	r3, #1
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4613      	mov	r3, r2
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4413      	add	r3, r2
 80033ce:	051b      	lsls	r3, r3, #20
 80033d0:	e018      	b.n	8003404 <HAL_ADC_ConfigChannel+0x5a8>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033da:	fa93 f3a3 	rbit	r3, r3
 80033de:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80033e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80033e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80033ea:	2320      	movs	r3, #32
 80033ec:	e003      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80033ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003404:	430b      	orrs	r3, r1
 8003406:	e07e      	b.n	8003506 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x5c8>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	069b      	lsls	r3, r3, #26
 800341e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003422:	e015      	b.n	8003450 <HAL_ADC_ConfigChannel+0x5f4>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003434:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800343c:	2320      	movs	r3, #32
 800343e:	e003      	b.n	8003448 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3301      	adds	r3, #1
 800344a:	069b      	lsls	r3, r3, #26
 800344c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x614>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	3301      	adds	r3, #1
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	e017      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x644>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	61fb      	str	r3, [r7, #28]
  return result;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	e003      	b.n	8003494 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	ea42 0103 	orr.w	r1, r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10d      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x670>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0e9b      	lsrs	r3, r3, #26
 80034b6:	3301      	adds	r3, #1
 80034b8:	f003 021f 	and.w	r2, r3, #31
 80034bc:	4613      	mov	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	4413      	add	r3, r2
 80034c2:	3b1e      	subs	r3, #30
 80034c4:	051b      	lsls	r3, r3, #20
 80034c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034ca:	e01b      	b.n	8003504 <HAL_ADC_ConfigChannel+0x6a8>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	613b      	str	r3, [r7, #16]
  return result;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 021f 	and.w	r2, r3, #31
 80034f6:	4613      	mov	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4413      	add	r3, r2
 80034fc:	3b1e      	subs	r3, #30
 80034fe:	051b      	lsls	r3, r3, #20
 8003500:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003504:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800350a:	4619      	mov	r1, r3
 800350c:	f7ff f8c5 	bl	800269a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b09      	ldr	r3, [pc, #36]	@ (800353c <HAL_ADC_ConfigChannel+0x6e0>)
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80be 	beq.w	800369a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003526:	d004      	beq.n	8003532 <HAL_ADC_ConfigChannel+0x6d6>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a04      	ldr	r2, [pc, #16]	@ (8003540 <HAL_ADC_ConfigChannel+0x6e4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d10a      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x6ec>
 8003532:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <HAL_ADC_ConfigChannel+0x6e8>)
 8003534:	e009      	b.n	800354a <HAL_ADC_ConfigChannel+0x6ee>
 8003536:	bf00      	nop
 8003538:	407f0000 	.word	0x407f0000
 800353c:	80080000 	.word	0x80080000
 8003540:	50000100 	.word	0x50000100
 8003544:	50000300 	.word	0x50000300
 8003548:	4b59      	ldr	r3, [pc, #356]	@ (80036b0 <HAL_ADC_ConfigChannel+0x854>)
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe ffba 	bl	80024c4 <LL_ADC_GetCommonPathInternalCh>
 8003550:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a56      	ldr	r2, [pc, #344]	@ (80036b4 <HAL_ADC_ConfigChannel+0x858>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x70c>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a55      	ldr	r2, [pc, #340]	@ (80036b8 <HAL_ADC_ConfigChannel+0x85c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d13a      	bne.n	80035de <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800356c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d134      	bne.n	80035de <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800357c:	d005      	beq.n	800358a <HAL_ADC_ConfigChannel+0x72e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a4e      	ldr	r2, [pc, #312]	@ (80036bc <HAL_ADC_ConfigChannel+0x860>)
 8003584:	4293      	cmp	r3, r2
 8003586:	f040 8085 	bne.w	8003694 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003592:	d004      	beq.n	800359e <HAL_ADC_ConfigChannel+0x742>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a49      	ldr	r2, [pc, #292]	@ (80036c0 <HAL_ADC_ConfigChannel+0x864>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x746>
 800359e:	4a49      	ldr	r2, [pc, #292]	@ (80036c4 <HAL_ADC_ConfigChannel+0x868>)
 80035a0:	e000      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x748>
 80035a2:	4a43      	ldr	r2, [pc, #268]	@ (80036b0 <HAL_ADC_ConfigChannel+0x854>)
 80035a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f7fe ff75 	bl	800249e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b4:	4b44      	ldr	r3, [pc, #272]	@ (80036c8 <HAL_ADC_ConfigChannel+0x86c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	4a44      	ldr	r2, [pc, #272]	@ (80036cc <HAL_ADC_ConfigChannel+0x870>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035ce:	e002      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035dc:	e05a      	b.n	8003694 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a3b      	ldr	r2, [pc, #236]	@ (80036d0 <HAL_ADC_ConfigChannel+0x874>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d125      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11f      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a31      	ldr	r2, [pc, #196]	@ (80036c0 <HAL_ADC_ConfigChannel+0x864>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d104      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x7ac>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a34      	ldr	r2, [pc, #208]	@ (80036d4 <HAL_ADC_ConfigChannel+0x878>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d047      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003610:	d004      	beq.n	800361c <HAL_ADC_ConfigChannel+0x7c0>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2a      	ldr	r2, [pc, #168]	@ (80036c0 <HAL_ADC_ConfigChannel+0x864>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x7c4>
 800361c:	4a29      	ldr	r2, [pc, #164]	@ (80036c4 <HAL_ADC_ConfigChannel+0x868>)
 800361e:	e000      	b.n	8003622 <HAL_ADC_ConfigChannel+0x7c6>
 8003620:	4a23      	ldr	r2, [pc, #140]	@ (80036b0 <HAL_ADC_ConfigChannel+0x854>)
 8003622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800362a:	4619      	mov	r1, r3
 800362c:	4610      	mov	r0, r2
 800362e:	f7fe ff36 	bl	800249e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003632:	e031      	b.n	8003698 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a27      	ldr	r2, [pc, #156]	@ (80036d8 <HAL_ADC_ConfigChannel+0x87c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d12d      	bne.n	800369a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800363e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d127      	bne.n	800369a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <HAL_ADC_ConfigChannel+0x864>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d022      	beq.n	800369a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800365c:	d004      	beq.n	8003668 <HAL_ADC_ConfigChannel+0x80c>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a17      	ldr	r2, [pc, #92]	@ (80036c0 <HAL_ADC_ConfigChannel+0x864>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x810>
 8003668:	4a16      	ldr	r2, [pc, #88]	@ (80036c4 <HAL_ADC_ConfigChannel+0x868>)
 800366a:	e000      	b.n	800366e <HAL_ADC_ConfigChannel+0x812>
 800366c:	4a10      	ldr	r2, [pc, #64]	@ (80036b0 <HAL_ADC_ConfigChannel+0x854>)
 800366e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003672:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f7fe ff10 	bl	800249e <LL_ADC_SetCommonPathInternalCh>
 800367e:	e00c      	b.n	800369a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003692:	e002      	b.n	800369a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003698:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	37d8      	adds	r7, #216	@ 0xd8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	50000700 	.word	0x50000700
 80036b4:	c3210000 	.word	0xc3210000
 80036b8:	90c00010 	.word	0x90c00010
 80036bc:	50000600 	.word	0x50000600
 80036c0:	50000100 	.word	0x50000100
 80036c4:	50000300 	.word	0x50000300
 80036c8:	2000000c 	.word	0x2000000c
 80036cc:	053e2d63 	.word	0x053e2d63
 80036d0:	c7520000 	.word	0xc7520000
 80036d4:	50000500 	.word	0x50000500
 80036d8:	cb840000 	.word	0xcb840000

080036dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f8a7 	bl	8002840 <LL_ADC_IsEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d176      	bne.n	80037e6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	4b3c      	ldr	r3, [pc, #240]	@ (80037f0 <ADC_Enable+0x114>)
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370a:	f043 0210 	orr.w	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e062      	b.n	80037e8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff f862 	bl	80027f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003734:	d004      	beq.n	8003740 <ADC_Enable+0x64>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2e      	ldr	r2, [pc, #184]	@ (80037f4 <ADC_Enable+0x118>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <ADC_Enable+0x68>
 8003740:	4b2d      	ldr	r3, [pc, #180]	@ (80037f8 <ADC_Enable+0x11c>)
 8003742:	e000      	b.n	8003746 <ADC_Enable+0x6a>
 8003744:	4b2d      	ldr	r3, [pc, #180]	@ (80037fc <ADC_Enable+0x120>)
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe febc 	bl	80024c4 <LL_ADC_GetCommonPathInternalCh>
 800374c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800374e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003752:	2b00      	cmp	r3, #0
 8003754:	d013      	beq.n	800377e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003756:	4b2a      	ldr	r3, [pc, #168]	@ (8003800 <ADC_Enable+0x124>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	099b      	lsrs	r3, r3, #6
 800375c:	4a29      	ldr	r2, [pc, #164]	@ (8003804 <ADC_Enable+0x128>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003770:	e002      	b.n	8003778 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	3b01      	subs	r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f9      	bne.n	8003772 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800377e:	f7fe fe6f 	bl	8002460 <HAL_GetTick>
 8003782:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003784:	e028      	b.n	80037d8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff f858 	bl	8002840 <LL_ADC_IsEnabled>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff f828 	bl	80027f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037a0:	f7fe fe5e 	bl	8002460 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d914      	bls.n	80037d8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d00d      	beq.n	80037d8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c0:	f043 0210 	orr.w	r2, r3, #16
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e007      	b.n	80037e8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d1cf      	bne.n	8003786 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	8000003f 	.word	0x8000003f
 80037f4:	50000100 	.word	0x50000100
 80037f8:	50000300 	.word	0x50000300
 80037fc:	50000700 	.word	0x50000700
 8003800:	2000000c 	.word	0x2000000c
 8003804:	053e2d63 	.word	0x053e2d63

08003808 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f826 	bl	8002866 <LL_ADC_IsDisableOngoing>
 800381a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f80d 	bl	8002840 <LL_ADC_IsEnabled>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d047      	beq.n	80038bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d144      	bne.n	80038bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030d 	and.w	r3, r3, #13
 800383c:	2b01      	cmp	r3, #1
 800383e:	d10c      	bne.n	800385a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fe ffe7 	bl	8002818 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2203      	movs	r2, #3
 8003850:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003852:	f7fe fe05 	bl	8002460 <HAL_GetTick>
 8003856:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003858:	e029      	b.n	80038ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385e:	f043 0210 	orr.w	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e023      	b.n	80038be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003876:	f7fe fdf3 	bl	8002460 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d914      	bls.n	80038ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	f043 0210 	orr.w	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f043 0201 	orr.w	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e007      	b.n	80038be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1dc      	bne.n	8003876 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d14b      	bne.n	8003978 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d021      	beq.n	800393e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fe8c 	bl	800261c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d032      	beq.n	8003970 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d12b      	bne.n	8003970 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d11f      	bne.n	8003970 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003934:	f043 0201 	orr.w	r2, r3, #1
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800393c:	e018      	b.n	8003970 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800395c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff fa55 	bl	8002e20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003976:	e00e      	b.n	8003996 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fa5f 	bl	8002e48 <HAL_ADC_ErrorCallback>
}
 800398a:	e004      	b.n	8003996 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fa41 	bl	8002e34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d8:	f043 0204 	orr.w	r2, r3, #4
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f7ff fa31 	bl	8002e48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <LL_ADC_IsEnabled>:
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <LL_ADC_IsEnabled+0x18>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <LL_ADC_IsEnabled+0x1a>
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_ADC_StartCalibration>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003a26:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a5a:	d101      	bne.n	8003a60 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d101      	bne.n	8003a86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_ADCEx_Calibration_Start+0x1c>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e04d      	b.n	8003b4c <HAL_ADCEx_Calibration_Start+0xb8>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fea5 	bl	8003808 <ADC_Disable>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d136      	bne.n	8003b36 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003acc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ad0:	f023 0302 	bic.w	r3, r3, #2
 8003ad4:	f043 0202 	orr.w	r2, r3, #2
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6839      	ldr	r1, [r7, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff ff96 	bl	8003a14 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ae8:	e014      	b.n	8003b14 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4a18      	ldr	r2, [pc, #96]	@ (8003b54 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d90d      	bls.n	8003b14 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	f023 0312 	bic.w	r3, r3, #18
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e01b      	b.n	8003b4c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff94 	bl	8003a46 <LL_ADC_IsCalibrationOnGoing>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e2      	bne.n	8003aea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b28:	f023 0303 	bic.w	r3, r3, #3
 8003b2c:	f043 0201 	orr.w	r2, r3, #1
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b34:	e005      	b.n	8003b42 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3a:	f043 0210 	orr.w	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	0004de01 	.word	0x0004de01

08003b58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b0a1      	sub	sp, #132	@ 0x84
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e0e7      	b.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003b82:	2300      	movs	r3, #0
 8003b84:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b8e:	d102      	bne.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b90:	4b6f      	ldr	r3, [pc, #444]	@ (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	e009      	b.n	8003baa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d102      	bne.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	e001      	b.n	8003baa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0be      	b.n	8003d46 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff ff4f 	bl	8003a6e <LL_ADC_REG_IsConversionOngoing>
 8003bd0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff ff49 	bl	8003a6e <LL_ADC_REG_IsConversionOngoing>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 80a0 	bne.w	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003be4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 809c 	bne.w	8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bf4:	d004      	beq.n	8003c00 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a55      	ldr	r2, [pc, #340]	@ (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003c00:	4b56      	ldr	r3, [pc, #344]	@ (8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003c02:	e000      	b.n	8003c06 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003c04:	4b56      	ldr	r3, [pc, #344]	@ (8003d60 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003c06:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d04b      	beq.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c22:	035b      	lsls	r3, r3, #13
 8003c24:	430b      	orrs	r3, r1
 8003c26:	431a      	orrs	r2, r3
 8003c28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c34:	d004      	beq.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a45      	ldr	r2, [pc, #276]	@ (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d10f      	bne.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003c40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003c44:	f7ff fed3 	bl	80039ee <LL_ADC_IsEnabled>
 8003c48:	4604      	mov	r4, r0
 8003c4a:	4841      	ldr	r0, [pc, #260]	@ (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c4c:	f7ff fecf 	bl	80039ee <LL_ADC_IsEnabled>
 8003c50:	4603      	mov	r3, r0
 8003c52:	4323      	orrs	r3, r4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	e012      	b.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003c60:	483c      	ldr	r0, [pc, #240]	@ (8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c62:	f7ff fec4 	bl	80039ee <LL_ADC_IsEnabled>
 8003c66:	4604      	mov	r4, r0
 8003c68:	483b      	ldr	r0, [pc, #236]	@ (8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c6a:	f7ff fec0 	bl	80039ee <LL_ADC_IsEnabled>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	431c      	orrs	r4, r3
 8003c72:	483c      	ldr	r0, [pc, #240]	@ (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c74:	f7ff febb 	bl	80039ee <LL_ADC_IsEnabled>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4323      	orrs	r3, r4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d056      	beq.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c92:	f023 030f 	bic.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	6811      	ldr	r1, [r2, #0]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	6892      	ldr	r2, [r2, #8]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ca4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ca6:	e047      	b.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cbc:	d004      	beq.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a23      	ldr	r2, [pc, #140]	@ (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10f      	bne.n	8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003cc8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003ccc:	f7ff fe8f 	bl	80039ee <LL_ADC_IsEnabled>
 8003cd0:	4604      	mov	r4, r0
 8003cd2:	481f      	ldr	r0, [pc, #124]	@ (8003d50 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003cd4:	f7ff fe8b 	bl	80039ee <LL_ADC_IsEnabled>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4323      	orrs	r3, r4
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf0c      	ite	eq
 8003ce0:	2301      	moveq	r3, #1
 8003ce2:	2300      	movne	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e012      	b.n	8003d0e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003ce8:	481a      	ldr	r0, [pc, #104]	@ (8003d54 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003cea:	f7ff fe80 	bl	80039ee <LL_ADC_IsEnabled>
 8003cee:	4604      	mov	r4, r0
 8003cf0:	4819      	ldr	r0, [pc, #100]	@ (8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003cf2:	f7ff fe7c 	bl	80039ee <LL_ADC_IsEnabled>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	431c      	orrs	r4, r3
 8003cfa:	481a      	ldr	r0, [pc, #104]	@ (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003cfc:	f7ff fe77 	bl	80039ee <LL_ADC_IsEnabled>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4323      	orrs	r3, r4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d012      	beq.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d1a:	f023 030f 	bic.w	r3, r3, #15
 8003d1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d20:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d22:	e009      	b.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d28:	f043 0220 	orr.w	r2, r3, #32
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003d36:	e000      	b.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3784      	adds	r7, #132	@ 0x84
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd90      	pop	{r4, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	50000100 	.word	0x50000100
 8003d54:	50000400 	.word	0x50000400
 8003d58:	50000500 	.word	0x50000500
 8003d5c:	50000300 	.word	0x50000300
 8003d60:	50000700 	.word	0x50000700
 8003d64:	50000600 	.word	0x50000600

08003d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d78:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d84:	4013      	ands	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	@ (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	60d3      	str	r3, [r2, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 0307 	and.w	r3, r3, #7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db0b      	blt.n	8003df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	f003 021f 	and.w	r2, r3, #31
 8003de4:	4907      	ldr	r1, [pc, #28]	@ (8003e04 <__NVIC_EnableIRQ+0x38>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2001      	movs	r0, #1
 8003dee:	fa00 f202 	lsl.w	r2, r0, r2
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000e100 	.word	0xe000e100

08003e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db0a      	blt.n	8003e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	490c      	ldr	r1, [pc, #48]	@ (8003e54 <__NVIC_SetPriority+0x4c>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	0112      	lsls	r2, r2, #4
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e30:	e00a      	b.n	8003e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4908      	ldr	r1, [pc, #32]	@ (8003e58 <__NVIC_SetPriority+0x50>)
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3b04      	subs	r3, #4
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	440b      	add	r3, r1
 8003e46:	761a      	strb	r2, [r3, #24]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100
 8003e58:	e000ed00 	.word	0xe000ed00

08003e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	@ 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f1c3 0307 	rsb	r3, r3, #7
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf28      	it	cs
 8003e7a:	2304      	movcs	r3, #4
 8003e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d902      	bls.n	8003e8c <NVIC_EncodePriority+0x30>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3b03      	subs	r3, #3
 8003e8a:	e000      	b.n	8003e8e <NVIC_EncodePriority+0x32>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	43d9      	mvns	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	4313      	orrs	r3, r2
         );
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	@ 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ed4:	d301      	bcc.n	8003eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e00f      	b.n	8003efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eda:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <SysTick_Config+0x40>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	f7ff ff8e 	bl	8003e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <SysTick_Config+0x40>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef2:	4b04      	ldr	r3, [pc, #16]	@ (8003f04 <SysTick_Config+0x40>)
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000e010 	.word	0xe000e010

08003f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff29 	bl	8003d68 <__NVIC_SetPriorityGrouping>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2c:	f7ff ff40 	bl	8003db0 <__NVIC_GetPriorityGrouping>
 8003f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff90 	bl	8003e5c <NVIC_EncodePriority>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff5f 	bl	8003e08 <__NVIC_SetPriority>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff33 	bl	8003dcc <__NVIC_EnableIRQ>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffa4 	bl	8003ec4 <SysTick_Config>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e08d      	b.n	80040b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b47      	ldr	r3, [pc, #284]	@ (80040c0 <HAL_DMA_Init+0x138>)
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d80f      	bhi.n	8003fc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <HAL_DMA_Init+0x13c>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a45      	ldr	r2, [pc, #276]	@ (80040c8 <HAL_DMA_Init+0x140>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	009a      	lsls	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a42      	ldr	r2, [pc, #264]	@ (80040cc <HAL_DMA_Init+0x144>)
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fc4:	e00e      	b.n	8003fe4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b40      	ldr	r3, [pc, #256]	@ (80040d0 <HAL_DMA_Init+0x148>)
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a3d      	ldr	r2, [pc, #244]	@ (80040c8 <HAL_DMA_Init+0x140>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	009a      	lsls	r2, r3, #2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80040d4 <HAL_DMA_Init+0x14c>)
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa76 	bl	8004528 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004044:	d102      	bne.n	800404c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004060:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d010      	beq.n	800408c <HAL_DMA_Init+0x104>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b04      	cmp	r3, #4
 8004070:	d80c      	bhi.n	800408c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fa96 	bl	80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	e008      	b.n	800409e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40020407 	.word	0x40020407
 80040c4:	bffdfff8 	.word	0xbffdfff8
 80040c8:	cccccccd 	.word	0xcccccccd
 80040cc:	40020000 	.word	0x40020000
 80040d0:	bffdfbf8 	.word	0xbffdfbf8
 80040d4:	40020400 	.word	0x40020400

080040d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
 80040e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040e6:	2300      	movs	r3, #0
 80040e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_DMA_Start_IT+0x20>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e066      	b.n	80041c6 <HAL_DMA_Start_IT+0xee>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	d155      	bne.n	80041b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0201 	bic.w	r2, r2, #1
 8004128:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f9bb 	bl	80044ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 020e 	orr.w	r2, r2, #14
 800414c:	601a      	str	r2, [r3, #0]
 800414e:	e00f      	b.n	8004170 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 020a 	orr.w	r2, r2, #10
 800416e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800418c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004192:	2b00      	cmp	r3, #0
 8004194:	d007      	beq.n	80041a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0201 	orr.w	r2, r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e005      	b.n	80041c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
 80041c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d005      	beq.n	80041f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2204      	movs	r2, #4
 80041ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e037      	b.n	8004262 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 020e 	bic.w	r2, r2, #14
 8004200:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004210:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f003 021f 	and.w	r2, r3, #31
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800423e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00c      	beq.n	8004262 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004252:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004256:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004260:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d00d      	beq.n	80042b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2204      	movs	r2, #4
 800429c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
 80042b2:	e047      	b.n	8004344 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 020e 	bic.w	r2, r2, #14
 80042c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e8:	f003 021f 	and.w	r2, r3, #31
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004300:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004314:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004318:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004322:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
    }
  }
  return status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2204      	movs	r2, #4
 8004370:	409a      	lsls	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d026      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x7a>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d021      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d107      	bne.n	80043a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0204 	bic.w	r2, r2, #4
 80043a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a6:	f003 021f 	and.w	r2, r3, #31
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	2104      	movs	r1, #4
 80043b0:	fa01 f202 	lsl.w	r2, r1, r2
 80043b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d071      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80043c6:	e06c      	b.n	80044a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2202      	movs	r2, #2
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02e      	beq.n	800443a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d029      	beq.n	800443a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10b      	bne.n	800440c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 020a 	bic.w	r2, r2, #10
 8004402:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	f003 021f 	and.w	r2, r3, #31
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	2102      	movs	r1, #2
 800441a:	fa01 f202 	lsl.w	r2, r1, r2
 800441e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d038      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004438:	e033      	b.n	80044a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	2208      	movs	r2, #8
 8004444:	409a      	lsls	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4013      	ands	r3, r2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d02a      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d025      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 020e 	bic.w	r2, r2, #14
 8004466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446c:	f003 021f 	and.w	r2, r3, #31
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
}
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80044d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	f003 021f 	and.w	r2, r3, #31
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	2101      	movs	r1, #1
 80044e4:	fa01 f202 	lsl.w	r2, r1, r2
 80044e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d108      	bne.n	800450c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800450a:	e007      	b.n	800451c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	4b16      	ldr	r3, [pc, #88]	@ (8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004538:	429a      	cmp	r2, r3
 800453a:	d802      	bhi.n	8004542 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800453c:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	e001      	b.n	8004546 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004542:	4b15      	ldr	r3, [pc, #84]	@ (8004598 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004544:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3b08      	subs	r3, #8
 8004552:	4a12      	ldr	r2, [pc, #72]	@ (800459c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	461a      	mov	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a0b      	ldr	r2, [pc, #44]	@ (80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004572:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2201      	movs	r2, #1
 800457c:	409a      	lsls	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40020407 	.word	0x40020407
 8004594:	40020800 	.word	0x40020800
 8004598:	40020820 	.word	0x40020820
 800459c:	cccccccd 	.word	0xcccccccd
 80045a0:	40020880 	.word	0x40020880

080045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a08      	ldr	r2, [pc, #32]	@ (80045e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2201      	movs	r2, #1
 80045d2:	409a      	lsls	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	1000823f 	.word	0x1000823f
 80045e8:	40020940 	.word	0x40020940

080045ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045fa:	e15a      	b.n	80048b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	4013      	ands	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 814c 	beq.w	80048ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d005      	beq.n	800462c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004628:	2b02      	cmp	r3, #2
 800462a:	d130      	bne.n	800468e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	2203      	movs	r2, #3
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	43db      	mvns	r3, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004662:	2201      	movs	r2, #1
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	fa02 f303 	lsl.w	r3, r2, r3
 800466a:	43db      	mvns	r3, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0201 	and.w	r2, r3, #1
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d017      	beq.n	80046ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	2203      	movs	r2, #3
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d123      	bne.n	800471e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	08da      	lsrs	r2, r3, #3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3208      	adds	r2, #8
 80046de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	220f      	movs	r2, #15
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	08da      	lsrs	r2, r3, #3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3208      	adds	r2, #8
 8004718:	6939      	ldr	r1, [r7, #16]
 800471a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	2203      	movs	r2, #3
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43db      	mvns	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f003 0203 	and.w	r2, r3, #3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80a6 	beq.w	80048ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004760:	4b5b      	ldr	r3, [pc, #364]	@ (80048d0 <HAL_GPIO_Init+0x2e4>)
 8004762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004764:	4a5a      	ldr	r2, [pc, #360]	@ (80048d0 <HAL_GPIO_Init+0x2e4>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6613      	str	r3, [r2, #96]	@ 0x60
 800476c:	4b58      	ldr	r3, [pc, #352]	@ (80048d0 <HAL_GPIO_Init+0x2e4>)
 800476e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004778:	4a56      	ldr	r2, [pc, #344]	@ (80048d4 <HAL_GPIO_Init+0x2e8>)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	089b      	lsrs	r3, r3, #2
 800477e:	3302      	adds	r3, #2
 8004780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	220f      	movs	r2, #15
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80047a2:	d01f      	beq.n	80047e4 <HAL_GPIO_Init+0x1f8>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a4c      	ldr	r2, [pc, #304]	@ (80048d8 <HAL_GPIO_Init+0x2ec>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d019      	beq.n	80047e0 <HAL_GPIO_Init+0x1f4>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a4b      	ldr	r2, [pc, #300]	@ (80048dc <HAL_GPIO_Init+0x2f0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_GPIO_Init+0x1f0>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a4a      	ldr	r2, [pc, #296]	@ (80048e0 <HAL_GPIO_Init+0x2f4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00d      	beq.n	80047d8 <HAL_GPIO_Init+0x1ec>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a49      	ldr	r2, [pc, #292]	@ (80048e4 <HAL_GPIO_Init+0x2f8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <HAL_GPIO_Init+0x1e8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a48      	ldr	r2, [pc, #288]	@ (80048e8 <HAL_GPIO_Init+0x2fc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_GPIO_Init+0x1e4>
 80047cc:	2305      	movs	r3, #5
 80047ce:	e00a      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047d0:	2306      	movs	r3, #6
 80047d2:	e008      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047d4:	2304      	movs	r3, #4
 80047d6:	e006      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047d8:	2303      	movs	r3, #3
 80047da:	e004      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047dc:	2302      	movs	r3, #2
 80047de:	e002      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_GPIO_Init+0x1fa>
 80047e4:	2300      	movs	r3, #0
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	f002 0203 	and.w	r2, r2, #3
 80047ec:	0092      	lsls	r2, r2, #2
 80047ee:	4093      	lsls	r3, r2
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f6:	4937      	ldr	r1, [pc, #220]	@ (80048d4 <HAL_GPIO_Init+0x2e8>)
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	089b      	lsrs	r3, r3, #2
 80047fc:	3302      	adds	r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004804:	4b39      	ldr	r3, [pc, #228]	@ (80048ec <HAL_GPIO_Init+0x300>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	43db      	mvns	r3, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004828:	4a30      	ldr	r2, [pc, #192]	@ (80048ec <HAL_GPIO_Init+0x300>)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800482e:	4b2f      	ldr	r3, [pc, #188]	@ (80048ec <HAL_GPIO_Init+0x300>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43db      	mvns	r3, r3
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4013      	ands	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004852:	4a26      	ldr	r2, [pc, #152]	@ (80048ec <HAL_GPIO_Init+0x300>)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004858:	4b24      	ldr	r3, [pc, #144]	@ (80048ec <HAL_GPIO_Init+0x300>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	43db      	mvns	r3, r3
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800487c:	4a1b      	ldr	r2, [pc, #108]	@ (80048ec <HAL_GPIO_Init+0x300>)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004882:	4b1a      	ldr	r3, [pc, #104]	@ (80048ec <HAL_GPIO_Init+0x300>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	43db      	mvns	r3, r3
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4013      	ands	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048a6:	4a11      	ldr	r2, [pc, #68]	@ (80048ec <HAL_GPIO_Init+0x300>)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3301      	adds	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f ae9d 	bne.w	80045fc <HAL_GPIO_Init+0x10>
  }
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	371c      	adds	r7, #28
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40010000 	.word	0x40010000
 80048d8:	48000400 	.word	0x48000400
 80048dc:	48000800 	.word	0x48000800
 80048e0:	48000c00 	.word	0x48000c00
 80048e4:	48001000 	.word	0x48001000
 80048e8:	48001400 	.word	0x48001400
 80048ec:	40010400 	.word	0x40010400

080048f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
 80048fc:	4613      	mov	r3, r2
 80048fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004900:	787b      	ldrb	r3, [r7, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800490c:	e002      	b.n	8004914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004932:	887a      	ldrh	r2, [r7, #2]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4013      	ands	r3, r2
 8004938:	041a      	lsls	r2, r3, #16
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	43d9      	mvns	r1, r3
 800493e:	887b      	ldrh	r3, [r7, #2]
 8004940:	400b      	ands	r3, r1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	619a      	str	r2, [r3, #24]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800495e:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800496a:	4a05      	ldr	r2, [pc, #20]	@ (8004980 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800496c:	88fb      	ldrh	r3, [r7, #6]
 800496e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd fa72 	bl	8001e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004978:	bf00      	nop
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40010400 	.word	0x40010400

08004984 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d141      	bne.n	8004a16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004992:	4b4b      	ldr	r3, [pc, #300]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800499e:	d131      	bne.n	8004a04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a0:	4b47      	ldr	r3, [pc, #284]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a6:	4a46      	ldr	r2, [pc, #280]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049b0:	4b43      	ldr	r3, [pc, #268]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049b8:	4a41      	ldr	r2, [pc, #260]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049c0:	4b40      	ldr	r3, [pc, #256]	@ (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2232      	movs	r2, #50	@ 0x32
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	4a3f      	ldr	r2, [pc, #252]	@ (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	0c9b      	lsrs	r3, r3, #18
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049d6:	e002      	b.n	80049de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3b01      	subs	r3, #1
 80049dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049de:	4b38      	ldr	r3, [pc, #224]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049ea:	d102      	bne.n	80049f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f2      	bne.n	80049d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049f2:	4b33      	ldr	r3, [pc, #204]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049fe:	d158      	bne.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e057      	b.n	8004ab4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a04:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004a14:	e04d      	b.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a1c:	d141      	bne.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a1e:	4b28      	ldr	r3, [pc, #160]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2a:	d131      	bne.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a2c:	4b24      	ldr	r3, [pc, #144]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a32:	4a23      	ldr	r2, [pc, #140]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a3c:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a44:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2232      	movs	r2, #50	@ 0x32
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	0c9b      	lsrs	r3, r3, #18
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a62:	e002      	b.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6a:	4b15      	ldr	r3, [pc, #84]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a76:	d102      	bne.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f2      	bne.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8a:	d112      	bne.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e011      	b.n	8004ab4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a96:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004aa0:	e007      	b.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004aa2:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aaa:	4a05      	ldr	r2, [pc, #20]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ab0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	2000000c 	.word	0x2000000c
 8004ac8:	431bde83 	.word	0x431bde83

08004acc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ada:	6093      	str	r3, [r2, #8]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40007000 	.word	0x40007000

08004aec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e2fe      	b.n	80050fc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d075      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b0a:	4b97      	ldr	r3, [pc, #604]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b14:	4b94      	ldr	r3, [pc, #592]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b0c      	cmp	r3, #12
 8004b22:	d102      	bne.n	8004b2a <HAL_RCC_OscConfig+0x3e>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d002      	beq.n	8004b30 <HAL_RCC_OscConfig+0x44>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d10b      	bne.n	8004b48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b30:	4b8d      	ldr	r3, [pc, #564]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d05b      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x108>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d157      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e2d9      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b50:	d106      	bne.n	8004b60 <HAL_RCC_OscConfig+0x74>
 8004b52:	4b85      	ldr	r3, [pc, #532]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a84      	ldr	r2, [pc, #528]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e01d      	b.n	8004b9c <HAL_RCC_OscConfig+0xb0>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x98>
 8004b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	4b7c      	ldr	r3, [pc, #496]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a7b      	ldr	r2, [pc, #492]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e00b      	b.n	8004b9c <HAL_RCC_OscConfig+0xb0>
 8004b84:	4b78      	ldr	r3, [pc, #480]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a77      	ldr	r2, [pc, #476]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b75      	ldr	r3, [pc, #468]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a74      	ldr	r2, [pc, #464]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d013      	beq.n	8004bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fc5c 	bl	8002460 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fd fc58 	bl	8002460 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	@ 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e29e      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0xc0>
 8004bca:	e014      	b.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fc48 	bl	8002460 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd4:	f7fd fc44 	bl	8002460 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b64      	cmp	r3, #100	@ 0x64
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e28a      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004be6:	4b60      	ldr	r3, [pc, #384]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0xe8>
 8004bf2:	e000      	b.n	8004bf6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d075      	beq.n	8004cee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c02:	4b59      	ldr	r3, [pc, #356]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c0c:	4b56      	ldr	r3, [pc, #344]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b0c      	cmp	r3, #12
 8004c1a:	d102      	bne.n	8004c22 <HAL_RCC_OscConfig+0x136>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d002      	beq.n	8004c28 <HAL_RCC_OscConfig+0x13c>
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d11f      	bne.n	8004c68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c28:	4b4f      	ldr	r3, [pc, #316]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_OscConfig+0x154>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e25d      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c40:	4b49      	ldr	r3, [pc, #292]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	061b      	lsls	r3, r3, #24
 8004c4e:	4946      	ldr	r1, [pc, #280]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c54:	4b45      	ldr	r3, [pc, #276]	@ (8004d6c <HAL_RCC_OscConfig+0x280>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fd fbb5 	bl	80023c8 <HAL_InitTick>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d043      	beq.n	8004cec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e249      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d023      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c70:	4b3d      	ldr	r3, [pc, #244]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3c      	ldr	r2, [pc, #240]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fd fbf0 	bl	8002460 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c84:	f7fd fbec 	bl	8002460 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e232      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c96:	4b34      	ldr	r3, [pc, #208]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca2:	4b31      	ldr	r3, [pc, #196]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	061b      	lsls	r3, r3, #24
 8004cb0:	492d      	ldr	r1, [pc, #180]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]
 8004cb6:	e01a      	b.n	8004cee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004cbe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fbcc 	bl	8002460 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ccc:	f7fd fbc8 	bl	8002460 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e20e      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cde:	4b22      	ldr	r3, [pc, #136]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x1e0>
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d041      	beq.n	8004d7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01c      	beq.n	8004d3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d02:	4b19      	ldr	r3, [pc, #100]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d08:	4a17      	ldr	r2, [pc, #92]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d12:	f7fd fba5 	bl	8002460 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1a:	f7fd fba1 	bl	8002460 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1e7      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0ef      	beq.n	8004d1a <HAL_RCC_OscConfig+0x22e>
 8004d3a:	e020      	b.n	8004d7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d42:	4a09      	ldr	r2, [pc, #36]	@ (8004d68 <HAL_RCC_OscConfig+0x27c>)
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fd fb88 	bl	8002460 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d52:	e00d      	b.n	8004d70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d54:	f7fd fb84 	bl	8002460 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d906      	bls.n	8004d70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1ca      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d70:	4b8c      	ldr	r3, [pc, #560]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1ea      	bne.n	8004d54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 80a6 	beq.w	8004ed8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d90:	4b84      	ldr	r3, [pc, #528]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_OscConfig+0x2b4>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x2b6>
 8004da0:	2300      	movs	r3, #0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	4b7f      	ldr	r3, [pc, #508]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004daa:	4a7e      	ldr	r2, [pc, #504]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004db2:	4b7c      	ldr	r3, [pc, #496]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc2:	4b79      	ldr	r3, [pc, #484]	@ (8004fa8 <HAL_RCC_OscConfig+0x4bc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d118      	bne.n	8004e00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dce:	4b76      	ldr	r3, [pc, #472]	@ (8004fa8 <HAL_RCC_OscConfig+0x4bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a75      	ldr	r2, [pc, #468]	@ (8004fa8 <HAL_RCC_OscConfig+0x4bc>)
 8004dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dda:	f7fd fb41 	bl	8002460 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de2:	f7fd fb3d 	bl	8002460 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e183      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df4:	4b6c      	ldr	r3, [pc, #432]	@ (8004fa8 <HAL_RCC_OscConfig+0x4bc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d108      	bne.n	8004e1a <HAL_RCC_OscConfig+0x32e>
 8004e08:	4b66      	ldr	r3, [pc, #408]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e0e:	4a65      	ldr	r2, [pc, #404]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e18:	e024      	b.n	8004e64 <HAL_RCC_OscConfig+0x378>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b05      	cmp	r3, #5
 8004e20:	d110      	bne.n	8004e44 <HAL_RCC_OscConfig+0x358>
 8004e22:	4b60      	ldr	r3, [pc, #384]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e28:	4a5e      	ldr	r2, [pc, #376]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e2a:	f043 0304 	orr.w	r3, r3, #4
 8004e2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e32:	4b5c      	ldr	r3, [pc, #368]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e38:	4a5a      	ldr	r2, [pc, #360]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e42:	e00f      	b.n	8004e64 <HAL_RCC_OscConfig+0x378>
 8004e44:	4b57      	ldr	r3, [pc, #348]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4a:	4a56      	ldr	r2, [pc, #344]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e54:	4b53      	ldr	r3, [pc, #332]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	4a52      	ldr	r2, [pc, #328]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e5c:	f023 0304 	bic.w	r3, r3, #4
 8004e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d016      	beq.n	8004e9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6c:	f7fd faf8 	bl	8002460 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e74:	f7fd faf4 	bl	8002460 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e138      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8a:	4b46      	ldr	r3, [pc, #280]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ed      	beq.n	8004e74 <HAL_RCC_OscConfig+0x388>
 8004e98:	e015      	b.n	8004ec6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e9a:	f7fd fae1 	bl	8002460 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea2:	f7fd fadd 	bl	8002460 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e121      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1ed      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ec6:	7ffb      	ldrb	r3, [r7, #31]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d105      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ecc:	4b35      	ldr	r3, [pc, #212]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	4a34      	ldr	r2, [pc, #208]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d03c      	beq.n	8004f5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01c      	beq.n	8004f26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004eec:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef2:	4a2c      	ldr	r2, [pc, #176]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fd fab0 	bl	8002460 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f04:	f7fd faac 	bl	8002460 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e0f2      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f16:	4b23      	ldr	r3, [pc, #140]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ef      	beq.n	8004f04 <HAL_RCC_OscConfig+0x418>
 8004f24:	e01b      	b.n	8004f5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f26:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f36:	f7fd fa93 	bl	8002460 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f3e:	f7fd fa8f 	bl	8002460 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e0d5      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f50:	4b14      	ldr	r3, [pc, #80]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1ef      	bne.n	8004f3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80c9 	beq.w	80050fa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f68:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b0c      	cmp	r3, #12
 8004f72:	f000 8083 	beq.w	800507c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d15e      	bne.n	800503c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a08      	ldr	r2, [pc, #32]	@ (8004fa4 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fd fa69 	bl	8002460 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f90:	e00c      	b.n	8004fac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fd fa65 	bl	8002460 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d905      	bls.n	8004fac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e0ab      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fac:	4b55      	ldr	r3, [pc, #340]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ec      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb8:	4b52      	ldr	r3, [pc, #328]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	4b52      	ldr	r3, [pc, #328]	@ (8005108 <HAL_RCC_OscConfig+0x61c>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6a11      	ldr	r1, [r2, #32]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004fc8:	3a01      	subs	r2, #1
 8004fca:	0112      	lsls	r2, r2, #4
 8004fcc:	4311      	orrs	r1, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004fd2:	0212      	lsls	r2, r2, #8
 8004fd4:	4311      	orrs	r1, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fda:	0852      	lsrs	r2, r2, #1
 8004fdc:	3a01      	subs	r2, #1
 8004fde:	0552      	lsls	r2, r2, #21
 8004fe0:	4311      	orrs	r1, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fe6:	0852      	lsrs	r2, r2, #1
 8004fe8:	3a01      	subs	r2, #1
 8004fea:	0652      	lsls	r2, r2, #25
 8004fec:	4311      	orrs	r1, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ff2:	06d2      	lsls	r2, r2, #27
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	4943      	ldr	r1, [pc, #268]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ffc:	4b41      	ldr	r3, [pc, #260]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a40      	ldr	r2, [pc, #256]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8005002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005006:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005008:	4b3e      	ldr	r3, [pc, #248]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	4a3d      	ldr	r2, [pc, #244]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 800500e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005012:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fd fa24 	bl	8002460 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501c:	f7fd fa20 	bl	8002460 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e066      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502e:	4b35      	ldr	r3, [pc, #212]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x530>
 800503a:	e05e      	b.n	80050fa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503c:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a30      	ldr	r2, [pc, #192]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8005042:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fd fa0a 	bl	8002460 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005050:	f7fd fa06 	bl	8002460 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e04c      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005062:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800506e:	4b25      	ldr	r3, [pc, #148]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	4924      	ldr	r1, [pc, #144]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 8005074:	4b25      	ldr	r3, [pc, #148]	@ (800510c <HAL_RCC_OscConfig+0x620>)
 8005076:	4013      	ands	r3, r2
 8005078:	60cb      	str	r3, [r1, #12]
 800507a:	e03e      	b.n	80050fa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e039      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005088:	4b1e      	ldr	r3, [pc, #120]	@ (8005104 <HAL_RCC_OscConfig+0x618>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 0203 	and.w	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	429a      	cmp	r2, r3
 800509a:	d12c      	bne.n	80050f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	3b01      	subs	r3, #1
 80050a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d123      	bne.n	80050f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d11b      	bne.n	80050f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d113      	bne.n	80050f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	3b01      	subs	r3, #1
 80050dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d109      	bne.n	80050f6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ec:	085b      	lsrs	r3, r3, #1
 80050ee:	3b01      	subs	r3, #1
 80050f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d001      	beq.n	80050fa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3720      	adds	r7, #32
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021000 	.word	0x40021000
 8005108:	019f800c 	.word	0x019f800c
 800510c:	feeefffc 	.word	0xfeeefffc

08005110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e11e      	b.n	8005366 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005128:	4b91      	ldr	r3, [pc, #580]	@ (8005370 <HAL_RCC_ClockConfig+0x260>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d910      	bls.n	8005158 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b8e      	ldr	r3, [pc, #568]	@ (8005370 <HAL_RCC_ClockConfig+0x260>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 020f 	bic.w	r2, r3, #15
 800513e:	498c      	ldr	r1, [pc, #560]	@ (8005370 <HAL_RCC_ClockConfig+0x260>)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005146:	4b8a      	ldr	r3, [pc, #552]	@ (8005370 <HAL_RCC_ClockConfig+0x260>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d001      	beq.n	8005158 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e106      	b.n	8005366 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d073      	beq.n	800524c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d129      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516c:	4b81      	ldr	r3, [pc, #516]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0f4      	b.n	8005366 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800517c:	f000 f99e 	bl	80054bc <RCC_GetSysClockFreqFromPLLSource>
 8005180:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4a7c      	ldr	r2, [pc, #496]	@ (8005378 <HAL_RCC_ClockConfig+0x268>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d93f      	bls.n	800520a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800518a:	4b7a      	ldr	r3, [pc, #488]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d033      	beq.n	800520a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d12f      	bne.n	800520a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051aa:	4b72      	ldr	r3, [pc, #456]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051b2:	4a70      	ldr	r2, [pc, #448]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 80051b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051ba:	2380      	movs	r3, #128	@ 0x80
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e024      	b.n	800520a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e0c6      	b.n	8005366 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d8:	4b66      	ldr	r3, [pc, #408]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e0be      	b.n	8005366 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051e8:	f000 f8ce 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4a61      	ldr	r2, [pc, #388]	@ (8005378 <HAL_RCC_ClockConfig+0x268>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d909      	bls.n	800520a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051f6:	4b5f      	ldr	r3, [pc, #380]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 8005200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005204:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005206:	2380      	movs	r3, #128	@ 0x80
 8005208:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800520a:	4b5a      	ldr	r3, [pc, #360]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4957      	ldr	r1, [pc, #348]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521c:	f7fd f920 	bl	8002460 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	e00a      	b.n	800523a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005224:	f7fd f91c 	bl	8002460 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e095      	b.n	8005366 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	4b4e      	ldr	r3, [pc, #312]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 020c 	and.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	429a      	cmp	r2, r3
 800524a:	d1eb      	bne.n	8005224 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d023      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005264:	4b43      	ldr	r3, [pc, #268]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	4a42      	ldr	r2, [pc, #264]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800526a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800526e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800527c:	4b3d      	ldr	r3, [pc, #244]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005284:	4a3b      	ldr	r2, [pc, #236]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 8005286:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800528a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800528c:	4b39      	ldr	r3, [pc, #228]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4936      	ldr	r1, [pc, #216]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
 800529e:	e008      	b.n	80052b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	2b80      	cmp	r3, #128	@ 0x80
 80052a4:	d105      	bne.n	80052b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80052a6:	4b33      	ldr	r3, [pc, #204]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	4a32      	ldr	r2, [pc, #200]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 80052ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005370 <HAL_RCC_ClockConfig+0x260>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d21d      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005370 <HAL_RCC_ClockConfig+0x260>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f023 020f 	bic.w	r2, r3, #15
 80052c8:	4929      	ldr	r1, [pc, #164]	@ (8005370 <HAL_RCC_ClockConfig+0x260>)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80052d0:	f7fd f8c6 	bl	8002460 <HAL_GetTick>
 80052d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052d8:	f7fd f8c2 	bl	8002460 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e03b      	b.n	8005366 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b20      	ldr	r3, [pc, #128]	@ (8005370 <HAL_RCC_ClockConfig+0x260>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d1ed      	bne.n	80052d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005308:	4b1a      	ldr	r3, [pc, #104]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4917      	ldr	r1, [pc, #92]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005326:	4b13      	ldr	r3, [pc, #76]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	490f      	ldr	r1, [pc, #60]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800533a:	f000 f825 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 800533e:	4602      	mov	r2, r0
 8005340:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <HAL_RCC_ClockConfig+0x264>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	490c      	ldr	r1, [pc, #48]	@ (800537c <HAL_RCC_ClockConfig+0x26c>)
 800534c:	5ccb      	ldrb	r3, [r1, r3]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	fa22 f303 	lsr.w	r3, r2, r3
 8005356:	4a0a      	ldr	r2, [pc, #40]	@ (8005380 <HAL_RCC_ClockConfig+0x270>)
 8005358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800535a:	4b0a      	ldr	r3, [pc, #40]	@ (8005384 <HAL_RCC_ClockConfig+0x274>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fd f832 	bl	80023c8 <HAL_InitTick>
 8005364:	4603      	mov	r3, r0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40022000 	.word	0x40022000
 8005374:	40021000 	.word	0x40021000
 8005378:	04c4b400 	.word	0x04c4b400
 800537c:	080093e0 	.word	0x080093e0
 8005380:	2000000c 	.word	0x2000000c
 8005384:	20000010 	.word	0x20000010

08005388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800538e:	4b2c      	ldr	r3, [pc, #176]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b04      	cmp	r3, #4
 8005398:	d102      	bne.n	80053a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800539a:	4b2a      	ldr	r3, [pc, #168]	@ (8005444 <HAL_RCC_GetSysClockFreq+0xbc>)
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	e047      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053a0:	4b27      	ldr	r3, [pc, #156]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 030c 	and.w	r3, r3, #12
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d102      	bne.n	80053b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053ac:	4b26      	ldr	r3, [pc, #152]	@ (8005448 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	e03e      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053b2:	4b23      	ldr	r3, [pc, #140]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	d136      	bne.n	800542c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053be:	4b20      	ldr	r3, [pc, #128]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	091b      	lsrs	r3, r3, #4
 80053ce:	f003 030f 	and.w	r3, r3, #15
 80053d2:	3301      	adds	r3, #1
 80053d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d10c      	bne.n	80053f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005448 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	4a16      	ldr	r2, [pc, #88]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053e6:	68d2      	ldr	r2, [r2, #12]
 80053e8:	0a12      	lsrs	r2, r2, #8
 80053ea:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	617b      	str	r3, [r7, #20]
      break;
 80053f4:	e00c      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053f6:	4a13      	ldr	r2, [pc, #76]	@ (8005444 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	4a10      	ldr	r2, [pc, #64]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005400:	68d2      	ldr	r2, [r2, #12]
 8005402:	0a12      	lsrs	r2, r2, #8
 8005404:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005408:	fb02 f303 	mul.w	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]
      break;
 800540e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	0e5b      	lsrs	r3, r3, #25
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	3301      	adds	r3, #1
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	fbb2 f3f3 	udiv	r3, r2, r3
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	e001      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005430:	693b      	ldr	r3, [r7, #16]
}
 8005432:	4618      	mov	r0, r3
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000
 8005444:	00f42400 	.word	0x00f42400
 8005448:	016e3600 	.word	0x016e3600

0800544c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005450:	4b03      	ldr	r3, [pc, #12]	@ (8005460 <HAL_RCC_GetHCLKFreq+0x14>)
 8005452:	681b      	ldr	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	2000000c 	.word	0x2000000c

08005464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005468:	f7ff fff0 	bl	800544c <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0a1b      	lsrs	r3, r3, #8
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4904      	ldr	r1, [pc, #16]	@ (800548c <HAL_RCC_GetPCLK1Freq+0x28>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	080093f0 	.word	0x080093f0

08005490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005494:	f7ff ffda 	bl	800544c <HAL_RCC_GetHCLKFreq>
 8005498:	4602      	mov	r2, r0
 800549a:	4b06      	ldr	r3, [pc, #24]	@ (80054b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	0adb      	lsrs	r3, r3, #11
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	4904      	ldr	r1, [pc, #16]	@ (80054b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054a6:	5ccb      	ldrb	r3, [r1, r3]
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40021000 	.word	0x40021000
 80054b8:	080093f0 	.word	0x080093f0

080054bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054c2:	4b1e      	ldr	r3, [pc, #120]	@ (800553c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054cc:	4b1b      	ldr	r3, [pc, #108]	@ (800553c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	091b      	lsrs	r3, r3, #4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	3301      	adds	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d10c      	bne.n	80054fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054e0:	4a17      	ldr	r2, [pc, #92]	@ (8005540 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	4a14      	ldr	r2, [pc, #80]	@ (800553c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ea:	68d2      	ldr	r2, [r2, #12]
 80054ec:	0a12      	lsrs	r2, r2, #8
 80054ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	617b      	str	r3, [r7, #20]
    break;
 80054f8:	e00c      	b.n	8005514 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054fa:	4a12      	ldr	r2, [pc, #72]	@ (8005544 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005502:	4a0e      	ldr	r2, [pc, #56]	@ (800553c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005504:	68d2      	ldr	r2, [r2, #12]
 8005506:	0a12      	lsrs	r2, r2, #8
 8005508:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800550c:	fb02 f303 	mul.w	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]
    break;
 8005512:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005514:	4b09      	ldr	r3, [pc, #36]	@ (800553c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	0e5b      	lsrs	r3, r3, #25
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	3301      	adds	r3, #1
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	fbb2 f3f3 	udiv	r3, r2, r3
 800552c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800552e:	687b      	ldr	r3, [r7, #4]
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40021000 	.word	0x40021000
 8005540:	016e3600 	.word	0x016e3600
 8005544:	00f42400 	.word	0x00f42400

08005548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005550:	2300      	movs	r3, #0
 8005552:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005554:	2300      	movs	r3, #0
 8005556:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8098 	beq.w	8005696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005566:	2300      	movs	r3, #0
 8005568:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556a:	4b43      	ldr	r3, [pc, #268]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005576:	4b40      	ldr	r3, [pc, #256]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557a:	4a3f      	ldr	r2, [pc, #252]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800557c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005580:	6593      	str	r3, [r2, #88]	@ 0x58
 8005582:	4b3d      	ldr	r3, [pc, #244]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800558a:	60bb      	str	r3, [r7, #8]
 800558c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558e:	2301      	movs	r3, #1
 8005590:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005592:	4b3a      	ldr	r3, [pc, #232]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a39      	ldr	r2, [pc, #228]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800559e:	f7fc ff5f 	bl	8002460 <HAL_GetTick>
 80055a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a4:	e009      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a6:	f7fc ff5b 	bl	8002460 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d902      	bls.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	74fb      	strb	r3, [r7, #19]
        break;
 80055b8:	e005      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ba:	4b30      	ldr	r3, [pc, #192]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ef      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d159      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01e      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d019      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055e8:	4b23      	ldr	r3, [pc, #140]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055f4:	4b20      	ldr	r3, [pc, #128]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005604:	4b1c      	ldr	r3, [pc, #112]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560a:	4a1b      	ldr	r2, [pc, #108]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005614:	4a18      	ldr	r2, [pc, #96]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d016      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005626:	f7fc ff1b 	bl	8002460 <HAL_GetTick>
 800562a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562c:	e00b      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562e:	f7fc ff17 	bl	8002460 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800563c:	4293      	cmp	r3, r2
 800563e:	d902      	bls.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	74fb      	strb	r3, [r7, #19]
            break;
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005646:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ec      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800565a:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800565c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005660:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005668:	4903      	ldr	r1, [pc, #12]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005670:	e008      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005672:	7cfb      	ldrb	r3, [r7, #19]
 8005674:	74bb      	strb	r3, [r7, #18]
 8005676:	e005      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005678:	40021000 	.word	0x40021000
 800567c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005684:	7c7b      	ldrb	r3, [r7, #17]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d105      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	4ba7      	ldr	r3, [pc, #668]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568e:	4aa6      	ldr	r2, [pc, #664]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005690:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005694:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056a2:	4ba1      	ldr	r3, [pc, #644]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a8:	f023 0203 	bic.w	r2, r3, #3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	499d      	ldr	r1, [pc, #628]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056c4:	4b98      	ldr	r3, [pc, #608]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ca:	f023 020c 	bic.w	r2, r3, #12
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	4995      	ldr	r1, [pc, #596]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056e6:	4b90      	ldr	r3, [pc, #576]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	498c      	ldr	r1, [pc, #560]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005708:	4b87      	ldr	r3, [pc, #540]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	4984      	ldr	r1, [pc, #528]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800572a:	4b7f      	ldr	r3, [pc, #508]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	497b      	ldr	r1, [pc, #492]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800574c:	4b76      	ldr	r3, [pc, #472]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005752:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	4973      	ldr	r1, [pc, #460]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800576e:	4b6e      	ldr	r3, [pc, #440]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005774:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	496a      	ldr	r1, [pc, #424]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005790:	4b65      	ldr	r3, [pc, #404]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005796:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	4962      	ldr	r1, [pc, #392]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c0:	4959      	ldr	r1, [pc, #356]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057d4:	4b54      	ldr	r3, [pc, #336]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057da:	f023 0203 	bic.w	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e2:	4951      	ldr	r1, [pc, #324]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057f6:	4b4c      	ldr	r3, [pc, #304]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005804:	4948      	ldr	r1, [pc, #288]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d015      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005818:	4b43      	ldr	r3, [pc, #268]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005826:	4940      	ldr	r1, [pc, #256]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005836:	d105      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005838:	4b3b      	ldr	r3, [pc, #236]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4a3a      	ldr	r2, [pc, #232]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005842:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800584c:	2b00      	cmp	r3, #0
 800584e:	d015      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005850:	4b35      	ldr	r3, [pc, #212]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005856:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	4932      	ldr	r1, [pc, #200]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005860:	4313      	orrs	r3, r2
 8005862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800586e:	d105      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005870:	4b2d      	ldr	r3, [pc, #180]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a2c      	ldr	r2, [pc, #176]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800587a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d015      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005888:	4b27      	ldr	r3, [pc, #156]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005896:	4924      	ldr	r1, [pc, #144]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058a6:	d105      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d015      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058c0:	4b19      	ldr	r3, [pc, #100]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ce:	4916      	ldr	r1, [pc, #88]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058e0:	4b11      	ldr	r3, [pc, #68]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	4a10      	ldr	r2, [pc, #64]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d019      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	4908      	ldr	r1, [pc, #32]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005908:	4313      	orrs	r3, r2
 800590a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005912:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005916:	d109      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005918:	4b03      	ldr	r3, [pc, #12]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	4a02      	ldr	r2, [pc, #8]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005922:	60d3      	str	r3, [r2, #12]
 8005924:	e002      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d015      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005938:	4b29      	ldr	r3, [pc, #164]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800593a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005946:	4926      	ldr	r1, [pc, #152]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005948:	4313      	orrs	r3, r2
 800594a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005952:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005956:	d105      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005958:	4b21      	ldr	r3, [pc, #132]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a20      	ldr	r2, [pc, #128]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800595e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005962:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d015      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005970:	4b1b      	ldr	r3, [pc, #108]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005976:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800597e:	4918      	ldr	r1, [pc, #96]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598e:	d105      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005990:	4b13      	ldr	r3, [pc, #76]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4a12      	ldr	r2, [pc, #72]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800599a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059a8:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b6:	490a      	ldr	r1, [pc, #40]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059c6:	d105      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059c8:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a04      	ldr	r2, [pc, #16]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80059ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000

080059e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e049      	b.n	8005a8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fc fb5a 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f000 fd78 	bl	8006518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d001      	beq.n	8005aac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e04c      	b.n	8005b46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a26      	ldr	r2, [pc, #152]	@ (8005b54 <HAL_TIM_Base_Start+0xc0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d022      	beq.n	8005b04 <HAL_TIM_Base_Start+0x70>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac6:	d01d      	beq.n	8005b04 <HAL_TIM_Base_Start+0x70>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a22      	ldr	r2, [pc, #136]	@ (8005b58 <HAL_TIM_Base_Start+0xc4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d018      	beq.n	8005b04 <HAL_TIM_Base_Start+0x70>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a21      	ldr	r2, [pc, #132]	@ (8005b5c <HAL_TIM_Base_Start+0xc8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d013      	beq.n	8005b04 <HAL_TIM_Base_Start+0x70>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8005b60 <HAL_TIM_Base_Start+0xcc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00e      	beq.n	8005b04 <HAL_TIM_Base_Start+0x70>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1e      	ldr	r2, [pc, #120]	@ (8005b64 <HAL_TIM_Base_Start+0xd0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_TIM_Base_Start+0x70>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b68 <HAL_TIM_Base_Start+0xd4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_TIM_Base_Start+0x70>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1b      	ldr	r2, [pc, #108]	@ (8005b6c <HAL_TIM_Base_Start+0xd8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d115      	bne.n	8005b30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	4b19      	ldr	r3, [pc, #100]	@ (8005b70 <HAL_TIM_Base_Start+0xdc>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b06      	cmp	r3, #6
 8005b14:	d015      	beq.n	8005b42 <HAL_TIM_Base_Start+0xae>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b1c:	d011      	beq.n	8005b42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2e:	e008      	b.n	8005b42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40012c00 	.word	0x40012c00
 8005b58:	40000400 	.word	0x40000400
 8005b5c:	40000800 	.word	0x40000800
 8005b60:	40000c00 	.word	0x40000c00
 8005b64:	40013400 	.word	0x40013400
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40015000 	.word	0x40015000
 8005b70:	00010007 	.word	0x00010007

08005b74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e049      	b.n	8005c1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f841 	bl	8005c22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f000 fcb0 	bl	8006518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <HAL_TIM_PWM_Start+0x24>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e03c      	b.n	8005cd6 <HAL_TIM_PWM_Start+0x9e>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d109      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x3e>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	bf14      	ite	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	2300      	moveq	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	e02f      	b.n	8005cd6 <HAL_TIM_PWM_Start+0x9e>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d109      	bne.n	8005c90 <HAL_TIM_PWM_Start+0x58>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	e022      	b.n	8005cd6 <HAL_TIM_PWM_Start+0x9e>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d109      	bne.n	8005caa <HAL_TIM_PWM_Start+0x72>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	bf14      	ite	ne
 8005ca2:	2301      	movne	r3, #1
 8005ca4:	2300      	moveq	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	e015      	b.n	8005cd6 <HAL_TIM_PWM_Start+0x9e>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d109      	bne.n	8005cc4 <HAL_TIM_PWM_Start+0x8c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e008      	b.n	8005cd6 <HAL_TIM_PWM_Start+0x9e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	bf14      	ite	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e0a6      	b.n	8005e2c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <HAL_TIM_PWM_Start+0xb6>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cec:	e023      	b.n	8005d36 <HAL_TIM_PWM_Start+0xfe>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d104      	bne.n	8005cfe <HAL_TIM_PWM_Start+0xc6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cfc:	e01b      	b.n	8005d36 <HAL_TIM_PWM_Start+0xfe>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d104      	bne.n	8005d0e <HAL_TIM_PWM_Start+0xd6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d0c:	e013      	b.n	8005d36 <HAL_TIM_PWM_Start+0xfe>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	d104      	bne.n	8005d1e <HAL_TIM_PWM_Start+0xe6>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d1c:	e00b      	b.n	8005d36 <HAL_TIM_PWM_Start+0xfe>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_PWM_Start+0xf6>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d2c:	e003      	b.n	8005d36 <HAL_TIM_PWM_Start+0xfe>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2202      	movs	r2, #2
 8005d32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 f864 	bl	8006e0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a3a      	ldr	r2, [pc, #232]	@ (8005e34 <HAL_TIM_PWM_Start+0x1fc>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d018      	beq.n	8005d80 <HAL_TIM_PWM_Start+0x148>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a39      	ldr	r2, [pc, #228]	@ (8005e38 <HAL_TIM_PWM_Start+0x200>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d013      	beq.n	8005d80 <HAL_TIM_PWM_Start+0x148>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a37      	ldr	r2, [pc, #220]	@ (8005e3c <HAL_TIM_PWM_Start+0x204>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00e      	beq.n	8005d80 <HAL_TIM_PWM_Start+0x148>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a36      	ldr	r2, [pc, #216]	@ (8005e40 <HAL_TIM_PWM_Start+0x208>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d009      	beq.n	8005d80 <HAL_TIM_PWM_Start+0x148>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a34      	ldr	r2, [pc, #208]	@ (8005e44 <HAL_TIM_PWM_Start+0x20c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d004      	beq.n	8005d80 <HAL_TIM_PWM_Start+0x148>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a33      	ldr	r2, [pc, #204]	@ (8005e48 <HAL_TIM_PWM_Start+0x210>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d101      	bne.n	8005d84 <HAL_TIM_PWM_Start+0x14c>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <HAL_TIM_PWM_Start+0x14e>
 8005d84:	2300      	movs	r3, #0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a25      	ldr	r2, [pc, #148]	@ (8005e34 <HAL_TIM_PWM_Start+0x1fc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d022      	beq.n	8005dea <HAL_TIM_PWM_Start+0x1b2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dac:	d01d      	beq.n	8005dea <HAL_TIM_PWM_Start+0x1b2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a26      	ldr	r2, [pc, #152]	@ (8005e4c <HAL_TIM_PWM_Start+0x214>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d018      	beq.n	8005dea <HAL_TIM_PWM_Start+0x1b2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a24      	ldr	r2, [pc, #144]	@ (8005e50 <HAL_TIM_PWM_Start+0x218>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_TIM_PWM_Start+0x1b2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a23      	ldr	r2, [pc, #140]	@ (8005e54 <HAL_TIM_PWM_Start+0x21c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00e      	beq.n	8005dea <HAL_TIM_PWM_Start+0x1b2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a19      	ldr	r2, [pc, #100]	@ (8005e38 <HAL_TIM_PWM_Start+0x200>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d009      	beq.n	8005dea <HAL_TIM_PWM_Start+0x1b2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <HAL_TIM_PWM_Start+0x204>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d004      	beq.n	8005dea <HAL_TIM_PWM_Start+0x1b2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a18      	ldr	r2, [pc, #96]	@ (8005e48 <HAL_TIM_PWM_Start+0x210>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d115      	bne.n	8005e16 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	4b19      	ldr	r3, [pc, #100]	@ (8005e58 <HAL_TIM_PWM_Start+0x220>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b06      	cmp	r3, #6
 8005dfa:	d015      	beq.n	8005e28 <HAL_TIM_PWM_Start+0x1f0>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e02:	d011      	beq.n	8005e28 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0201 	orr.w	r2, r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e14:	e008      	b.n	8005e28 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e000      	b.n	8005e2a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40014000 	.word	0x40014000
 8005e40:	40014400 	.word	0x40014400
 8005e44:	40014800 	.word	0x40014800
 8005e48:	40015000 	.word	0x40015000
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	00010007 	.word	0x00010007

08005e5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e097      	b.n	8005fa0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fc f965 	bl	8002154 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005ea0:	f023 0307 	bic.w	r3, r3, #7
 8005ea4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3304      	adds	r3, #4
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f000 fb31 	bl	8006518 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005efc:	f023 030c 	bic.w	r3, r3, #12
 8005f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	011a      	lsls	r2, r3, #4
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	031b      	lsls	r3, r3, #12
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d110      	bne.n	8005ffa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d102      	bne.n	8005fe4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fde:	7b7b      	ldrb	r3, [r7, #13]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d001      	beq.n	8005fe8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e069      	b.n	80060bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ff8:	e031      	b.n	800605e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d110      	bne.n	8006022 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d102      	bne.n	800600c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006006:	7b3b      	ldrb	r3, [r7, #12]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d001      	beq.n	8006010 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e055      	b.n	80060bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006020:	e01d      	b.n	800605e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d108      	bne.n	800603a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006028:	7bbb      	ldrb	r3, [r7, #14]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d105      	bne.n	800603a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800602e:	7b7b      	ldrb	r3, [r7, #13]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d102      	bne.n	800603a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006034:	7b3b      	ldrb	r3, [r7, #12]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d001      	beq.n	800603e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e03e      	b.n	80060bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2202      	movs	r2, #2
 800604a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_TIM_Encoder_Start+0xc4>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b04      	cmp	r3, #4
 8006068:	d008      	beq.n	800607c <HAL_TIM_Encoder_Start+0xd4>
 800606a:	e00f      	b.n	800608c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2201      	movs	r2, #1
 8006072:	2100      	movs	r1, #0
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fec9 	bl	8006e0c <TIM_CCxChannelCmd>
      break;
 800607a:	e016      	b.n	80060aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2201      	movs	r2, #1
 8006082:	2104      	movs	r1, #4
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fec1 	bl	8006e0c <TIM_CCxChannelCmd>
      break;
 800608a:	e00e      	b.n	80060aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2201      	movs	r2, #1
 8006092:	2100      	movs	r1, #0
 8006094:	4618      	mov	r0, r3
 8006096:	f000 feb9 	bl	8006e0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2201      	movs	r2, #1
 80060a0:	2104      	movs	r1, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 feb2 	bl	8006e0c <TIM_CCxChannelCmd>
      break;
 80060a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060de:	2302      	movs	r3, #2
 80060e0:	e0ff      	b.n	80062e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b14      	cmp	r3, #20
 80060ee:	f200 80f0 	bhi.w	80062d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060f2:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	080062d3 	.word	0x080062d3
 8006100:	080062d3 	.word	0x080062d3
 8006104:	080062d3 	.word	0x080062d3
 8006108:	0800618d 	.word	0x0800618d
 800610c:	080062d3 	.word	0x080062d3
 8006110:	080062d3 	.word	0x080062d3
 8006114:	080062d3 	.word	0x080062d3
 8006118:	080061cf 	.word	0x080061cf
 800611c:	080062d3 	.word	0x080062d3
 8006120:	080062d3 	.word	0x080062d3
 8006124:	080062d3 	.word	0x080062d3
 8006128:	0800620f 	.word	0x0800620f
 800612c:	080062d3 	.word	0x080062d3
 8006130:	080062d3 	.word	0x080062d3
 8006134:	080062d3 	.word	0x080062d3
 8006138:	08006251 	.word	0x08006251
 800613c:	080062d3 	.word	0x080062d3
 8006140:	080062d3 	.word	0x080062d3
 8006144:	080062d3 	.word	0x080062d3
 8006148:	08006291 	.word	0x08006291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fa94 	bl	8006680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0208 	orr.w	r2, r2, #8
 8006166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699a      	ldr	r2, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0204 	bic.w	r2, r2, #4
 8006176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6999      	ldr	r1, [r3, #24]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	619a      	str	r2, [r3, #24]
      break;
 800618a:	e0a5      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fb0e 	bl	80067b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6999      	ldr	r1, [r3, #24]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	021a      	lsls	r2, r3, #8
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	619a      	str	r2, [r3, #24]
      break;
 80061cc:	e084      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fb81 	bl	80068dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0208 	orr.w	r2, r2, #8
 80061e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0204 	bic.w	r2, r2, #4
 80061f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69d9      	ldr	r1, [r3, #28]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	61da      	str	r2, [r3, #28]
      break;
 800620c:	e064      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fbf3 	bl	8006a00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69d9      	ldr	r1, [r3, #28]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	021a      	lsls	r2, r3, #8
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	61da      	str	r2, [r3, #28]
      break;
 800624e:	e043      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fc66 	bl	8006b28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0208 	orr.w	r2, r2, #8
 800626a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0204 	bic.w	r2, r2, #4
 800627a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800628e:	e023      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68b9      	ldr	r1, [r7, #8]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fcb0 	bl	8006bfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	021a      	lsls	r2, r3, #8
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80062d0:	e002      	b.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
      break;
 80062d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop

080062ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIM_ConfigClockSource+0x1c>
 8006304:	2302      	movs	r3, #2
 8006306:	e0f6      	b.n	80064f6 <HAL_TIM_ConfigClockSource+0x20a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006326:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800632a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a6f      	ldr	r2, [pc, #444]	@ (8006500 <HAL_TIM_ConfigClockSource+0x214>)
 8006342:	4293      	cmp	r3, r2
 8006344:	f000 80c1 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006348:	4a6d      	ldr	r2, [pc, #436]	@ (8006500 <HAL_TIM_ConfigClockSource+0x214>)
 800634a:	4293      	cmp	r3, r2
 800634c:	f200 80c6 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 8006350:	4a6c      	ldr	r2, [pc, #432]	@ (8006504 <HAL_TIM_ConfigClockSource+0x218>)
 8006352:	4293      	cmp	r3, r2
 8006354:	f000 80b9 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006358:	4a6a      	ldr	r2, [pc, #424]	@ (8006504 <HAL_TIM_ConfigClockSource+0x218>)
 800635a:	4293      	cmp	r3, r2
 800635c:	f200 80be 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 8006360:	4a69      	ldr	r2, [pc, #420]	@ (8006508 <HAL_TIM_ConfigClockSource+0x21c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	f000 80b1 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006368:	4a67      	ldr	r2, [pc, #412]	@ (8006508 <HAL_TIM_ConfigClockSource+0x21c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	f200 80b6 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 8006370:	4a66      	ldr	r2, [pc, #408]	@ (800650c <HAL_TIM_ConfigClockSource+0x220>)
 8006372:	4293      	cmp	r3, r2
 8006374:	f000 80a9 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006378:	4a64      	ldr	r2, [pc, #400]	@ (800650c <HAL_TIM_ConfigClockSource+0x220>)
 800637a:	4293      	cmp	r3, r2
 800637c:	f200 80ae 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 8006380:	4a63      	ldr	r2, [pc, #396]	@ (8006510 <HAL_TIM_ConfigClockSource+0x224>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f000 80a1 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006388:	4a61      	ldr	r2, [pc, #388]	@ (8006510 <HAL_TIM_ConfigClockSource+0x224>)
 800638a:	4293      	cmp	r3, r2
 800638c:	f200 80a6 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 8006390:	4a60      	ldr	r2, [pc, #384]	@ (8006514 <HAL_TIM_ConfigClockSource+0x228>)
 8006392:	4293      	cmp	r3, r2
 8006394:	f000 8099 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006398:	4a5e      	ldr	r2, [pc, #376]	@ (8006514 <HAL_TIM_ConfigClockSource+0x228>)
 800639a:	4293      	cmp	r3, r2
 800639c:	f200 809e 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80063a4:	f000 8091 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 80063a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80063ac:	f200 8096 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063b4:	f000 8089 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 80063b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063bc:	f200 808e 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c4:	d03e      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0x158>
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ca:	f200 8087 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d2:	f000 8086 	beq.w	80064e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063da:	d87f      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063dc:	2b70      	cmp	r3, #112	@ 0x70
 80063de:	d01a      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0x12a>
 80063e0:	2b70      	cmp	r3, #112	@ 0x70
 80063e2:	d87b      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063e4:	2b60      	cmp	r3, #96	@ 0x60
 80063e6:	d050      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x19e>
 80063e8:	2b60      	cmp	r3, #96	@ 0x60
 80063ea:	d877      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063ec:	2b50      	cmp	r3, #80	@ 0x50
 80063ee:	d03c      	beq.n	800646a <HAL_TIM_ConfigClockSource+0x17e>
 80063f0:	2b50      	cmp	r3, #80	@ 0x50
 80063f2:	d873      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063f4:	2b40      	cmp	r3, #64	@ 0x40
 80063f6:	d058      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x1be>
 80063f8:	2b40      	cmp	r3, #64	@ 0x40
 80063fa:	d86f      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 80063fc:	2b30      	cmp	r3, #48	@ 0x30
 80063fe:	d064      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006400:	2b30      	cmp	r3, #48	@ 0x30
 8006402:	d86b      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 8006404:	2b20      	cmp	r3, #32
 8006406:	d060      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006408:	2b20      	cmp	r3, #32
 800640a:	d867      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d05c      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006410:	2b10      	cmp	r3, #16
 8006412:	d05a      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x1de>
 8006414:	e062      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006426:	f000 fcd1 	bl	8006dcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	609a      	str	r2, [r3, #8]
      break;
 8006442:	e04f      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006454:	f000 fcba 	bl	8006dcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006466:	609a      	str	r2, [r3, #8]
      break;
 8006468:	e03c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006476:	461a      	mov	r2, r3
 8006478:	f000 fc2c 	bl	8006cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2150      	movs	r1, #80	@ 0x50
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fc85 	bl	8006d92 <TIM_ITRx_SetConfig>
      break;
 8006488:	e02c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006496:	461a      	mov	r2, r3
 8006498:	f000 fc4b 	bl	8006d32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2160      	movs	r1, #96	@ 0x60
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fc75 	bl	8006d92 <TIM_ITRx_SetConfig>
      break;
 80064a8:	e01c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b6:	461a      	mov	r2, r3
 80064b8:	f000 fc0c 	bl	8006cd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2140      	movs	r1, #64	@ 0x40
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fc65 	bl	8006d92 <TIM_ITRx_SetConfig>
      break;
 80064c8:	e00c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f000 fc5c 	bl	8006d92 <TIM_ITRx_SetConfig>
      break;
 80064da:	e003      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
      break;
 80064e0:	e000      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80064e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	00100070 	.word	0x00100070
 8006504:	00100060 	.word	0x00100060
 8006508:	00100050 	.word	0x00100050
 800650c:	00100040 	.word	0x00100040
 8006510:	00100030 	.word	0x00100030
 8006514:	00100020 	.word	0x00100020

08006518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a4c      	ldr	r2, [pc, #304]	@ (800665c <TIM_Base_SetConfig+0x144>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d017      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006536:	d013      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a49      	ldr	r2, [pc, #292]	@ (8006660 <TIM_Base_SetConfig+0x148>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00f      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a48      	ldr	r2, [pc, #288]	@ (8006664 <TIM_Base_SetConfig+0x14c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a47      	ldr	r2, [pc, #284]	@ (8006668 <TIM_Base_SetConfig+0x150>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a46      	ldr	r2, [pc, #280]	@ (800666c <TIM_Base_SetConfig+0x154>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_Base_SetConfig+0x48>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a45      	ldr	r2, [pc, #276]	@ (8006670 <TIM_Base_SetConfig+0x158>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d108      	bne.n	8006572 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a39      	ldr	r2, [pc, #228]	@ (800665c <TIM_Base_SetConfig+0x144>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d023      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006580:	d01f      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a36      	ldr	r2, [pc, #216]	@ (8006660 <TIM_Base_SetConfig+0x148>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01b      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a35      	ldr	r2, [pc, #212]	@ (8006664 <TIM_Base_SetConfig+0x14c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d017      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a34      	ldr	r2, [pc, #208]	@ (8006668 <TIM_Base_SetConfig+0x150>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a33      	ldr	r2, [pc, #204]	@ (800666c <TIM_Base_SetConfig+0x154>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00f      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a33      	ldr	r2, [pc, #204]	@ (8006674 <TIM_Base_SetConfig+0x15c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00b      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a32      	ldr	r2, [pc, #200]	@ (8006678 <TIM_Base_SetConfig+0x160>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d007      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a31      	ldr	r2, [pc, #196]	@ (800667c <TIM_Base_SetConfig+0x164>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_Base_SetConfig+0xaa>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006670 <TIM_Base_SetConfig+0x158>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d108      	bne.n	80065d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a18      	ldr	r2, [pc, #96]	@ (800665c <TIM_Base_SetConfig+0x144>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a1a      	ldr	r2, [pc, #104]	@ (800666c <TIM_Base_SetConfig+0x154>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00f      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a1a      	ldr	r2, [pc, #104]	@ (8006674 <TIM_Base_SetConfig+0x15c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00b      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a19      	ldr	r2, [pc, #100]	@ (8006678 <TIM_Base_SetConfig+0x160>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d007      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a18      	ldr	r2, [pc, #96]	@ (800667c <TIM_Base_SetConfig+0x164>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_Base_SetConfig+0x110>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a13      	ldr	r2, [pc, #76]	@ (8006670 <TIM_Base_SetConfig+0x158>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d103      	bne.n	8006630 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d105      	bne.n	800664e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f023 0201 	bic.w	r2, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	611a      	str	r2, [r3, #16]
  }
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40000400 	.word	0x40000400
 8006664:	40000800 	.word	0x40000800
 8006668:	40000c00 	.word	0x40000c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40015000 	.word	0x40015000
 8006674:	40014000 	.word	0x40014000
 8006678:	40014400 	.word	0x40014400
 800667c:	40014800 	.word	0x40014800

08006680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 0201 	bic.w	r2, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 0302 	bic.w	r3, r3, #2
 80066cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a30      	ldr	r2, [pc, #192]	@ (800679c <TIM_OC1_SetConfig+0x11c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d013      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a2f      	ldr	r2, [pc, #188]	@ (80067a0 <TIM_OC1_SetConfig+0x120>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00f      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a2e      	ldr	r2, [pc, #184]	@ (80067a4 <TIM_OC1_SetConfig+0x124>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00b      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a2d      	ldr	r2, [pc, #180]	@ (80067a8 <TIM_OC1_SetConfig+0x128>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a2c      	ldr	r2, [pc, #176]	@ (80067ac <TIM_OC1_SetConfig+0x12c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_OC1_SetConfig+0x88>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a2b      	ldr	r2, [pc, #172]	@ (80067b0 <TIM_OC1_SetConfig+0x130>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d10c      	bne.n	8006722 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f023 0308 	bic.w	r3, r3, #8
 800670e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f023 0304 	bic.w	r3, r3, #4
 8006720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1d      	ldr	r2, [pc, #116]	@ (800679c <TIM_OC1_SetConfig+0x11c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d013      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <TIM_OC1_SetConfig+0x120>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00f      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <TIM_OC1_SetConfig+0x124>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00b      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1a      	ldr	r2, [pc, #104]	@ (80067a8 <TIM_OC1_SetConfig+0x128>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d007      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a19      	ldr	r2, [pc, #100]	@ (80067ac <TIM_OC1_SetConfig+0x12c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_OC1_SetConfig+0xd2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <TIM_OC1_SetConfig+0x130>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d111      	bne.n	8006776 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40013400 	.word	0x40013400
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800
 80067b0:	40015000 	.word	0x40015000

080067b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	f023 0210 	bic.w	r2, r3, #16
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f023 0320 	bic.w	r3, r3, #32
 8006802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a2c      	ldr	r2, [pc, #176]	@ (80068c4 <TIM_OC2_SetConfig+0x110>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <TIM_OC2_SetConfig+0x74>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a2b      	ldr	r2, [pc, #172]	@ (80068c8 <TIM_OC2_SetConfig+0x114>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC2_SetConfig+0x74>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a2a      	ldr	r2, [pc, #168]	@ (80068cc <TIM_OC2_SetConfig+0x118>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d10d      	bne.n	8006844 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800682e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a1f      	ldr	r2, [pc, #124]	@ (80068c4 <TIM_OC2_SetConfig+0x110>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a1e      	ldr	r2, [pc, #120]	@ (80068c8 <TIM_OC2_SetConfig+0x114>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00f      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a1e      	ldr	r2, [pc, #120]	@ (80068d0 <TIM_OC2_SetConfig+0x11c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00b      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a1d      	ldr	r2, [pc, #116]	@ (80068d4 <TIM_OC2_SetConfig+0x120>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d007      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a1c      	ldr	r2, [pc, #112]	@ (80068d8 <TIM_OC2_SetConfig+0x124>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_OC2_SetConfig+0xc0>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a17      	ldr	r2, [pc, #92]	@ (80068cc <TIM_OC2_SetConfig+0x118>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d113      	bne.n	800689c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800687a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	621a      	str	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40013400 	.word	0x40013400
 80068cc:	40015000 	.word	0x40015000
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40014400 	.word	0x40014400
 80068d8:	40014800 	.word	0x40014800

080068dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800690a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0303 	bic.w	r3, r3, #3
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2b      	ldr	r2, [pc, #172]	@ (80069e8 <TIM_OC3_SetConfig+0x10c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_OC3_SetConfig+0x72>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2a      	ldr	r2, [pc, #168]	@ (80069ec <TIM_OC3_SetConfig+0x110>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC3_SetConfig+0x72>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a29      	ldr	r2, [pc, #164]	@ (80069f0 <TIM_OC3_SetConfig+0x114>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d10d      	bne.n	800696a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	021b      	lsls	r3, r3, #8
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1e      	ldr	r2, [pc, #120]	@ (80069e8 <TIM_OC3_SetConfig+0x10c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d013      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1d      	ldr	r2, [pc, #116]	@ (80069ec <TIM_OC3_SetConfig+0x110>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00f      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a1d      	ldr	r2, [pc, #116]	@ (80069f4 <TIM_OC3_SetConfig+0x118>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00b      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a1c      	ldr	r2, [pc, #112]	@ (80069f8 <TIM_OC3_SetConfig+0x11c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a1b      	ldr	r2, [pc, #108]	@ (80069fc <TIM_OC3_SetConfig+0x120>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_OC3_SetConfig+0xbe>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a16      	ldr	r2, [pc, #88]	@ (80069f0 <TIM_OC3_SetConfig+0x114>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d113      	bne.n	80069c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80069a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	621a      	str	r2, [r3, #32]
}
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40013400 	.word	0x40013400
 80069f0:	40015000 	.word	0x40015000
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800

08006a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	021b      	lsls	r3, r3, #8
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	031b      	lsls	r3, r3, #12
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8006b10 <TIM_OC4_SetConfig+0x110>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d007      	beq.n	8006a74 <TIM_OC4_SetConfig+0x74>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <TIM_OC4_SetConfig+0x114>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_OC4_SetConfig+0x74>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006b18 <TIM_OC4_SetConfig+0x118>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10d      	bne.n	8006a90 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a1f      	ldr	r2, [pc, #124]	@ (8006b10 <TIM_OC4_SetConfig+0x110>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b14 <TIM_OC4_SetConfig+0x114>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d00f      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b1c <TIM_OC4_SetConfig+0x11c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00b      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8006b20 <TIM_OC4_SetConfig+0x120>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d007      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b24 <TIM_OC4_SetConfig+0x124>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC4_SetConfig+0xc0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a17      	ldr	r2, [pc, #92]	@ (8006b18 <TIM_OC4_SetConfig+0x118>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d113      	bne.n	8006ae8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ace:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	019b      	lsls	r3, r3, #6
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	019b      	lsls	r3, r3, #6
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	621a      	str	r2, [r3, #32]
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40015000 	.word	0x40015000
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800

08006b28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	041b      	lsls	r3, r3, #16
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a19      	ldr	r2, [pc, #100]	@ (8006be4 <TIM_OC5_SetConfig+0xbc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a18      	ldr	r2, [pc, #96]	@ (8006be8 <TIM_OC5_SetConfig+0xc0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00f      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a17      	ldr	r2, [pc, #92]	@ (8006bec <TIM_OC5_SetConfig+0xc4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00b      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a16      	ldr	r2, [pc, #88]	@ (8006bf0 <TIM_OC5_SetConfig+0xc8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a15      	ldr	r2, [pc, #84]	@ (8006bf4 <TIM_OC5_SetConfig+0xcc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_OC5_SetConfig+0x82>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a14      	ldr	r2, [pc, #80]	@ (8006bf8 <TIM_OC5_SetConfig+0xd0>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d109      	bne.n	8006bbe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	621a      	str	r2, [r3, #32]
}
 8006bd8:	bf00      	nop
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	40012c00 	.word	0x40012c00
 8006be8:	40013400 	.word	0x40013400
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40014400 	.word	0x40014400
 8006bf4:	40014800 	.word	0x40014800
 8006bf8:	40015000 	.word	0x40015000

08006bfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	021b      	lsls	r3, r3, #8
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	051b      	lsls	r3, r3, #20
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a1a      	ldr	r2, [pc, #104]	@ (8006cbc <TIM_OC6_SetConfig+0xc0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d013      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a19      	ldr	r2, [pc, #100]	@ (8006cc0 <TIM_OC6_SetConfig+0xc4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00f      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a18      	ldr	r2, [pc, #96]	@ (8006cc4 <TIM_OC6_SetConfig+0xc8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00b      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a17      	ldr	r2, [pc, #92]	@ (8006cc8 <TIM_OC6_SetConfig+0xcc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d007      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a16      	ldr	r2, [pc, #88]	@ (8006ccc <TIM_OC6_SetConfig+0xd0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d003      	beq.n	8006c80 <TIM_OC6_SetConfig+0x84>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a15      	ldr	r2, [pc, #84]	@ (8006cd0 <TIM_OC6_SetConfig+0xd4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d109      	bne.n	8006c94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	029b      	lsls	r3, r3, #10
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	621a      	str	r2, [r3, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	371c      	adds	r7, #28
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40013400 	.word	0x40013400
 8006cc4:	40014000 	.word	0x40014000
 8006cc8:	40014400 	.word	0x40014400
 8006ccc:	40014800 	.word	0x40014800
 8006cd0:	40015000 	.word	0x40015000

08006cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f023 0201 	bic.w	r2, r3, #1
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 030a 	bic.w	r3, r3, #10
 8006d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	621a      	str	r2, [r3, #32]
}
 8006d26:	bf00      	nop
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b087      	sub	sp, #28
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	f023 0210 	bic.w	r2, r3, #16
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	031b      	lsls	r3, r3, #12
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d92:	b480      	push	{r7}
 8006d94:	b085      	sub	sp, #20
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	f043 0307 	orr.w	r3, r3, #7
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	609a      	str	r2, [r3, #8]
}
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	021a      	lsls	r2, r3, #8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	609a      	str	r2, [r3, #8]
}
 8006e00:	bf00      	nop
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	2201      	movs	r2, #1
 8006e20:	fa02 f303 	lsl.w	r3, r2, r3
 8006e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1a      	ldr	r2, [r3, #32]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	43db      	mvns	r3, r3
 8006e2e:	401a      	ands	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1a      	ldr	r2, [r3, #32]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	fa01 f303 	lsl.w	r3, r1, r3
 8006e44:	431a      	orrs	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
	...

08006e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e074      	b.n	8006f5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a34      	ldr	r2, [pc, #208]	@ (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a33      	ldr	r2, [pc, #204]	@ (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d004      	beq.n	8006eae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a31      	ldr	r2, [pc, #196]	@ (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d108      	bne.n	8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006eb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a21      	ldr	r2, [pc, #132]	@ (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d022      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef0:	d01d      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d018      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1d      	ldr	r2, [pc, #116]	@ (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d013      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00e      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a15      	ldr	r2, [pc, #84]	@ (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d009      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a18      	ldr	r2, [pc, #96]	@ (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d004      	beq.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a11      	ldr	r2, [pc, #68]	@ (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d10c      	bne.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40013400 	.word	0x40013400
 8006f70:	40015000 	.word	0x40015000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	40000800 	.word	0x40000800
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40014000 	.word	0x40014000

08006f84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e078      	b.n	8007092 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	041b      	lsls	r3, r3, #16
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1c      	ldr	r2, [pc, #112]	@ (80070a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1b      	ldr	r2, [pc, #108]	@ (80070a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d004      	beq.n	8007046 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a19      	ldr	r2, [pc, #100]	@ (80070a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d11c      	bne.n	8007080 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	051b      	lsls	r3, r3, #20
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40013400 	.word	0x40013400
 80070a8:	40015000 	.word	0x40015000

080070ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e042      	b.n	8007144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7fa ff97 	bl	8002004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2224      	movs	r2, #36	@ 0x24
 80070da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0201 	bic.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 ff42 	bl	8007f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fc43 	bl	8007988 <UART_SetConfig>
 8007102:	4603      	mov	r3, r0
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e01b      	b.n	8007144 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800711a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800712a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 ffc1 	bl	80080c4 <UART_CheckIdleState>
 8007142:	4603      	mov	r3, r0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	@ 0x28
 8007150:	af02      	add	r7, sp, #8
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	4613      	mov	r3, r2
 800715a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007162:	2b20      	cmp	r3, #32
 8007164:	d17b      	bne.n	800725e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_UART_Transmit+0x26>
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e074      	b.n	8007260 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2221      	movs	r2, #33	@ 0x21
 8007182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007186:	f7fb f96b 	bl	8002460 <HAL_GetTick>
 800718a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a4:	d108      	bne.n	80071b8 <HAL_UART_Transmit+0x6c>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e003      	b.n	80071c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071c0:	e030      	b.n	8007224 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2200      	movs	r2, #0
 80071ca:	2180      	movs	r1, #128	@ 0x80
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f001 f823 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e03d      	b.n	8007260 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	3302      	adds	r3, #2
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e007      	b.n	8007212 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	781a      	ldrb	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800722a:	b29b      	uxth	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1c8      	bne.n	80071c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2200      	movs	r2, #0
 8007238:	2140      	movs	r1, #64	@ 0x40
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 ffec 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e006      	b.n	8007260 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	e000      	b.n	8007260 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800725e:	2302      	movs	r3, #2
  }
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	@ 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800727c:	2b20      	cmp	r3, #32
 800727e:	d137      	bne.n	80072f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_UART_Receive_IT+0x24>
 8007286:	88fb      	ldrh	r3, [r7, #6]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e030      	b.n	80072f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a18      	ldr	r2, [pc, #96]	@ (80072fc <HAL_UART_Receive_IT+0x94>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d01f      	beq.n	80072e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d018      	beq.n	80072e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	613b      	str	r3, [r7, #16]
   return(result);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80072c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	461a      	mov	r2, r3
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	69f9      	ldr	r1, [r7, #28]
 80072d2:	6a3a      	ldr	r2, [r7, #32]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e6      	bne.n	80072ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	461a      	mov	r2, r3
 80072e4:	68b9      	ldr	r1, [r7, #8]
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f001 f804 	bl	80082f4 <UART_Start_Receive_IT>
 80072ec:	4603      	mov	r3, r0
 80072ee:	e000      	b.n	80072f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072f0:	2302      	movs	r3, #2
  }
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3728      	adds	r7, #40	@ 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40008000 	.word	0x40008000

08007300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b0ba      	sub	sp, #232	@ 0xe8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007326:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800732a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800732e:	4013      	ands	r3, r2
 8007330:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007338:	2b00      	cmp	r3, #0
 800733a:	d11b      	bne.n	8007374 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d015      	beq.n	8007374 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d009      	beq.n	8007374 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 82e3 	beq.w	8007930 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
      }
      return;
 8007372:	e2dd      	b.n	8007930 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8123 	beq.w	80075c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800737e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007382:	4b8d      	ldr	r3, [pc, #564]	@ (80075b8 <HAL_UART_IRQHandler+0x2b8>)
 8007384:	4013      	ands	r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800738a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800738e:	4b8b      	ldr	r3, [pc, #556]	@ (80075bc <HAL_UART_IRQHandler+0x2bc>)
 8007390:	4013      	ands	r3, r2
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8116 	beq.w	80075c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d011      	beq.n	80073c8 <HAL_UART_IRQHandler+0xc8>
 80073a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2201      	movs	r2, #1
 80073b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073be:	f043 0201 	orr.w	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d011      	beq.n	80073f8 <HAL_UART_IRQHandler+0xf8>
 80073d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2202      	movs	r2, #2
 80073e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	f043 0204 	orr.w	r2, r3, #4
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	d011      	beq.n	8007428 <HAL_UART_IRQHandler+0x128>
 8007404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2204      	movs	r2, #4
 8007416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800741e:	f043 0202 	orr.w	r2, r3, #2
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d017      	beq.n	8007464 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b00      	cmp	r3, #0
 800743e:	d105      	bne.n	800744c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007440:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007444:	4b5c      	ldr	r3, [pc, #368]	@ (80075b8 <HAL_UART_IRQHandler+0x2b8>)
 8007446:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2208      	movs	r2, #8
 8007452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745a:	f043 0208 	orr.w	r2, r3, #8
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800746c:	2b00      	cmp	r3, #0
 800746e:	d012      	beq.n	8007496 <HAL_UART_IRQHandler+0x196>
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007474:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800748c:	f043 0220 	orr.w	r2, r3, #32
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8249 	beq.w	8007934 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d013      	beq.n	80074d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074ea:	2b40      	cmp	r3, #64	@ 0x40
 80074ec:	d005      	beq.n	80074fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80074f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d054      	beq.n	80075a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 f81c 	bl	8008538 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800750a:	2b40      	cmp	r3, #64	@ 0x40
 800750c:	d146      	bne.n	800759c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3308      	adds	r3, #8
 8007514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007518:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007524:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800752c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800753a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800753e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1d9      	bne.n	800750e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007560:	2b00      	cmp	r3, #0
 8007562:	d017      	beq.n	8007594 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800756a:	4a15      	ldr	r2, [pc, #84]	@ (80075c0 <HAL_UART_IRQHandler+0x2c0>)
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007574:	4618      	mov	r0, r3
 8007576:	f7fc fe83 	bl	8004280 <HAL_DMA_Abort_IT>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d019      	beq.n	80075b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800758e:	4610      	mov	r0, r2
 8007590:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007592:	e00f      	b.n	80075b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f9e1 	bl	800795c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759a:	e00b      	b.n	80075b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f9dd 	bl	800795c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a2:	e007      	b.n	80075b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f9d9 	bl	800795c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80075b2:	e1bf      	b.n	8007934 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	bf00      	nop
    return;
 80075b6:	e1bd      	b.n	8007934 <HAL_UART_IRQHandler+0x634>
 80075b8:	10000001 	.word	0x10000001
 80075bc:	04000120 	.word	0x04000120
 80075c0:	08008605 	.word	0x08008605

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	f040 8153 	bne.w	8007874 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 814c 	beq.w	8007874 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 8145 	beq.w	8007874 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2210      	movs	r2, #16
 80075f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fc:	2b40      	cmp	r3, #64	@ 0x40
 80075fe:	f040 80bb 	bne.w	8007778 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 818f 	beq.w	8007938 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007620:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007624:	429a      	cmp	r2, r3
 8007626:	f080 8187 	bcs.w	8007938 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007630:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	f040 8087 	bne.w	8007756 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800765c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007664:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007676:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800767e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800768a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1da      	bne.n	8007648 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3308      	adds	r3, #8
 8007698:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076a4:	f023 0301 	bic.w	r3, r3, #1
 80076a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e1      	bne.n	8007692 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80076f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e3      	bne.n	80076ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007724:	f023 0310 	bic.w	r3, r3, #16
 8007728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007736:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007738:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800773c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e4      	bne.n	8007714 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007750:	4618      	mov	r0, r3
 8007752:	f7fc fd3c 	bl	80041ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2202      	movs	r2, #2
 800775a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007768:	b29b      	uxth	r3, r3
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	b29b      	uxth	r3, r3
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f8fd 	bl	8007970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007776:	e0df      	b.n	8007938 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007784:	b29b      	uxth	r3, r3
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 80d1 	beq.w	800793c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800779a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 80cc 	beq.w	800793c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80077c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e4      	bne.n	80077a4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3308      	adds	r3, #8
 80077fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007802:	633a      	str	r2, [r7, #48]	@ 0x30
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800780a:	e841 2300 	strex	r3, r2, [r1]
 800780e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1e1      	bne.n	80077da <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2220      	movs	r2, #32
 800781a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	60fb      	str	r3, [r7, #12]
   return(result);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0310 	bic.w	r3, r3, #16
 800783e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	461a      	mov	r2, r3
 8007848:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800784c:	61fb      	str	r3, [r7, #28]
 800784e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	69b9      	ldr	r1, [r7, #24]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	617b      	str	r3, [r7, #20]
   return(result);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e4      	bne.n	800782a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f87f 	bl	8007970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007872:	e063      	b.n	800793c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007878:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00e      	beq.n	800789e <HAL_UART_IRQHandler+0x59e>
 8007880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007884:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d008      	beq.n	800789e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 fc12 	bl	80090c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800789c:	e051      	b.n	8007942 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800789e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d014      	beq.n	80078d4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d105      	bne.n	80078c2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d008      	beq.n	80078d4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d03a      	beq.n	8007940 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
    }
    return;
 80078d2:	e035      	b.n	8007940 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d009      	beq.n	80078f4 <HAL_UART_IRQHandler+0x5f4>
 80078e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fe9f 	bl	8008630 <UART_EndTransmit_IT>
    return;
 80078f2:	e026      	b.n	8007942 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80078f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d009      	beq.n	8007914 <HAL_UART_IRQHandler+0x614>
 8007900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007904:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fbeb 	bl	80090e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007912:	e016      	b.n	8007942 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d010      	beq.n	8007942 <HAL_UART_IRQHandler+0x642>
 8007920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007924:	2b00      	cmp	r3, #0
 8007926:	da0c      	bge.n	8007942 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fbd3 	bl	80090d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800792e:	e008      	b.n	8007942 <HAL_UART_IRQHandler+0x642>
      return;
 8007930:	bf00      	nop
 8007932:	e006      	b.n	8007942 <HAL_UART_IRQHandler+0x642>
    return;
 8007934:	bf00      	nop
 8007936:	e004      	b.n	8007942 <HAL_UART_IRQHandler+0x642>
      return;
 8007938:	bf00      	nop
 800793a:	e002      	b.n	8007942 <HAL_UART_IRQHandler+0x642>
      return;
 800793c:	bf00      	nop
 800793e:	e000      	b.n	8007942 <HAL_UART_IRQHandler+0x642>
    return;
 8007940:	bf00      	nop
  }
}
 8007942:	37e8      	adds	r7, #232	@ 0xe8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800798c:	b08c      	sub	sp, #48	@ 0x30
 800798e:	af00      	add	r7, sp, #0
 8007990:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4baa      	ldr	r3, [pc, #680]	@ (8007c60 <UART_SetConfig+0x2d8>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079c0:	430b      	orrs	r3, r1
 80079c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a9f      	ldr	r2, [pc, #636]	@ (8007c64 <UART_SetConfig+0x2dc>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079f0:	4313      	orrs	r3, r2
 80079f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80079fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a12:	f023 010f 	bic.w	r1, r3, #15
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a90      	ldr	r2, [pc, #576]	@ (8007c68 <UART_SetConfig+0x2e0>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d125      	bne.n	8007a78 <UART_SetConfig+0xf0>
 8007a2c:	4b8f      	ldr	r3, [pc, #572]	@ (8007c6c <UART_SetConfig+0x2e4>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d81a      	bhi.n	8007a70 <UART_SetConfig+0xe8>
 8007a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a40 <UART_SetConfig+0xb8>)
 8007a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a40:	08007a51 	.word	0x08007a51
 8007a44:	08007a61 	.word	0x08007a61
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a69 	.word	0x08007a69
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a56:	e116      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a5e:	e112      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007a60:	2304      	movs	r3, #4
 8007a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a66:	e10e      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007a68:	2308      	movs	r3, #8
 8007a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a6e:	e10a      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007a70:	2310      	movs	r3, #16
 8007a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a76:	e106      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8007c70 <UART_SetConfig+0x2e8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d138      	bne.n	8007af4 <UART_SetConfig+0x16c>
 8007a82:	4b7a      	ldr	r3, [pc, #488]	@ (8007c6c <UART_SetConfig+0x2e4>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a88:	f003 030c 	and.w	r3, r3, #12
 8007a8c:	2b0c      	cmp	r3, #12
 8007a8e:	d82d      	bhi.n	8007aec <UART_SetConfig+0x164>
 8007a90:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <UART_SetConfig+0x110>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007acd 	.word	0x08007acd
 8007a9c:	08007aed 	.word	0x08007aed
 8007aa0:	08007aed 	.word	0x08007aed
 8007aa4:	08007aed 	.word	0x08007aed
 8007aa8:	08007add 	.word	0x08007add
 8007aac:	08007aed 	.word	0x08007aed
 8007ab0:	08007aed 	.word	0x08007aed
 8007ab4:	08007aed 	.word	0x08007aed
 8007ab8:	08007ad5 	.word	0x08007ad5
 8007abc:	08007aed 	.word	0x08007aed
 8007ac0:	08007aed 	.word	0x08007aed
 8007ac4:	08007aed 	.word	0x08007aed
 8007ac8:	08007ae5 	.word	0x08007ae5
 8007acc:	2300      	movs	r3, #0
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad2:	e0d8      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ada:	e0d4      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007adc:	2304      	movs	r3, #4
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae2:	e0d0      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007ae4:	2308      	movs	r3, #8
 8007ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aea:	e0cc      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007aec:	2310      	movs	r3, #16
 8007aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007af2:	e0c8      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a5e      	ldr	r2, [pc, #376]	@ (8007c74 <UART_SetConfig+0x2ec>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d125      	bne.n	8007b4a <UART_SetConfig+0x1c2>
 8007afe:	4b5b      	ldr	r3, [pc, #364]	@ (8007c6c <UART_SetConfig+0x2e4>)
 8007b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b08:	2b30      	cmp	r3, #48	@ 0x30
 8007b0a:	d016      	beq.n	8007b3a <UART_SetConfig+0x1b2>
 8007b0c:	2b30      	cmp	r3, #48	@ 0x30
 8007b0e:	d818      	bhi.n	8007b42 <UART_SetConfig+0x1ba>
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	d00a      	beq.n	8007b2a <UART_SetConfig+0x1a2>
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	d814      	bhi.n	8007b42 <UART_SetConfig+0x1ba>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d002      	beq.n	8007b22 <UART_SetConfig+0x19a>
 8007b1c:	2b10      	cmp	r3, #16
 8007b1e:	d008      	beq.n	8007b32 <UART_SetConfig+0x1aa>
 8007b20:	e00f      	b.n	8007b42 <UART_SetConfig+0x1ba>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b28:	e0ad      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b30:	e0a9      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b32:	2304      	movs	r3, #4
 8007b34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b38:	e0a5      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b3a:	2308      	movs	r3, #8
 8007b3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b40:	e0a1      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b42:	2310      	movs	r3, #16
 8007b44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b48:	e09d      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8007c78 <UART_SetConfig+0x2f0>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d125      	bne.n	8007ba0 <UART_SetConfig+0x218>
 8007b54:	4b45      	ldr	r3, [pc, #276]	@ (8007c6c <UART_SetConfig+0x2e4>)
 8007b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b60:	d016      	beq.n	8007b90 <UART_SetConfig+0x208>
 8007b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b64:	d818      	bhi.n	8007b98 <UART_SetConfig+0x210>
 8007b66:	2b80      	cmp	r3, #128	@ 0x80
 8007b68:	d00a      	beq.n	8007b80 <UART_SetConfig+0x1f8>
 8007b6a:	2b80      	cmp	r3, #128	@ 0x80
 8007b6c:	d814      	bhi.n	8007b98 <UART_SetConfig+0x210>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <UART_SetConfig+0x1f0>
 8007b72:	2b40      	cmp	r3, #64	@ 0x40
 8007b74:	d008      	beq.n	8007b88 <UART_SetConfig+0x200>
 8007b76:	e00f      	b.n	8007b98 <UART_SetConfig+0x210>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b7e:	e082      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b80:	2302      	movs	r3, #2
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b86:	e07e      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b88:	2304      	movs	r3, #4
 8007b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8e:	e07a      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b90:	2308      	movs	r3, #8
 8007b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b96:	e076      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9e:	e072      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a35      	ldr	r2, [pc, #212]	@ (8007c7c <UART_SetConfig+0x2f4>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d12a      	bne.n	8007c00 <UART_SetConfig+0x278>
 8007baa:	4b30      	ldr	r3, [pc, #192]	@ (8007c6c <UART_SetConfig+0x2e4>)
 8007bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bb8:	d01a      	beq.n	8007bf0 <UART_SetConfig+0x268>
 8007bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bbe:	d81b      	bhi.n	8007bf8 <UART_SetConfig+0x270>
 8007bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bc4:	d00c      	beq.n	8007be0 <UART_SetConfig+0x258>
 8007bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bca:	d815      	bhi.n	8007bf8 <UART_SetConfig+0x270>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <UART_SetConfig+0x250>
 8007bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bd4:	d008      	beq.n	8007be8 <UART_SetConfig+0x260>
 8007bd6:	e00f      	b.n	8007bf8 <UART_SetConfig+0x270>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bde:	e052      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007be0:	2302      	movs	r3, #2
 8007be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be6:	e04e      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007be8:	2304      	movs	r3, #4
 8007bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bee:	e04a      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007bf0:	2308      	movs	r3, #8
 8007bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bf6:	e046      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfe:	e042      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a17      	ldr	r2, [pc, #92]	@ (8007c64 <UART_SetConfig+0x2dc>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d13a      	bne.n	8007c80 <UART_SetConfig+0x2f8>
 8007c0a:	4b18      	ldr	r3, [pc, #96]	@ (8007c6c <UART_SetConfig+0x2e4>)
 8007c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c18:	d01a      	beq.n	8007c50 <UART_SetConfig+0x2c8>
 8007c1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c1e:	d81b      	bhi.n	8007c58 <UART_SetConfig+0x2d0>
 8007c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c24:	d00c      	beq.n	8007c40 <UART_SetConfig+0x2b8>
 8007c26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c2a:	d815      	bhi.n	8007c58 <UART_SetConfig+0x2d0>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <UART_SetConfig+0x2b0>
 8007c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c34:	d008      	beq.n	8007c48 <UART_SetConfig+0x2c0>
 8007c36:	e00f      	b.n	8007c58 <UART_SetConfig+0x2d0>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c3e:	e022      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007c40:	2302      	movs	r3, #2
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c46:	e01e      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4e:	e01a      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c56:	e016      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5e:	e012      	b.n	8007c86 <UART_SetConfig+0x2fe>
 8007c60:	cfff69f3 	.word	0xcfff69f3
 8007c64:	40008000 	.word	0x40008000
 8007c68:	40013800 	.word	0x40013800
 8007c6c:	40021000 	.word	0x40021000
 8007c70:	40004400 	.word	0x40004400
 8007c74:	40004800 	.word	0x40004800
 8007c78:	40004c00 	.word	0x40004c00
 8007c7c:	40005000 	.word	0x40005000
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4aae      	ldr	r2, [pc, #696]	@ (8007f44 <UART_SetConfig+0x5bc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	f040 8097 	bne.w	8007dc0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d823      	bhi.n	8007ce2 <UART_SetConfig+0x35a>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <UART_SetConfig+0x318>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007ce3 	.word	0x08007ce3
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007ce3 	.word	0x08007ce3
 8007cb0:	08007cd3 	.word	0x08007cd3
 8007cb4:	08007ce3 	.word	0x08007ce3
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007ce3 	.word	0x08007ce3
 8007cc0:	08007cdb 	.word	0x08007cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc4:	f7fd fbce 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8007cc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cca:	e010      	b.n	8007cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ccc:	4b9e      	ldr	r3, [pc, #632]	@ (8007f48 <UART_SetConfig+0x5c0>)
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cd0:	e00d      	b.n	8007cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cd2:	f7fd fb59 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8007cd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007cd8:	e009      	b.n	8007cee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ce0:	e005      	b.n	8007cee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8130 	beq.w	8007f56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfa:	4a94      	ldr	r2, [pc, #592]	@ (8007f4c <UART_SetConfig+0x5c4>)
 8007cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d00:	461a      	mov	r2, r3
 8007d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	4413      	add	r3, r2
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d305      	bcc.n	8007d26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d903      	bls.n	8007d2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d2c:	e113      	b.n	8007f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	2200      	movs	r2, #0
 8007d32:	60bb      	str	r3, [r7, #8]
 8007d34:	60fa      	str	r2, [r7, #12]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3a:	4a84      	ldr	r2, [pc, #528]	@ (8007f4c <UART_SetConfig+0x5c4>)
 8007d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2200      	movs	r2, #0
 8007d44:	603b      	str	r3, [r7, #0]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d50:	f7f8 fea0 	bl	8000a94 <__aeabi_uldivmod>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	020b      	lsls	r3, r1, #8
 8007d66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d6a:	0202      	lsls	r2, r0, #8
 8007d6c:	6979      	ldr	r1, [r7, #20]
 8007d6e:	6849      	ldr	r1, [r1, #4]
 8007d70:	0849      	lsrs	r1, r1, #1
 8007d72:	2000      	movs	r0, #0
 8007d74:	460c      	mov	r4, r1
 8007d76:	4605      	mov	r5, r0
 8007d78:	eb12 0804 	adds.w	r8, r2, r4
 8007d7c:	eb43 0905 	adc.w	r9, r3, r5
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	469a      	mov	sl, r3
 8007d88:	4693      	mov	fp, r2
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	465b      	mov	r3, fp
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	f7f8 fe7f 	bl	8000a94 <__aeabi_uldivmod>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007da4:	d308      	bcc.n	8007db8 <UART_SetConfig+0x430>
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dac:	d204      	bcs.n	8007db8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6a3a      	ldr	r2, [r7, #32]
 8007db4:	60da      	str	r2, [r3, #12]
 8007db6:	e0ce      	b.n	8007f56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dbe:	e0ca      	b.n	8007f56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	69db      	ldr	r3, [r3, #28]
 8007dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dc8:	d166      	bne.n	8007e98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007dce:	2b08      	cmp	r3, #8
 8007dd0:	d827      	bhi.n	8007e22 <UART_SetConfig+0x49a>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <UART_SetConfig+0x450>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007dfd 	.word	0x08007dfd
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	08007e23 	.word	0x08007e23
 8007de8:	08007e13 	.word	0x08007e13
 8007dec:	08007e23 	.word	0x08007e23
 8007df0:	08007e23 	.word	0x08007e23
 8007df4:	08007e23 	.word	0x08007e23
 8007df8:	08007e1b 	.word	0x08007e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dfc:	f7fd fb32 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8007e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e02:	e014      	b.n	8007e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e04:	f7fd fb44 	bl	8005490 <HAL_RCC_GetPCLK2Freq>
 8007e08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e0a:	e010      	b.n	8007e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e0c:	4b4e      	ldr	r3, [pc, #312]	@ (8007f48 <UART_SetConfig+0x5c0>)
 8007e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e10:	e00d      	b.n	8007e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e12:	f7fd fab9 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8007e16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e18:	e009      	b.n	8007e2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e20:	e005      	b.n	8007e2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8090 	beq.w	8007f56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3a:	4a44      	ldr	r2, [pc, #272]	@ (8007f4c <UART_SetConfig+0x5c4>)
 8007e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e40:	461a      	mov	r2, r3
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e48:	005a      	lsls	r2, r3, #1
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	085b      	lsrs	r3, r3, #1
 8007e50:	441a      	add	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	2b0f      	cmp	r3, #15
 8007e60:	d916      	bls.n	8007e90 <UART_SetConfig+0x508>
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e68:	d212      	bcs.n	8007e90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f023 030f 	bic.w	r3, r3, #15
 8007e72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	8bfb      	ldrh	r3, [r7, #30]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	8bfa      	ldrh	r2, [r7, #30]
 8007e8c:	60da      	str	r2, [r3, #12]
 8007e8e:	e062      	b.n	8007f56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e96:	e05e      	b.n	8007f56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d828      	bhi.n	8007ef2 <UART_SetConfig+0x56a>
 8007ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea8 <UART_SetConfig+0x520>)
 8007ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea6:	bf00      	nop
 8007ea8:	08007ecd 	.word	0x08007ecd
 8007eac:	08007ed5 	.word	0x08007ed5
 8007eb0:	08007edd 	.word	0x08007edd
 8007eb4:	08007ef3 	.word	0x08007ef3
 8007eb8:	08007ee3 	.word	0x08007ee3
 8007ebc:	08007ef3 	.word	0x08007ef3
 8007ec0:	08007ef3 	.word	0x08007ef3
 8007ec4:	08007ef3 	.word	0x08007ef3
 8007ec8:	08007eeb 	.word	0x08007eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ecc:	f7fd faca 	bl	8005464 <HAL_RCC_GetPCLK1Freq>
 8007ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ed2:	e014      	b.n	8007efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ed4:	f7fd fadc 	bl	8005490 <HAL_RCC_GetPCLK2Freq>
 8007ed8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eda:	e010      	b.n	8007efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007edc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f48 <UART_SetConfig+0x5c0>)
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ee0:	e00d      	b.n	8007efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ee2:	f7fd fa51 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 8007ee6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ee8:	e009      	b.n	8007efe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ef0:	e005      	b.n	8007efe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007efc:	bf00      	nop
    }

    if (pclk != 0U)
 8007efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d028      	beq.n	8007f56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	4a10      	ldr	r2, [pc, #64]	@ (8007f4c <UART_SetConfig+0x5c4>)
 8007f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f12:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	441a      	add	r2, r3
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	2b0f      	cmp	r3, #15
 8007f2c:	d910      	bls.n	8007f50 <UART_SetConfig+0x5c8>
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f34:	d20c      	bcs.n	8007f50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60da      	str	r2, [r3, #12]
 8007f40:	e009      	b.n	8007f56 <UART_SetConfig+0x5ce>
 8007f42:	bf00      	nop
 8007f44:	40008000 	.word	0x40008000
 8007f48:	00f42400 	.word	0x00f42400
 8007f4c:	080093f8 	.word	0x080093f8
      }
      else
      {
        ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3730      	adds	r7, #48	@ 0x30
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	f003 0310 	and.w	r3, r3, #16
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01a      	beq.n	8008096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800807e:	d10a      	bne.n	8008096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	605a      	str	r2, [r3, #4]
  }
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b098      	sub	sp, #96	@ 0x60
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080d4:	f7fa f9c4 	bl	8002460 <HAL_GetTick>
 80080d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	d12f      	bne.n	8008148 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080f0:	2200      	movs	r2, #0
 80080f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f88e 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d022      	beq.n	8008148 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810a:	e853 3f00 	ldrex	r3, [r3]
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008116:	653b      	str	r3, [r7, #80]	@ 0x50
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	461a      	mov	r2, r3
 800811e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008120:	647b      	str	r3, [r7, #68]	@ 0x44
 8008122:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008124:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008128:	e841 2300 	strex	r3, r2, [r1]
 800812c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800812e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1e6      	bne.n	8008102 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e063      	b.n	8008210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0304 	and.w	r3, r3, #4
 8008152:	2b04      	cmp	r3, #4
 8008154:	d149      	bne.n	80081ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008156:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800815e:	2200      	movs	r2, #0
 8008160:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f857 	bl	8008218 <UART_WaitOnFlagUntilTimeout>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d03c      	beq.n	80081ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	623b      	str	r3, [r7, #32]
   return(result);
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	461a      	mov	r2, r3
 800818c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800818e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008190:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d1e6      	bne.n	8008170 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f023 0301 	bic.w	r3, r3, #1
 80081b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c2:	61fa      	str	r2, [r7, #28]
 80081c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	69b9      	ldr	r1, [r7, #24]
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	617b      	str	r3, [r7, #20]
   return(result);
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e012      	b.n	8008210 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3758      	adds	r7, #88	@ 0x58
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008228:	e04f      	b.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008230:	d04b      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008232:	f7fa f915 	bl	8002460 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	69ba      	ldr	r2, [r7, #24]
 800823e:	429a      	cmp	r2, r3
 8008240:	d302      	bcc.n	8008248 <UART_WaitOnFlagUntilTimeout+0x30>
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e04e      	b.n	80082ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	d037      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b80      	cmp	r3, #128	@ 0x80
 800825e:	d034      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b40      	cmp	r3, #64	@ 0x40
 8008264:	d031      	beq.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b08      	cmp	r3, #8
 8008272:	d110      	bne.n	8008296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2208      	movs	r2, #8
 800827a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f000 f95b 	bl	8008538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2208      	movs	r2, #8
 8008286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e029      	b.n	80082ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082a4:	d111      	bne.n	80082ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80082ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f941 	bl	8008538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e00f      	b.n	80082ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4013      	ands	r3, r2
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	bf0c      	ite	eq
 80082da:	2301      	moveq	r3, #1
 80082dc:	2300      	movne	r3, #0
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d0a0      	beq.n	800822a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b0a3      	sub	sp, #140	@ 0x8c
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	88fa      	ldrh	r2, [r7, #6]
 800830c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	88fa      	ldrh	r2, [r7, #6]
 8008314:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008326:	d10e      	bne.n	8008346 <UART_Start_Receive_IT+0x52>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d105      	bne.n	800833c <UART_Start_Receive_IT+0x48>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008336:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800833a:	e02d      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	22ff      	movs	r2, #255	@ 0xff
 8008340:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008344:	e028      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10d      	bne.n	800836a <UART_Start_Receive_IT+0x76>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d104      	bne.n	8008360 <UART_Start_Receive_IT+0x6c>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	22ff      	movs	r2, #255	@ 0xff
 800835a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800835e:	e01b      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	227f      	movs	r2, #127	@ 0x7f
 8008364:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008368:	e016      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008372:	d10d      	bne.n	8008390 <UART_Start_Receive_IT+0x9c>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d104      	bne.n	8008386 <UART_Start_Receive_IT+0x92>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	227f      	movs	r2, #127	@ 0x7f
 8008380:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008384:	e008      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	223f      	movs	r2, #63	@ 0x3f
 800838a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800838e:	e003      	b.n	8008398 <UART_Start_Receive_IT+0xa4>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2222      	movs	r2, #34	@ 0x22
 80083a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083b2:	e853 3f00 	ldrex	r3, [r3]
 80083b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80083b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083ba:	f043 0301 	orr.w	r3, r3, #1
 80083be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3308      	adds	r3, #8
 80083c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80083cc:	673a      	str	r2, [r7, #112]	@ 0x70
 80083ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80083d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80083da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e3      	bne.n	80083a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083e8:	d14f      	bne.n	800848a <UART_Start_Receive_IT+0x196>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083f0:	88fa      	ldrh	r2, [r7, #6]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d349      	bcc.n	800848a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fe:	d107      	bne.n	8008410 <UART_Start_Receive_IT+0x11c>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4a47      	ldr	r2, [pc, #284]	@ (8008528 <UART_Start_Receive_IT+0x234>)
 800840c:	675a      	str	r2, [r3, #116]	@ 0x74
 800840e:	e002      	b.n	8008416 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a46      	ldr	r2, [pc, #280]	@ (800852c <UART_Start_Receive_IT+0x238>)
 8008414:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01a      	beq.n	8008454 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800842c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008440:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008442:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008446:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800844e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e4      	bne.n	800841e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3308      	adds	r3, #8
 800845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800846a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008474:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008476:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800847a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e5      	bne.n	8008454 <UART_Start_Receive_IT+0x160>
 8008488:	e046      	b.n	8008518 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008492:	d107      	bne.n	80084a4 <UART_Start_Receive_IT+0x1b0>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4a24      	ldr	r2, [pc, #144]	@ (8008530 <UART_Start_Receive_IT+0x23c>)
 80084a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80084a2:	e002      	b.n	80084aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4a23      	ldr	r2, [pc, #140]	@ (8008534 <UART_Start_Receive_IT+0x240>)
 80084a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d019      	beq.n	80084e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80084c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e6      	bne.n	80084b2 <UART_Start_Receive_IT+0x1be>
 80084e4:	e018      	b.n	8008518 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	613b      	str	r3, [r7, #16]
   return(result);
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	f043 0320 	orr.w	r3, r3, #32
 80084fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008504:	623b      	str	r3, [r7, #32]
 8008506:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	69f9      	ldr	r1, [r7, #28]
 800850a:	6a3a      	ldr	r2, [r7, #32]
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	61bb      	str	r3, [r7, #24]
   return(result);
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e6      	bne.n	80084e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	378c      	adds	r7, #140	@ 0x8c
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	08008d59 	.word	0x08008d59
 800852c:	080089f9 	.word	0x080089f9
 8008530:	08008841 	.word	0x08008841
 8008534:	08008689 	.word	0x08008689

08008538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b095      	sub	sp, #84	@ 0x54
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800855e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008560:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	61fb      	str	r3, [r7, #28]
   return(result);
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008588:	f023 0301 	bic.w	r3, r3, #1
 800858c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800859c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e3      	bne.n	8008572 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d118      	bne.n	80085e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	60bb      	str	r3, [r7, #8]
   return(result);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f023 0310 	bic.w	r3, r3, #16
 80085c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	461a      	mov	r2, r3
 80085ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085d0:	61bb      	str	r3, [r7, #24]
 80085d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d4:	6979      	ldr	r1, [r7, #20]
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	e841 2300 	strex	r3, r2, [r1]
 80085dc:	613b      	str	r3, [r7, #16]
   return(result);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1e6      	bne.n	80085b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80085f8:	bf00      	nop
 80085fa:	3754      	adds	r7, #84	@ 0x54
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008610:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7ff f99a 	bl	800795c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	60bb      	str	r3, [r7, #8]
   return(result);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	61bb      	str	r3, [r7, #24]
 8008658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6979      	ldr	r1, [r7, #20]
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	613b      	str	r3, [r7, #16]
   return(result);
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e6      	bne.n	8008638 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff f965 	bl	8007948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800867e:	bf00      	nop
 8008680:	3720      	adds	r7, #32
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
	...

08008688 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b09c      	sub	sp, #112	@ 0x70
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008696:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086a0:	2b22      	cmp	r3, #34	@ 0x22
 80086a2:	f040 80be 	bne.w	8008822 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086b4:	b2d9      	uxtb	r1, r3
 80086b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c0:	400a      	ands	r2, r1
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	3b01      	subs	r3, #1
 80086da:	b29a      	uxth	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f040 80a1 	bne.w	8008832 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800870e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008710:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008712:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008714:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008716:	e841 2300 	strex	r3, r2, [r1]
 800871a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800871c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1e6      	bne.n	80086f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3308      	adds	r3, #8
 8008728:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	667b      	str	r3, [r7, #100]	@ 0x64
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008742:	647a      	str	r2, [r7, #68]	@ 0x44
 8008744:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008748:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e5      	bne.n	8008722 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a33      	ldr	r2, [pc, #204]	@ (800883c <UART_RxISR_8BIT+0x1b4>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d01f      	beq.n	80087b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d018      	beq.n	80087b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	e853 3f00 	ldrex	r3, [r3]
 800878e:	623b      	str	r3, [r7, #32]
   return(result);
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008796:	663b      	str	r3, [r7, #96]	@ 0x60
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	461a      	mov	r2, r3
 800879e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80087a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087a8:	e841 2300 	strex	r3, r2, [r1]
 80087ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e6      	bne.n	8008782 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d12e      	bne.n	800881a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	e853 3f00 	ldrex	r3, [r3]
 80087ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 0310 	bic.w	r3, r3, #16
 80087d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087e0:	61fb      	str	r3, [r7, #28]
 80087e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	69b9      	ldr	r1, [r7, #24]
 80087e6:	69fa      	ldr	r2, [r7, #28]
 80087e8:	e841 2300 	strex	r3, r2, [r1]
 80087ec:	617b      	str	r3, [r7, #20]
   return(result);
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1e6      	bne.n	80087c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	f003 0310 	and.w	r3, r3, #16
 80087fe:	2b10      	cmp	r3, #16
 8008800:	d103      	bne.n	800880a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2210      	movs	r2, #16
 8008808:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff f8ac 	bl	8007970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008818:	e00b      	b.n	8008832 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7f9 fb06 	bl	8001e2c <HAL_UART_RxCpltCallback>
}
 8008820:	e007      	b.n	8008832 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f042 0208 	orr.w	r2, r2, #8
 8008830:	619a      	str	r2, [r3, #24]
}
 8008832:	bf00      	nop
 8008834:	3770      	adds	r7, #112	@ 0x70
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	40008000 	.word	0x40008000

08008840 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b09c      	sub	sp, #112	@ 0x70
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800884e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008858:	2b22      	cmp	r3, #34	@ 0x22
 800885a:	f040 80be 	bne.w	80089da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008864:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800886c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800886e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008872:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008876:	4013      	ands	r3, r2
 8008878:	b29a      	uxth	r2, r3
 800887a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800887c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008882:	1c9a      	adds	r2, r3, #2
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f040 80a1 	bne.w	80089ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80088b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80088c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e6      	bne.n	80088a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ec:	f023 0301 	bic.w	r3, r3, #1
 80088f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80088fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80088fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008900:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008902:	e841 2300 	strex	r3, r2, [r1]
 8008906:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e5      	bne.n	80088da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a33      	ldr	r2, [pc, #204]	@ (80089f4 <UART_RxISR_16BIT+0x1b4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d01f      	beq.n	800896c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d018      	beq.n	800896c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	61fb      	str	r3, [r7, #28]
   return(result);
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800894e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008958:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800895a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800895e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e6      	bne.n	800893a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008970:	2b01      	cmp	r3, #1
 8008972:	d12e      	bne.n	80089d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	60bb      	str	r3, [r7, #8]
   return(result);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f023 0310 	bic.w	r3, r3, #16
 800898e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6979      	ldr	r1, [r7, #20]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	613b      	str	r3, [r7, #16]
   return(result);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e6      	bne.n	800897a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f003 0310 	and.w	r3, r3, #16
 80089b6:	2b10      	cmp	r3, #16
 80089b8:	d103      	bne.n	80089c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2210      	movs	r2, #16
 80089c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fe ffd0 	bl	8007970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089d0:	e00b      	b.n	80089ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7f9 fa2a 	bl	8001e2c <HAL_UART_RxCpltCallback>
}
 80089d8:	e007      	b.n	80089ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	699a      	ldr	r2, [r3, #24]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f042 0208 	orr.w	r2, r2, #8
 80089e8:	619a      	str	r2, [r3, #24]
}
 80089ea:	bf00      	nop
 80089ec:	3770      	adds	r7, #112	@ 0x70
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	40008000 	.word	0x40008000

080089f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b0ac      	sub	sp, #176	@ 0xb0
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a06:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a2e:	2b22      	cmp	r3, #34	@ 0x22
 8008a30:	f040 8182 	bne.w	8008d38 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008a3a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a3e:	e125      	b.n	8008c8c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a46:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008a4e:	b2d9      	uxtb	r1, r3
 8008a50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a5a:	400a      	ands	r2, r1
 8008a5c:	b2d2      	uxtb	r2, r2
 8008a5e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d053      	beq.n	8008b3a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d011      	beq.n	8008ac2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab8:	f043 0201 	orr.w	r2, r3, #1
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d011      	beq.n	8008af2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00b      	beq.n	8008af2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ae8:	f043 0204 	orr.w	r2, r3, #4
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008af6:	f003 0304 	and.w	r3, r3, #4
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d011      	beq.n	8008b22 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00b      	beq.n	8008b22 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2204      	movs	r2, #4
 8008b10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b18:	f043 0202 	orr.w	r2, r3, #2
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d006      	beq.n	8008b3a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7fe ff15 	bl	800795c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 80a2 	bne.w	8008c8c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008b6c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008b70:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e4      	bne.n	8008b48 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3308      	adds	r3, #8
 8008b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008b8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b94:	f023 0301 	bic.w	r3, r3, #1
 8008b98:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	3308      	adds	r3, #8
 8008ba2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008ba6:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008ba8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008bac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008bb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e1      	bne.n	8008b7e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a5f      	ldr	r2, [pc, #380]	@ (8008d50 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d021      	beq.n	8008c1c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d01a      	beq.n	8008c1c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c08:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c0a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e4      	bne.n	8008be6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d130      	bne.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3a:	f023 0310 	bic.w	r3, r3, #16
 8008c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e4      	bne.n	8008c2a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f003 0310 	and.w	r3, r3, #16
 8008c6a:	2b10      	cmp	r3, #16
 8008c6c:	d103      	bne.n	8008c76 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2210      	movs	r2, #16
 8008c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7fe fe76 	bl	8007970 <HAL_UARTEx_RxEventCallback>
 8008c84:	e002      	b.n	8008c8c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7f9 f8d0 	bl	8001e2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c8c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f47f aecf 	bne.w	8008a40 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ca8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d049      	beq.n	8008d48 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008cba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d242      	bcs.n	8008d48 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e3      	bne.n	8008cc2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a15      	ldr	r2, [pc, #84]	@ (8008d54 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008cfe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	f043 0320 	orr.w	r3, r3, #32
 8008d14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d22:	61bb      	str	r3, [r7, #24]
 8008d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	6979      	ldr	r1, [r7, #20]
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e4      	bne.n	8008d00 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d36:	e007      	b.n	8008d48 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699a      	ldr	r2, [r3, #24]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f042 0208 	orr.w	r2, r2, #8
 8008d46:	619a      	str	r2, [r3, #24]
}
 8008d48:	bf00      	nop
 8008d4a:	37b0      	adds	r7, #176	@ 0xb0
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40008000 	.word	0x40008000
 8008d54:	08008689 	.word	0x08008689

08008d58 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b0ae      	sub	sp, #184	@ 0xb8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d66:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	69db      	ldr	r3, [r3, #28]
 8008d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d8e:	2b22      	cmp	r3, #34	@ 0x22
 8008d90:	f040 8186 	bne.w	80090a0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008d9a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d9e:	e129      	b.n	8008ff4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008db2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008db6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008dba:	4013      	ands	r3, r2
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc8:	1c9a      	adds	r2, r3, #2
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d053      	beq.n	8008e9e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008df6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d011      	beq.n	8008e26 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00b      	beq.n	8008e26 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2201      	movs	r2, #1
 8008e14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e1c:	f043 0201 	orr.w	r2, r3, #1
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d011      	beq.n	8008e56 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00b      	beq.n	8008e56 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2202      	movs	r2, #2
 8008e44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e4c:	f043 0204 	orr.w	r2, r3, #4
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d011      	beq.n	8008e86 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008e62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00b      	beq.n	8008e86 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2204      	movs	r2, #4
 8008e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e7c:	f043 0202 	orr.w	r2, r3, #2
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d006      	beq.n	8008e9e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7fe fd63 	bl	800795c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f040 80a4 	bne.w	8008ff4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008eba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ec0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ece:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ed2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ed6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ee0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e2      	bne.n	8008eac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ef6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008efc:	f023 0301 	bic.w	r3, r3, #1
 8008f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3308      	adds	r3, #8
 8008f0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008f0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e1      	bne.n	8008ee6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a5f      	ldr	r2, [pc, #380]	@ (80090b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d021      	beq.n	8008f84 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d01a      	beq.n	8008f84 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f56:	e853 3f00 	ldrex	r3, [r3]
 8008f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f72:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e4      	bne.n	8008f4e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d130      	bne.n	8008fee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa2:	f023 0310 	bic.w	r3, r3, #16
 8008fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e4      	bne.n	8008f92 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	f003 0310 	and.w	r3, r3, #16
 8008fd2:	2b10      	cmp	r3, #16
 8008fd4:	d103      	bne.n	8008fde <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fe fcc2 	bl	8007970 <HAL_UARTEx_RxEventCallback>
 8008fec:	e002      	b.n	8008ff4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7f8 ff1c 	bl	8001e2c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ff4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d006      	beq.n	800900a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008ffc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	f47f aecb 	bne.w	8008da0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009010:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009014:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009018:	2b00      	cmp	r3, #0
 800901a:	d049      	beq.n	80090b0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009022:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009026:	429a      	cmp	r2, r3
 8009028:	d242      	bcs.n	80090b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3308      	adds	r3, #8
 8009030:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	623b      	str	r3, [r7, #32]
   return(result);
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3308      	adds	r3, #8
 800904a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800904e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009050:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009056:	e841 2300 	strex	r3, r2, [r1]
 800905a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1e3      	bne.n	800902a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a15      	ldr	r2, [pc, #84]	@ (80090bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009066:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	60fb      	str	r3, [r7, #12]
   return(result);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f043 0320 	orr.w	r3, r3, #32
 800907c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	69b9      	ldr	r1, [r7, #24]
 8009090:	69fa      	ldr	r2, [r7, #28]
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	617b      	str	r3, [r7, #20]
   return(result);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e4      	bne.n	8009068 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800909e:	e007      	b.n	80090b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0208 	orr.w	r2, r2, #8
 80090ae:	619a      	str	r2, [r3, #24]
}
 80090b0:	bf00      	nop
 80090b2:	37b8      	adds	r7, #184	@ 0xb8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	40008000 	.word	0x40008000
 80090bc:	08008841 	.word	0x08008841

080090c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800910a:	2b01      	cmp	r3, #1
 800910c:	d101      	bne.n	8009112 <HAL_UARTEx_DisableFifoMode+0x16>
 800910e:	2302      	movs	r3, #2
 8009110:	e027      	b.n	8009162 <HAL_UARTEx_DisableFifoMode+0x66>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2224      	movs	r2, #36	@ 0x24
 800911e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0201 	bic.w	r2, r2, #1
 8009138:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009140:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b084      	sub	sp, #16
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800917e:	2b01      	cmp	r3, #1
 8009180:	d101      	bne.n	8009186 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009182:	2302      	movs	r3, #2
 8009184:	e02d      	b.n	80091e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2224      	movs	r2, #36	@ 0x24
 8009192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0201 	bic.w	r2, r2, #1
 80091ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f850 	bl	8009268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d101      	bne.n	8009202 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091fe:	2302      	movs	r3, #2
 8009200:	e02d      	b.n	800925e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2224      	movs	r2, #36	@ 0x24
 800920e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0201 	bic.w	r2, r2, #1
 8009228:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	683a      	ldr	r2, [r7, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f812 	bl	8009268 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2220      	movs	r2, #32
 8009250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009274:	2b00      	cmp	r3, #0
 8009276:	d108      	bne.n	800928a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009288:	e031      	b.n	80092ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800928a:	2308      	movs	r3, #8
 800928c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800928e:	2308      	movs	r3, #8
 8009290:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	0e5b      	lsrs	r3, r3, #25
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 0307 	and.w	r3, r3, #7
 80092a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	0f5b      	lsrs	r3, r3, #29
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
 80092b4:	7b3a      	ldrb	r2, [r7, #12]
 80092b6:	4911      	ldr	r1, [pc, #68]	@ (80092fc <UARTEx_SetNbDataToProcess+0x94>)
 80092b8:	5c8a      	ldrb	r2, [r1, r2]
 80092ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092be:	7b3a      	ldrb	r2, [r7, #12]
 80092c0:	490f      	ldr	r1, [pc, #60]	@ (8009300 <UARTEx_SetNbDataToProcess+0x98>)
 80092c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	7b7a      	ldrb	r2, [r7, #13]
 80092d4:	4909      	ldr	r1, [pc, #36]	@ (80092fc <UARTEx_SetNbDataToProcess+0x94>)
 80092d6:	5c8a      	ldrb	r2, [r1, r2]
 80092d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092dc:	7b7a      	ldrb	r2, [r7, #13]
 80092de:	4908      	ldr	r1, [pc, #32]	@ (8009300 <UARTEx_SetNbDataToProcess+0x98>)
 80092e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	08009410 	.word	0x08009410
 8009300:	08009418 	.word	0x08009418

08009304 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	ed93 7a06 	vldr	s14, [r3, #24]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	edd3 7a07 	vldr	s15, [r3, #28]
 800931a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	edd3 7a08 	vldr	s15, [r3, #32]
 8009324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	edd3 7a06 	vldr	s15, [r3, #24]
 8009334:	eeb1 7a67 	vneg.f32	s14, s15
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	edd3 7a08 	vldr	s15, [r3, #32]
 800933e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	330c      	adds	r3, #12
 800935e:	220c      	movs	r2, #12
 8009360:	2100      	movs	r1, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f804 	bl	8009370 <memset>
  }

}
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <memset>:
 8009370:	4402      	add	r2, r0
 8009372:	4603      	mov	r3, r0
 8009374:	4293      	cmp	r3, r2
 8009376:	d100      	bne.n	800937a <memset+0xa>
 8009378:	4770      	bx	lr
 800937a:	f803 1b01 	strb.w	r1, [r3], #1
 800937e:	e7f9      	b.n	8009374 <memset+0x4>

08009380 <__libc_init_array>:
 8009380:	b570      	push	{r4, r5, r6, lr}
 8009382:	4d0d      	ldr	r5, [pc, #52]	@ (80093b8 <__libc_init_array+0x38>)
 8009384:	4c0d      	ldr	r4, [pc, #52]	@ (80093bc <__libc_init_array+0x3c>)
 8009386:	1b64      	subs	r4, r4, r5
 8009388:	10a4      	asrs	r4, r4, #2
 800938a:	2600      	movs	r6, #0
 800938c:	42a6      	cmp	r6, r4
 800938e:	d109      	bne.n	80093a4 <__libc_init_array+0x24>
 8009390:	4d0b      	ldr	r5, [pc, #44]	@ (80093c0 <__libc_init_array+0x40>)
 8009392:	4c0c      	ldr	r4, [pc, #48]	@ (80093c4 <__libc_init_array+0x44>)
 8009394:	f000 f818 	bl	80093c8 <_init>
 8009398:	1b64      	subs	r4, r4, r5
 800939a:	10a4      	asrs	r4, r4, #2
 800939c:	2600      	movs	r6, #0
 800939e:	42a6      	cmp	r6, r4
 80093a0:	d105      	bne.n	80093ae <__libc_init_array+0x2e>
 80093a2:	bd70      	pop	{r4, r5, r6, pc}
 80093a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a8:	4798      	blx	r3
 80093aa:	3601      	adds	r6, #1
 80093ac:	e7ee      	b.n	800938c <__libc_init_array+0xc>
 80093ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b2:	4798      	blx	r3
 80093b4:	3601      	adds	r6, #1
 80093b6:	e7f2      	b.n	800939e <__libc_init_array+0x1e>
 80093b8:	08009428 	.word	0x08009428
 80093bc:	08009428 	.word	0x08009428
 80093c0:	08009428 	.word	0x08009428
 80093c4:	0800942c 	.word	0x0800942c

080093c8 <_init>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr

080093d4 <_fini>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr
